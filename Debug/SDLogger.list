
SDLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000076a0  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eebc  0800eebc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800eebc  0800eebc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eebc  0800eebc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eebc  0800eebc  0001eebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eec0  0800eec0  0001eec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800eec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000014  0800eed8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800eed8  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dda  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023e3  00000000  00000000  00031e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001118  00000000  00000000  00034200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  00035318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019278  00000000  00000000  00036348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e04e  00000000  00000000  0004f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000903c6  00000000  00000000  0005d60e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed9d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004864  00000000  00000000  000eda50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08007804 	.word	0x08007804

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08007804 	.word	0x08007804

0800014c <main>:
  */

char    buff[] = "Hello";

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fbaa 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f862 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f974 	bl	8000448 <MX_GPIO_Init>
  MX_DMA_Init();
 8000160:	f000 f94c 	bl	80003fc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f920 	bl	80003a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000168:	f000 f8d2 	bl	8000310 <MX_TIM2_Init>
  MX_SPI1_Init();
 800016c:	f000 f89a 	bl	80002a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data = 5;
 8000170:	2305      	movs	r3, #5
 8000172:	f887 3496 	strb.w	r3, [r7, #1174]	; 0x496
  HAL_TIM_Base_Start_IT( &htim2 );
 8000176:	4825      	ldr	r0, [pc, #148]	; (800020c <main+0xc0>)
 8000178:	f002 f870 	bl	800225c <HAL_TIM_Base_Start_IT>


  HAL_Delay(10);
 800017c:	200a      	movs	r0, #10
 800017e:	f000 fbf7 	bl	8000970 <HAL_Delay>

  FATFS FATFS_Obj;
  FIL file;
  UINT nRead, nWritten;

	 result = f_mount(&FATFS_Obj, "0", 1);
 8000182:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000186:	2201      	movs	r2, #1
 8000188:	4921      	ldr	r1, [pc, #132]	; (8000210 <main+0xc4>)
 800018a:	4618      	mov	r0, r3
 800018c:	f006 fcb4 	bl	8006af8 <f_mount>
 8000190:	4603      	mov	r3, r0
 8000192:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	 if (result != FR_OK)
 8000196:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800019a:	2b00      	cmp	r3, #0
 800019c:	d003      	beq.n	80001a6 <main+0x5a>
	 {
		 uint8_t dermo = 0;
 800019e:	2300      	movs	r3, #0
 80001a0:	f887 3495 	strb.w	r3, [r7, #1173]	; 0x495
 80001a4:	e009      	b.n	80001ba <main+0x6e>
			 //printf("Ошибка монтирования диска %d\r\n", result);
	 }else{
		 result = f_mount(&FATFS_Obj, "0", 1);
 80001a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80001aa:	2201      	movs	r2, #1
 80001ac:	4918      	ldr	r1, [pc, #96]	; (8000210 <main+0xc4>)
 80001ae:	4618      	mov	r0, r3
 80001b0:	f006 fca2 	bl	8006af8 <f_mount>
 80001b4:	4603      	mov	r3, r0
 80001b6:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	 }

	 // создаем файл write.txt
	 result = f_open(&file, "write.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80001ba:	f107 0308 	add.w	r3, r7, #8
 80001be:	220a      	movs	r2, #10
 80001c0:	4914      	ldr	r1, [pc, #80]	; (8000214 <main+0xc8>)
 80001c2:	4618      	mov	r0, r3
 80001c4:	f006 fcd8 	bl	8006b78 <f_open>
 80001c8:	4603      	mov	r3, r0
 80001ca:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	 if (result == FR_OK)
 80001ce:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d10e      	bne.n	80001f4 <main+0xa8>
	 {
		 result = f_write(&file, &buff, sizeof(buff), &nWritten);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	f107 0008 	add.w	r0, r7, #8
 80001dc:	2206      	movs	r2, #6
 80001de:	490e      	ldr	r1, [pc, #56]	; (8000218 <main+0xcc>)
 80001e0:	f006 fef6 	bl	8006fd0 <f_write>
 80001e4:	4603      	mov	r3, r0
 80001e6:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
		 f_close(&file);
 80001ea:	f107 0308 	add.w	r3, r7, #8
 80001ee:	4618      	mov	r0, r3
 80001f0:	f007 f9d2 	bl	8007598 <f_close>
	 }

	 if(result == FR_OK){
 80001f4:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d105      	bne.n	8000208 <main+0xbc>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	4806      	ldr	r0, [pc, #24]	; (800021c <main+0xd0>)
 8000204:	f000 ff9e 	bl	8001144 <HAL_GPIO_WritePin>
	 }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	e7fe      	b.n	8000208 <main+0xbc>
 800020a:	bf00      	nop
 800020c:	200005c8 	.word	0x200005c8
 8000210:	0800781c 	.word	0x0800781c
 8000214:	08007820 	.word	0x08007820
 8000218:	20000000 	.word	0x20000000
 800021c:	40011000 	.word	0x40011000

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f007 fae0 	bl	80077f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000252:	2300      	movs	r3, #0
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000256:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f000 ff87 	bl	8001174 <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800026c:	f000 f964 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2101      	movs	r1, #1
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f9f2 	bl	8001674 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000296:	f000 f94f 	bl	8000538 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <MX_SPI1_Init+0x64>)
 80002aa:	4a18      	ldr	r2, [pc, #96]	; (800030c <MX_SPI1_Init+0x68>)
 80002ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ae:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_SPI1_Init+0x64>)
 80002b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_SPI1_Init+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <MX_SPI1_Init+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_SPI1_Init+0x64>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_SPI1_Init+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_SPI1_Init+0x64>)
 80002d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_SPI1_Init+0x64>)
 80002d8:	2218      	movs	r2, #24
 80002da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <MX_SPI1_Init+0x64>)
 80002de:	2200      	movs	r2, #0
 80002e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_SPI1_Init+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <MX_SPI1_Init+0x64>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_SPI1_Init+0x64>)
 80002f0:	220a      	movs	r2, #10
 80002f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <MX_SPI1_Init+0x64>)
 80002f6:	f001 fb59 	bl	80019ac <HAL_SPI_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000300:	f000 f91a 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000570 	.word	0x20000570
 800030c:	40013000 	.word	0x40013000

08000310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800032c:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <MX_TIM2_Init+0x94>)
 800032e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000336:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800033a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_TIM2_Init+0x94>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000344:	2201      	movs	r2, #1
 8000346:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_TIM2_Init+0x94>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000354:	4813      	ldr	r0, [pc, #76]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000356:	f001 ff31 	bl	80021bc <HAL_TIM_Base_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000360:	f000 f8ea 	bl	8000538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000372:	f002 f8cd 	bl	8002510 <HAL_TIM_ConfigClockSource>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800037c:	f000 f8dc 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000380:	2300      	movs	r3, #0
 8000382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000388:	463b      	mov	r3, r7
 800038a:	4619      	mov	r1, r3
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_TIM2_Init+0x94>)
 800038e:	f002 fa93 	bl	80028b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000398:	f000 f8ce 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200005c8 	.word	0x200005c8

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <MX_USART1_UART_Init+0x50>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003e0:	f002 fada 	bl	8002998 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ea:	f000 f8a5 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000530 	.word	0x20000530
 80003f8:	40013800 	.word	0x40013800

080003fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <MX_DMA_Init+0x48>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a0f      	ldr	r2, [pc, #60]	; (8000444 <MX_DMA_Init+0x48>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <MX_DMA_Init+0x48>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	2100      	movs	r1, #0
 800041e:	200e      	movs	r0, #14
 8000420:	f000 fb9f 	bl	8000b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000424:	200e      	movs	r0, #14
 8000426:	f000 fbb8 	bl	8000b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2100      	movs	r1, #0
 800042e:	200f      	movs	r0, #15
 8000430:	f000 fb97 	bl	8000b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000434:	200f      	movs	r0, #15
 8000436:	f000 fbb0 	bl	8000b9a <HAL_NVIC_EnableIRQ>

}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045c:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <MX_GPIO_Init+0x9c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a20      	ldr	r2, [pc, #128]	; (80004e4 <MX_GPIO_Init+0x9c>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <MX_GPIO_Init+0x9c>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <MX_GPIO_Init+0x9c>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1a      	ldr	r2, [pc, #104]	; (80004e4 <MX_GPIO_Init+0x9c>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_GPIO_Init+0x9c>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	4815      	ldr	r0, [pc, #84]	; (80004e8 <MX_GPIO_Init+0xa0>)
 8000494:	f000 fe56 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2110      	movs	r1, #16
 800049c:	4813      	ldr	r0, [pc, #76]	; (80004ec <MX_GPIO_Init+0xa4>)
 800049e:	f000 fe51 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2302      	movs	r3, #2
 80004b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	4619      	mov	r1, r3
 80004ba:	480b      	ldr	r0, [pc, #44]	; (80004e8 <MX_GPIO_Init+0xa0>)
 80004bc:	f000 fce8 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80004c0:	2310      	movs	r3, #16
 80004c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2302      	movs	r3, #2
 80004ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	4619      	mov	r1, r3
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_GPIO_Init+0xa4>)
 80004d8:	f000 fcda 	bl	8000e90 <HAL_GPIO_Init>

}
 80004dc:	bf00      	nop
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40011000 	.word	0x40011000
 80004ec:	40010800 	.word	0x40010800

080004f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a08      	ldr	r2, [pc, #32]	; (800051c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d108      	bne.n	8000512 <HAL_TIM_PeriodElapsedCallback+0x22>
		tim_counter++;
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	3301      	adds	r3, #1
 8000508:	b29a      	uxth	r2, r3
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800050c:	801a      	strh	r2, [r3, #0]
		//TODO: Поправити таймер для періоду 1мс
		disk_timerproc();
 800050e:	f003 f88b 	bl	8003628 <disk_timerproc>
	}

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200005c8 	.word	0x200005c8
 8000520:	20000030 	.word	0x20000030

08000524 <Get_SPI_HandleTypeDef>:

SPI_HandleTypeDef* Get_SPI_HandleTypeDef(){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	return &hspi1;
 8000528:	4b02      	ldr	r3, [pc, #8]	; (8000534 <Get_SPI_HandleTypeDef+0x10>)
}
 800052a:	4618      	mov	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000570 	.word	0x20000570

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_MspInit+0x5c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <HAL_MspInit+0x5c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_MspInit+0x5c>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x5c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_MspInit+0x5c>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x5c>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <HAL_MspInit+0x60>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <HAL_MspInit+0x60>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010000 	.word	0x40010000

080005a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a1b      	ldr	r2, [pc, #108]	; (8000630 <HAL_SPI_MspInit+0x88>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d12f      	bne.n	8000628 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <HAL_SPI_MspInit+0x8c>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a19      	ldr	r2, [pc, #100]	; (8000634 <HAL_SPI_MspInit+0x8c>)
 80005ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_SPI_MspInit+0x8c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <HAL_SPI_MspInit+0x8c>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <HAL_SPI_MspInit+0x8c>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <HAL_SPI_MspInit+0x8c>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005f8:	23a0      	movs	r3, #160	; 0xa0
 80005fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <HAL_SPI_MspInit+0x90>)
 800060c:	f000 fc40 	bl	8000e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <HAL_SPI_MspInit+0x90>)
 8000624:	f000 fc34 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40013000 	.word	0x40013000
 8000634:	40021000 	.word	0x40021000
 8000638:	40010800 	.word	0x40010800

0800063c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800064c:	d113      	bne.n	8000676 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_TIM_Base_MspInit+0x44>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <HAL_TIM_Base_MspInit+0x44>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_TIM_Base_MspInit+0x44>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	201c      	movs	r0, #28
 800066c:	f000 fa79 	bl	8000b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000670:	201c      	movs	r0, #28
 8000672:	f000 fa92 	bl	8000b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a42      	ldr	r2, [pc, #264]	; (80007a8 <HAL_UART_MspInit+0x124>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d17d      	bne.n	80007a0 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <HAL_UART_MspInit+0x128>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a40      	ldr	r2, [pc, #256]	; (80007ac <HAL_UART_MspInit+0x128>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <HAL_UART_MspInit+0x128>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <HAL_UART_MspInit+0x128>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a3a      	ldr	r2, [pc, #232]	; (80007ac <HAL_UART_MspInit+0x128>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b38      	ldr	r3, [pc, #224]	; (80007ac <HAL_UART_MspInit+0x128>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4619      	mov	r1, r3
 80006e8:	4831      	ldr	r0, [pc, #196]	; (80007b0 <HAL_UART_MspInit+0x12c>)
 80006ea:	f000 fbd1 	bl	8000e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	482b      	ldr	r0, [pc, #172]	; (80007b0 <HAL_UART_MspInit+0x12c>)
 8000704:	f000 fbc4 	bl	8000e90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <HAL_UART_MspInit+0x130>)
 800070a:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <HAL_UART_MspInit+0x134>)
 800070c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <HAL_UART_MspInit+0x130>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <HAL_UART_MspInit+0x130>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <HAL_UART_MspInit+0x130>)
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <HAL_UART_MspInit+0x130>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <HAL_UART_MspInit+0x130>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <HAL_UART_MspInit+0x130>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <HAL_UART_MspInit+0x130>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000738:	481e      	ldr	r0, [pc, #120]	; (80007b4 <HAL_UART_MspInit+0x130>)
 800073a:	f000 fa49 	bl	8000bd0 <HAL_DMA_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000744:	f7ff fef8 	bl	8000538 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a1a      	ldr	r2, [pc, #104]	; (80007b4 <HAL_UART_MspInit+0x130>)
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
 800074e:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <HAL_UART_MspInit+0x130>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_UART_MspInit+0x138>)
 8000756:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <HAL_UART_MspInit+0x13c>)
 8000758:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_UART_MspInit+0x138>)
 800075c:	2210      	movs	r2, #16
 800075e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <HAL_UART_MspInit+0x138>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_UART_MspInit+0x138>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_UART_MspInit+0x138>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_UART_MspInit+0x138>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_UART_MspInit+0x138>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_UART_MspInit+0x138>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <HAL_UART_MspInit+0x138>)
 8000786:	f000 fa23 	bl	8000bd0 <HAL_DMA_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000790:	f7ff fed2 	bl	8000538 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <HAL_UART_MspInit+0x138>)
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_UART_MspInit+0x138>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40013800 	.word	0x40013800
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010800 	.word	0x40010800
 80007b4:	200004ec 	.word	0x200004ec
 80007b8:	40020058 	.word	0x40020058
 80007bc:	200004a8 	.word	0x200004a8
 80007c0:	40020044 	.word	0x40020044

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <HardFault_Handler+0x4>

080007d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <MemManage_Handler+0x4>

080007dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <BusFault_Handler+0x4>

080007e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f892 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <DMA1_Channel4_IRQHandler+0x10>)
 800081e:	f000 fa31 	bl	8000c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200004a8 	.word	0x200004a8

0800082c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <DMA1_Channel5_IRQHandler+0x10>)
 8000832:	f000 fa27 	bl	8000c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200004ec 	.word	0x200004ec

08000840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <TIM2_IRQHandler+0x10>)
 8000846:	f001 fd5b 	bl	8002300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200005c8 	.word	0x200005c8

08000854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000860:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000862:	e003      	b.n	800086c <LoopCopyDataInit>

08000864 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000866:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000868:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800086a:	3104      	adds	r1, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800086c:	480a      	ldr	r0, [pc, #40]	; (8000898 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000870:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000872:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000874:	d3f6      	bcc.n	8000864 <CopyDataInit>
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000878:	e002      	b.n	8000880 <LoopFillZerobss>

0800087a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800087c:	f842 3b04 	str.w	r3, [r2], #4

08000880 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000882:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000884:	d3f9      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000886:	f7ff ffe5 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f006 ff8f 	bl	80077ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fc5d 	bl	800014c <main>
  bx lr
 8000892:	4770      	bx	lr
  ldr r3, =_sidata
 8000894:	0800eec4 	.word	0x0800eec4
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800089c:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80008a0:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80008a4:	20000614 	.word	0x20000614

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f945 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fe3c 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f95d 	bl	8000bb6 <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f000 f925 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000008 	.word	0x20000008
 8000930:	20000010 	.word	0x20000010
 8000934:	2000000c 	.word	0x2000000c

08000938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x1c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x20>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <HAL_IncTick+0x20>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000010 	.word	0x20000010
 8000958:	20000610 	.word	0x20000610

0800095c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <HAL_GetTick+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000610 	.word	0x20000610

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff fff0 	bl	800095c <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_Delay+0x40>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffe0 	bl	800095c <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000010 	.word	0x20000010

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4906      	ldr	r1, [pc, #24]	; (8000a4c <__NVIC_EnableIRQ+0x34>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff90 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff2d 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff42 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff90 	bl	8000aa4 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5f 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff35 	bl	8000a18 <__NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffa2 	bl	8000b08 <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e043      	b.n	8000c6e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <HAL_DMA_Init+0xa8>)
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <HAL_DMA_Init+0xac>)
 8000bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	009a      	lsls	r2, r3, #2
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a1f      	ldr	r2, [pc, #124]	; (8000c80 <HAL_DMA_Init+0xb0>)
 8000c02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2202      	movs	r2, #2
 8000c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	bffdfff8 	.word	0xbffdfff8
 8000c7c:	cccccccd 	.word	0xcccccccd
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d04f      	beq.n	8000d4c <HAL_DMA_IRQHandler+0xc8>
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d04a      	beq.n	8000d4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 0204 	bic.w	r2, r2, #4
 8000cd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a66      	ldr	r2, [pc, #408]	; (8000e74 <HAL_DMA_IRQHandler+0x1f0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d029      	beq.n	8000d32 <HAL_DMA_IRQHandler+0xae>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a65      	ldr	r2, [pc, #404]	; (8000e78 <HAL_DMA_IRQHandler+0x1f4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d022      	beq.n	8000d2e <HAL_DMA_IRQHandler+0xaa>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a63      	ldr	r2, [pc, #396]	; (8000e7c <HAL_DMA_IRQHandler+0x1f8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d01a      	beq.n	8000d28 <HAL_DMA_IRQHandler+0xa4>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a62      	ldr	r2, [pc, #392]	; (8000e80 <HAL_DMA_IRQHandler+0x1fc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d012      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x9e>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a60      	ldr	r2, [pc, #384]	; (8000e84 <HAL_DMA_IRQHandler+0x200>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00a      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x98>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a5f      	ldr	r2, [pc, #380]	; (8000e88 <HAL_DMA_IRQHandler+0x204>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d102      	bne.n	8000d16 <HAL_DMA_IRQHandler+0x92>
 8000d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d14:	e00e      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d1a:	e00b      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d20:	e008      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d26:	e005      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2c:	e002      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	e000      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d32:	2304      	movs	r3, #4
 8000d34:	4a55      	ldr	r2, [pc, #340]	; (8000e8c <HAL_DMA_IRQHandler+0x208>)
 8000d36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 8094 	beq.w	8000e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d4a:	e08e      	b.n	8000e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	2202      	movs	r2, #2
 8000d52:	409a      	lsls	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d056      	beq.n	8000e0a <HAL_DMA_IRQHandler+0x186>
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d051      	beq.n	8000e0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10b      	bne.n	8000d8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 020a 	bic.w	r2, r2, #10
 8000d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <HAL_DMA_IRQHandler+0x1f0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d029      	beq.n	8000dea <HAL_DMA_IRQHandler+0x166>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a37      	ldr	r2, [pc, #220]	; (8000e78 <HAL_DMA_IRQHandler+0x1f4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d022      	beq.n	8000de6 <HAL_DMA_IRQHandler+0x162>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a35      	ldr	r2, [pc, #212]	; (8000e7c <HAL_DMA_IRQHandler+0x1f8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01a      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x15c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a34      	ldr	r2, [pc, #208]	; (8000e80 <HAL_DMA_IRQHandler+0x1fc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d012      	beq.n	8000dda <HAL_DMA_IRQHandler+0x156>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a32      	ldr	r2, [pc, #200]	; (8000e84 <HAL_DMA_IRQHandler+0x200>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00a      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x150>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <HAL_DMA_IRQHandler+0x204>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d102      	bne.n	8000dce <HAL_DMA_IRQHandler+0x14a>
 8000dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dcc:	e00e      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dd2:	e00b      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd8:	e008      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dde:	e005      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de4:	e002      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000de6:	2320      	movs	r3, #32
 8000de8:	e000      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000dea:	2302      	movs	r3, #2
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <HAL_DMA_IRQHandler+0x208>)
 8000dee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d034      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e08:	e02f      	b.n	8000e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	2208      	movs	r2, #8
 8000e10:	409a      	lsls	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d028      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x1e8>
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d023      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 020e 	bic.w	r2, r2, #14
 8000e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	4798      	blx	r3
    }
  }
  return;
 8000e6a:	bf00      	nop
 8000e6c:	bf00      	nop
}
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40020008 	.word	0x40020008
 8000e78:	4002001c 	.word	0x4002001c
 8000e7c:	40020030 	.word	0x40020030
 8000e80:	40020044 	.word	0x40020044
 8000e84:	40020058 	.word	0x40020058
 8000e88:	4002006c 	.word	0x4002006c
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e127      	b.n	80010f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8116 	bne.w	80010ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d034      	beq.n	8000f34 <HAL_GPIO_Init+0xa4>
 8000eca:	2b12      	cmp	r3, #18
 8000ecc:	d80d      	bhi.n	8000eea <HAL_GPIO_Init+0x5a>
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d02b      	beq.n	8000f2a <HAL_GPIO_Init+0x9a>
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d804      	bhi.n	8000ee0 <HAL_GPIO_Init+0x50>
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d031      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d01c      	beq.n	8000f18 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ede:	e048      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d043      	beq.n	8000f6c <HAL_GPIO_Init+0xdc>
 8000ee4:	2b11      	cmp	r3, #17
 8000ee6:	d01b      	beq.n	8000f20 <HAL_GPIO_Init+0x90>
          break;
 8000ee8:	e043      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eea:	4a89      	ldr	r2, [pc, #548]	; (8001110 <HAL_GPIO_Init+0x280>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d026      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000ef0:	4a87      	ldr	r2, [pc, #540]	; (8001110 <HAL_GPIO_Init+0x280>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d806      	bhi.n	8000f04 <HAL_GPIO_Init+0x74>
 8000ef6:	4a87      	ldr	r2, [pc, #540]	; (8001114 <HAL_GPIO_Init+0x284>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d020      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000efc:	4a86      	ldr	r2, [pc, #536]	; (8001118 <HAL_GPIO_Init+0x288>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01d      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
          break;
 8000f02:	e036      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f04:	4a85      	ldr	r2, [pc, #532]	; (800111c <HAL_GPIO_Init+0x28c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000f0a:	4a85      	ldr	r2, [pc, #532]	; (8001120 <HAL_GPIO_Init+0x290>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d016      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000f10:	4a84      	ldr	r2, [pc, #528]	; (8001124 <HAL_GPIO_Init+0x294>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
          break;
 8000f16:	e02c      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	623b      	str	r3, [r7, #32]
          break;
 8000f1e:	e028      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	3304      	adds	r3, #4
 8000f26:	623b      	str	r3, [r7, #32]
          break;
 8000f28:	e023      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	3308      	adds	r3, #8
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e01e      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	330c      	adds	r3, #12
 8000f3a:	623b      	str	r3, [r7, #32]
          break;
 8000f3c:	e019      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f46:	2304      	movs	r3, #4
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e012      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d105      	bne.n	8000f60 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f54:	2308      	movs	r3, #8
 8000f56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	611a      	str	r2, [r3, #16]
          break;
 8000f5e:	e008      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f60:	2308      	movs	r3, #8
 8000f62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	615a      	str	r2, [r3, #20]
          break;
 8000f6a:	e002      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
          break;
 8000f70:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2bff      	cmp	r3, #255	; 0xff
 8000f76:	d801      	bhi.n	8000f7c <HAL_GPIO_Init+0xec>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e001      	b.n	8000f80 <HAL_GPIO_Init+0xf0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3304      	adds	r3, #4
 8000f80:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2bff      	cmp	r3, #255	; 0xff
 8000f86:	d802      	bhi.n	8000f8e <HAL_GPIO_Init+0xfe>
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x104>
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	3b08      	subs	r3, #8
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	6a39      	ldr	r1, [r7, #32]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 8096 	beq.w	80010ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4b59      	ldr	r3, [pc, #356]	; (8001128 <HAL_GPIO_Init+0x298>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a58      	ldr	r2, [pc, #352]	; (8001128 <HAL_GPIO_Init+0x298>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b56      	ldr	r3, [pc, #344]	; (8001128 <HAL_GPIO_Init+0x298>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fda:	4a54      	ldr	r2, [pc, #336]	; (800112c <HAL_GPIO_Init+0x29c>)
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4b      	ldr	r2, [pc, #300]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x19e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4a      	ldr	r2, [pc, #296]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x19a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a49      	ldr	r2, [pc, #292]	; (8001138 <HAL_GPIO_Init+0x2a8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x196>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a48      	ldr	r2, [pc, #288]	; (800113c <HAL_GPIO_Init+0x2ac>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x192>
 800101e:	2303      	movs	r3, #3
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x1a0>
 8001022:	2304      	movs	r3, #4
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x1a0>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x1a0>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x1a0>
 800102e:	2300      	movs	r3, #0
 8001030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001040:	493a      	ldr	r1, [pc, #232]	; (800112c <HAL_GPIO_Init+0x29c>)
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4938      	ldr	r1, [pc, #224]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
 8001066:	e006      	b.n	8001076 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001068:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	43db      	mvns	r3, r3
 8001070:	4933      	ldr	r1, [pc, #204]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001072:	4013      	ands	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	492e      	ldr	r1, [pc, #184]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
 800108e:	e006      	b.n	800109e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	43db      	mvns	r3, r3
 8001098:	4929      	ldr	r1, [pc, #164]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 800109a:	4013      	ands	r3, r2
 800109c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	4924      	ldr	r1, [pc, #144]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
 80010b6:	e006      	b.n	80010c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	43db      	mvns	r3, r3
 80010c0:	491f      	ldr	r1, [pc, #124]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	491a      	ldr	r1, [pc, #104]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60cb      	str	r3, [r1, #12]
 80010de:	e006      	b.n	80010ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4915      	ldr	r1, [pc, #84]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	3301      	adds	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f aed0 	bne.w	8000ea4 <HAL_GPIO_Init+0x14>
  }
}
 8001104:	bf00      	nop
 8001106:	372c      	adds	r7, #44	; 0x2c
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	10210000 	.word	0x10210000
 8001114:	10110000 	.word	0x10110000
 8001118:	10120000 	.word	0x10120000
 800111c:	10310000 	.word	0x10310000
 8001120:	10320000 	.word	0x10320000
 8001124:	10220000 	.word	0x10220000
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	40010800 	.word	0x40010800
 8001134:	40010c00 	.word	0x40010c00
 8001138:	40011000 	.word	0x40011000
 800113c:	40011400 	.word	0x40011400
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	611a      	str	r2, [r3, #16]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e26c      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8087 	beq.w	80012a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001194:	4b92      	ldr	r3, [pc, #584]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b04      	cmp	r3, #4
 800119e:	d00c      	beq.n	80011ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a0:	4b8f      	ldr	r3, [pc, #572]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d112      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
 80011ac:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ba:	4b89      	ldr	r3, [pc, #548]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d06c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x12c>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d168      	bne.n	80012a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e246      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x76>
 80011dc:	4b80      	ldr	r3, [pc, #512]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a7f      	ldr	r2, [pc, #508]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e02e      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a7a      	ldr	r2, [pc, #488]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b78      	ldr	r3, [pc, #480]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a77      	ldr	r2, [pc, #476]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0xbc>
 8001216:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a71      	ldr	r2, [pc, #452]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b6f      	ldr	r3, [pc, #444]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a6e      	ldr	r2, [pc, #440]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 8001230:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a6a      	ldr	r2, [pc, #424]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001246:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fb84 	bl	800095c <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fb80 	bl	800095c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1fa      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xe4>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fb70 	bl	800095c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fb6c 	bl	800095c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1e6      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x10c>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d063      	beq.n	8001376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ae:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
 80012c6:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1ba      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4939      	ldr	r1, [pc, #228]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e03a      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fb25 	bl	800095c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fb21 	bl	800095c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e19b      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4927      	ldr	r1, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb04 	bl	800095c <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fb00 	bl	800095c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e17a      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d03a      	beq.n	80013f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_RCC_OscConfig+0x274>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fae4 	bl	800095c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fae0 	bl	800095c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e15a      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 fada 	bl	8001970 <RCC_Delay>
 80013bc:	e01c      	b.n	80013f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_RCC_OscConfig+0x274>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff faca 	bl	800095c <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ca:	e00f      	b.n	80013ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fac6 	bl	800095c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d908      	bls.n	80013ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e140      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	42420000 	.word	0x42420000
 80013e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	4b9e      	ldr	r3, [pc, #632]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e9      	bne.n	80013cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a6 	beq.w	8001552 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140a:	4b97      	ldr	r3, [pc, #604]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b94      	ldr	r3, [pc, #592]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a93      	ldr	r2, [pc, #588]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b91      	ldr	r3, [pc, #580]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	4b8e      	ldr	r3, [pc, #568]	; (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d118      	bne.n	8001470 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143e:	4b8b      	ldr	r3, [pc, #556]	; (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a8a      	ldr	r2, [pc, #552]	; (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144a:	f7ff fa87 	bl	800095c <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001452:	f7ff fa83 	bl	800095c <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b64      	cmp	r3, #100	; 0x64
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0fd      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_OscConfig+0x4f8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x312>
 8001478:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a7a      	ldr	r2, [pc, #488]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	e02d      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x334>
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a75      	ldr	r2, [pc, #468]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	4b73      	ldr	r3, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a72      	ldr	r2, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	e01c      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x356>
 80014b0:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4a6c      	ldr	r2, [pc, #432]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6213      	str	r3, [r2, #32]
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	e00b      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b64      	ldr	r3, [pc, #400]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a63      	ldr	r2, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d015      	beq.n	8001516 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fa37 	bl	800095c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fa33 	bl	800095c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e0ab      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ee      	beq.n	80014f2 <HAL_RCC_OscConfig+0x37e>
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fa21 	bl	800095c <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fa1d 	bl	800095c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	; 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e095      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ee      	bne.n	800151e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d105      	bne.n	8001552 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001546:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a47      	ldr	r2, [pc, #284]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8081 	beq.w	800165e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800155c:	4b42      	ldr	r3, [pc, #264]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d061      	beq.n	800162c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d146      	bne.n	80015fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_RCC_OscConfig+0x4fc>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff f9f1 	bl	800095c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff f9ed 	bl	800095c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e067      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d108      	bne.n	80015b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	492d      	ldr	r1, [pc, #180]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a19      	ldr	r1, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	430b      	orrs	r3, r1
 80015ca:	4927      	ldr	r1, [pc, #156]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x4fc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff f9c1 	bl	800095c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff f9bd 	bl	800095c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e037      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x46a>
 80015fc:	e02f      	b.n	800165e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_RCC_OscConfig+0x4fc>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff f9aa 	bl	800095c <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff f9a6 	bl	800095c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e020      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x498>
 800162a:	e018      	b.n	800165e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e013      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	429a      	cmp	r2, r3
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
 8001670:	42420060 	.word	0x42420060

08001674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0d0      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d910      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 0207 	bic.w	r2, r3, #7
 800169e:	4965      	ldr	r1, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d040      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d115      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e073      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06b      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4936      	ldr	r1, [pc, #216]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff f8fa 	bl	800095c <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff f8f6 	bl	800095c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e053      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d210      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0207 	bic.w	r2, r3, #7
 80017aa:	4922      	ldr	r1, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4601      	mov	r1, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	fa21 f303 	lsr.w	r3, r1, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1cc>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1d0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f858 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000
 8001838:	40021000 	.word	0x40021000
 800183c:	0800786c 	.word	0x0800786c
 8001840:	20000008 	.word	0x20000008
 8001844:	2000000c 	.word	0x2000000c

08001848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	b490      	push	{r4, r7}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001850:	1d3c      	adds	r4, r7, #4
 8001852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b04      	cmp	r3, #4
 8001880:	d002      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x40>
 8001882:	2b08      	cmp	r3, #8
 8001884:	d003      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x46>
 8001886:	e02d      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_RCC_GetSysClockFreq+0xbc>)
 800188a:	623b      	str	r3, [r7, #32]
      break;
 800188c:	e02d      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800189a:	4413      	add	r3, r2
 800189c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d013      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	0c5b      	lsrs	r3, r3, #17
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ba:	4413      	add	r3, r2
 80018bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018c6:	fb02 f203 	mul.w	r2, r2, r3
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	e004      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	623b      	str	r3, [r7, #32]
      break;
 80018e2:	e002      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018e6:	623b      	str	r3, [r7, #32]
      break;
 80018e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ea:	6a3b      	ldr	r3, [r7, #32]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc90      	pop	{r4, r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	0800782c 	.word	0x0800782c
 80018fc:	0800783c 	.word	0x0800783c
 8001900:	40021000 	.word	0x40021000
 8001904:	007a1200 	.word	0x007a1200
 8001908:	003d0900 	.word	0x003d0900

0800190c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_RCC_GetHCLKFreq+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000008 	.word	0x20000008

08001920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001924:	f7ff fff2 	bl	800190c <HAL_RCC_GetHCLKFreq>
 8001928:	4601      	mov	r1, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	4a03      	ldr	r2, [pc, #12]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000
 8001944:	0800787c 	.word	0x0800787c

08001948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800194c:	f7ff ffde 	bl	800190c <HAL_RCC_GetHCLKFreq>
 8001950:	4601      	mov	r1, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	0adb      	lsrs	r3, r3, #11
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_RCC_GetPCLK2Freq+0x24>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	0800787c 	.word	0x0800787c

08001970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <RCC_Delay+0x34>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <RCC_Delay+0x38>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0a5b      	lsrs	r3, r3, #9
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800198c:	bf00      	nop
  }
  while (Delay --);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1e5a      	subs	r2, r3, #1
 8001992:	60fa      	str	r2, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f9      	bne.n	800198c <RCC_Delay+0x1c>
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008
 80019a8:	10624dd3 	.word	0x10624dd3

080019ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e076      	b.n	8001aac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019ce:	d009      	beq.n	80019e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
 80019d6:	e005      	b.n	80019e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe fdd2 	bl	80005a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	ea42 0103 	orr.w	r1, r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	0c1a      	lsrs	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f002 0204 	and.w	r2, r2, #4
 8001a8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_SPI_Transmit+0x22>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e126      	b.n	8001d24 <HAL_SPI_Transmit+0x270>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ade:	f7fe ff3d 	bl	800095c <HAL_GetTick>
 8001ae2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d002      	beq.n	8001afa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
 8001af6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001af8:	e10b      	b.n	8001d12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_SPI_Transmit+0x52>
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b0a:	e102      	b.n	8001d12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2203      	movs	r2, #3
 8001b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	88fa      	ldrh	r2, [r7, #6]
 8001b24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b52:	d10f      	bne.n	8001b74 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b40      	cmp	r3, #64	; 0x40
 8001b80:	d007      	beq.n	8001b92 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b9a:	d14b      	bne.n	8001c34 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_SPI_Transmit+0xf6>
 8001ba4:	8afb      	ldrh	r3, [r7, #22]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d13e      	bne.n	8001c28 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	1c9a      	adds	r2, r3, #2
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bce:	e02b      	b.n	8001c28 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d112      	bne.n	8001c04 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	881a      	ldrh	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	1c9a      	adds	r2, r3, #2
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c02:	e011      	b.n	8001c28 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c04:	f7fe feaa 	bl	800095c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d803      	bhi.n	8001c1c <HAL_SPI_Transmit+0x168>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1a:	d102      	bne.n	8001c22 <HAL_SPI_Transmit+0x16e>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c26:	e074      	b.n	8001d12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ce      	bne.n	8001bd0 <HAL_SPI_Transmit+0x11c>
 8001c32:	e04c      	b.n	8001cce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_SPI_Transmit+0x18e>
 8001c3c:	8afb      	ldrh	r3, [r7, #22]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d140      	bne.n	8001cc4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c68:	e02c      	b.n	8001cc4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d113      	bne.n	8001ca0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	330c      	adds	r3, #12
 8001c82:	7812      	ldrb	r2, [r2, #0]
 8001c84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c9e:	e011      	b.n	8001cc4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ca0:	f7fe fe5c 	bl	800095c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d803      	bhi.n	8001cb8 <HAL_SPI_Transmit+0x204>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb6:	d102      	bne.n	8001cbe <HAL_SPI_Transmit+0x20a>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cc2:	e026      	b.n	8001d12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1cd      	bne.n	8001c6a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fa54 	bl	8002180 <SPI_EndRxTxTransaction>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	77fb      	strb	r3, [r7, #31]
 8001d0e:	e000      	b.n	8001d12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001d10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d22:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_SPI_TransmitReceive+0x26>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e18a      	b.n	8002068 <HAL_SPI_TransmitReceive+0x33c>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d5a:	f7fe fdff 	bl	800095c <HAL_GetTick>
 8001d5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d00f      	beq.n	8001d9c <HAL_SPI_TransmitReceive+0x70>
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d82:	d107      	bne.n	8001d94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <HAL_SPI_TransmitReceive+0x68>
 8001d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d003      	beq.n	8001d9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
 8001d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d9a:	e15b      	b.n	8002054 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_SPI_TransmitReceive+0x82>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_SPI_TransmitReceive+0x82>
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001db4:	e14e      	b.n	8002054 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d003      	beq.n	8001dca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	887a      	ldrh	r2, [r7, #2]
 8001df2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	2b40      	cmp	r3, #64	; 0x40
 8001e0c:	d007      	beq.n	8001e1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e26:	d178      	bne.n	8001f1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_SPI_TransmitReceive+0x10a>
 8001e30:	8b7b      	ldrh	r3, [r7, #26]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d166      	bne.n	8001f04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	881a      	ldrh	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	1c9a      	adds	r2, r3, #2
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e5a:	e053      	b.n	8001f04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d11b      	bne.n	8001ea2 <HAL_SPI_TransmitReceive+0x176>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d016      	beq.n	8001ea2 <HAL_SPI_TransmitReceive+0x176>
 8001e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d113      	bne.n	8001ea2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	1c9a      	adds	r2, r3, #2
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d119      	bne.n	8001ee4 <HAL_SPI_TransmitReceive+0x1b8>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d014      	beq.n	8001ee4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	1c9a      	adds	r2, r3, #2
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ee4:	f7fe fd3a 	bl	800095c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d807      	bhi.n	8001f04 <HAL_SPI_TransmitReceive+0x1d8>
 8001ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efa:	d003      	beq.n	8001f04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f02:	e0a7      	b.n	8002054 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1a6      	bne.n	8001e5c <HAL_SPI_TransmitReceive+0x130>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1a1      	bne.n	8001e5c <HAL_SPI_TransmitReceive+0x130>
 8001f18:	e07c      	b.n	8002014 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_SPI_TransmitReceive+0x1fc>
 8001f22:	8b7b      	ldrh	r3, [r7, #26]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d16b      	bne.n	8002000 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	330c      	adds	r3, #12
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f4e:	e057      	b.n	8002000 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d11c      	bne.n	8001f98 <HAL_SPI_TransmitReceive+0x26c>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d017      	beq.n	8001f98 <HAL_SPI_TransmitReceive+0x26c>
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d114      	bne.n	8001f98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	330c      	adds	r3, #12
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d119      	bne.n	8001fda <HAL_SPI_TransmitReceive+0x2ae>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d014      	beq.n	8001fda <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001fda:	f7fe fcbf 	bl	800095c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d803      	bhi.n	8001ff2 <HAL_SPI_TransmitReceive+0x2c6>
 8001fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d102      	bne.n	8001ff8 <HAL_SPI_TransmitReceive+0x2cc>
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d103      	bne.n	8002000 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ffe:	e029      	b.n	8002054 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1a2      	bne.n	8001f50 <HAL_SPI_TransmitReceive+0x224>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d19d      	bne.n	8001f50 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002016:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f8b1 	bl	8002180 <SPI_EndRxTxTransaction>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002030:	e010      	b.n	8002054 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10b      	bne.n	8002052 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	e000      	b.n	8002054 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002052:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002064:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002068:	4618      	mov	r0, r3
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002080:	f7fe fc6c 	bl	800095c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002090:	f7fe fc64 	bl	800095c <HAL_GetTick>
 8002094:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002096:	4b39      	ldr	r3, [pc, #228]	; (800217c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	015b      	lsls	r3, r3, #5
 800209c:	0d1b      	lsrs	r3, r3, #20
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020a6:	e054      	b.n	8002152 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ae:	d050      	beq.n	8002152 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020b0:	f7fe fc54 	bl	800095c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d902      	bls.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d13d      	bne.n	8002142 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020de:	d111      	bne.n	8002104 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e8:	d004      	beq.n	80020f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f2:	d107      	bne.n	8002104 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210c:	d10f      	bne.n	800212e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800212c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e017      	b.n	8002172 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3b01      	subs	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4013      	ands	r3, r2
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	429a      	cmp	r2, r3
 800216e:	d19b      	bne.n	80020a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000008 	.word	0x20000008

08002180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff ff6a 	bl	8002070 <SPI_WaitFlagStateUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	f043 0220 	orr.w	r2, r3, #32
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e000      	b.n	80021b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e041      	b.n	8002252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fa2a 	bl	800063c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 fa64 	bl	80026c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e03a      	b.n	80022ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_TIM_Base_Start_IT+0x98>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x58>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d009      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x58>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x58>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <HAL_TIM_Base_Start_IT+0xa0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d010      	beq.n	80022e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d6:	e007      	b.n	80022e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800

08002300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d122      	bne.n	800235c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b02      	cmp	r3, #2
 8002322:	d11b      	bne.n	800235c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0202 	mvn.w	r2, #2
 800232c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f9a4 	bl	8002690 <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f997 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f9a6 	bl	80026a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b04      	cmp	r3, #4
 8002368:	d122      	bne.n	80023b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b04      	cmp	r3, #4
 8002376:	d11b      	bne.n	80023b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0204 	mvn.w	r2, #4
 8002380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f97a 	bl	8002690 <HAL_TIM_IC_CaptureCallback>
 800239c:	e005      	b.n	80023aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f96d 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f97c 	bl	80026a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d122      	bne.n	8002404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d11b      	bne.n	8002404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0208 	mvn.w	r2, #8
 80023d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2204      	movs	r2, #4
 80023da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f950 	bl	8002690 <HAL_TIM_IC_CaptureCallback>
 80023f0:	e005      	b.n	80023fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f943 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f952 	bl	80026a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b10      	cmp	r3, #16
 8002410:	d122      	bne.n	8002458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b10      	cmp	r3, #16
 800241e:	d11b      	bne.n	8002458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0210 	mvn.w	r2, #16
 8002428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2208      	movs	r2, #8
 800242e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f926 	bl	8002690 <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f919 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f928 	bl	80026a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10e      	bne.n	8002484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0201 	mvn.w	r2, #1
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe f836 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	2b80      	cmp	r3, #128	; 0x80
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	2b80      	cmp	r3, #128	; 0x80
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fa6b 	bl	8002986 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d10e      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d107      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8ec 	bl	80026b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d10e      	bne.n	8002508 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d107      	bne.n	8002508 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0220 	mvn.w	r2, #32
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa36 	bl	8002974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIM_ConfigClockSource+0x18>
 8002524:	2302      	movs	r3, #2
 8002526:	e0a6      	b.n	8002676 <HAL_TIM_ConfigClockSource+0x166>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800254e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d067      	beq.n	8002630 <HAL_TIM_ConfigClockSource+0x120>
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d80b      	bhi.n	800257c <HAL_TIM_ConfigClockSource+0x6c>
 8002564:	2b10      	cmp	r3, #16
 8002566:	d073      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0x140>
 8002568:	2b10      	cmp	r3, #16
 800256a:	d802      	bhi.n	8002572 <HAL_TIM_ConfigClockSource+0x62>
 800256c:	2b00      	cmp	r3, #0
 800256e:	d06f      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002570:	e078      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002572:	2b20      	cmp	r3, #32
 8002574:	d06c      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0x140>
 8002576:	2b30      	cmp	r3, #48	; 0x30
 8002578:	d06a      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800257a:	e073      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800257c:	2b70      	cmp	r3, #112	; 0x70
 800257e:	d00d      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x8c>
 8002580:	2b70      	cmp	r3, #112	; 0x70
 8002582:	d804      	bhi.n	800258e <HAL_TIM_ConfigClockSource+0x7e>
 8002584:	2b50      	cmp	r3, #80	; 0x50
 8002586:	d033      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0xe0>
 8002588:	2b60      	cmp	r3, #96	; 0x60
 800258a:	d041      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800258c:	e06a      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800258e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002592:	d066      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0x152>
 8002594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002598:	d017      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800259a:	e063      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f000 f965 	bl	800287a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]
      break;
 80025c8:	e04c      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6899      	ldr	r1, [r3, #8]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f000 f94e 	bl	800287a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ec:	609a      	str	r2, [r3, #8]
      break;
 80025ee:	e039      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	461a      	mov	r2, r3
 80025fe:	f000 f8c5 	bl	800278c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2150      	movs	r1, #80	; 0x50
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f91c 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 800260e:	e029      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	461a      	mov	r2, r3
 800261e:	f000 f8e3 	bl	80027e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2160      	movs	r1, #96	; 0x60
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f90c 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 800262e:	e019      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	461a      	mov	r2, r3
 800263e:	f000 f8a5 	bl	800278c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2140      	movs	r1, #64	; 0x40
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f8fc 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 800264e:	e009      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f000 f8f3 	bl	8002846 <TIM_ITRx_SetConfig>
        break;
 8002660:	e000      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
	...

080026c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a29      	ldr	r2, [pc, #164]	; (8002780 <TIM_Base_SetConfig+0xb8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00b      	beq.n	80026f8 <TIM_Base_SetConfig+0x30>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0x30>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a26      	ldr	r2, [pc, #152]	; (8002784 <TIM_Base_SetConfig+0xbc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0x30>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a25      	ldr	r2, [pc, #148]	; (8002788 <TIM_Base_SetConfig+0xc0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d108      	bne.n	800270a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <TIM_Base_SetConfig+0xb8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00b      	beq.n	800272a <TIM_Base_SetConfig+0x62>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d007      	beq.n	800272a <TIM_Base_SetConfig+0x62>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <TIM_Base_SetConfig+0xbc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d003      	beq.n	800272a <TIM_Base_SetConfig+0x62>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a18      	ldr	r2, [pc, #96]	; (8002788 <TIM_Base_SetConfig+0xc0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d108      	bne.n	800273c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a07      	ldr	r2, [pc, #28]	; (8002780 <TIM_Base_SetConfig+0xb8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d103      	bne.n	8002770 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	615a      	str	r2, [r3, #20]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40000400 	.word	0x40000400
 8002788:	40000800 	.word	0x40000800

0800278c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f023 0201 	bic.w	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f023 030a 	bic.w	r3, r3, #10
 80027c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	621a      	str	r2, [r3, #32]
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f023 0210 	bic.w	r2, r3, #16
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002812:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	031b      	lsls	r3, r3, #12
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002824:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	621a      	str	r2, [r3, #32]
}
 800283c:	bf00      	nop
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	f043 0307 	orr.w	r3, r3, #7
 8002868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002894:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	021a      	lsls	r2, r3, #8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	431a      	orrs	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	609a      	str	r2, [r3, #8]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e046      	b.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a16      	ldr	r2, [pc, #88]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00e      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d009      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10c      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4313      	orrs	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800

08002974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e03f      	b.n	8002a2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fd fe60 	bl	8000684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f829 	bl	8002a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a6e:	f023 030c 	bic.w	r3, r3, #12
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2c      	ldr	r2, [pc, #176]	; (8002b48 <UART_SetConfig+0x114>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a9c:	f7fe ff54 	bl	8001948 <HAL_RCC_GetPCLK2Freq>
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	e002      	b.n	8002aaa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002aa4:	f7fe ff3c 	bl	8001920 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <UART_SetConfig+0x118>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	0119      	lsls	r1, r3, #4
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009a      	lsls	r2, r3, #2
 8002ad4:	441a      	add	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <UART_SetConfig+0x118>)
 8002ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	2064      	movs	r0, #100	; 0x64
 8002aea:	fb00 f303 	mul.w	r3, r0, r3
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	3332      	adds	r3, #50	; 0x32
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <UART_SetConfig+0x118>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b00:	4419      	add	r1, r3
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	009a      	lsls	r2, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <UART_SetConfig+0x118>)
 8002b1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2064      	movs	r0, #100	; 0x64
 8002b22:	fb00 f303 	mul.w	r3, r0, r3
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	3332      	adds	r3, #50	; 0x32
 8002b2c:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <UART_SetConfig+0x118>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	51eb851f 	.word	0x51eb851f

08002b50 <CS_HIGH>:
 */

#include "user_diskio.h"


void CS_HIGH(){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002b54:	2201      	movs	r2, #1
 8002b56:	2110      	movs	r1, #16
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <CS_HIGH+0x14>)
 8002b5a:	f7fe faf3 	bl	8001144 <HAL_GPIO_WritePin>
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40010800 	.word	0x40010800

08002b68 <CS_LOW>:

void CS_LOW(){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2110      	movs	r1, #16
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <CS_LOW+0x14>)
 8002b72:	f7fe fae7 	bl	8001144 <HAL_GPIO_WritePin>
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40010800 	.word	0x40010800

08002b80 <SPIxENABLE>:

void SPIxENABLE(){
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <FCLK_FAST>:

void FCLK_FAST(){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0

	//HAL_SPI_DeInit( Get_SPI_HandleTypeDef() );

	Get_SPI_HandleTypeDef()->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b90:	f7fd fcc8 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002b94:	4602      	mov	r2, r0
 8002b96:	2310      	movs	r3, #16
 8002b98:	61d3      	str	r3, [r2, #28]

	if (HAL_SPI_Init( Get_SPI_HandleTypeDef() ) != HAL_OK)
 8002b9a:	f7fd fcc3 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe ff03 	bl	80019ac <HAL_SPI_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <FCLK_FAST+0x24>
	{
		Error_Handler();
 8002bac:	f7fd fcc4 	bl	8000538 <Error_Handler>
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <FCLK_SLOW>:

void FCLK_SLOW(){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	//HAL_SPI_DeInit( Get_SPI_HandleTypeDef() );

	Get_SPI_HandleTypeDef()->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002bb8:	f7fd fcb4 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	2330      	movs	r3, #48	; 0x30
 8002bc0:	61d3      	str	r3, [r2, #28]

	if (HAL_SPI_Init( Get_SPI_HandleTypeDef() ) != HAL_OK)
 8002bc2:	f7fd fcaf 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe feef 	bl	80019ac <HAL_SPI_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <FCLK_SLOW+0x24>
	{
		Error_Handler();
 8002bd4:	f7fd fcb0 	bl	8000538 <Error_Handler>
	}

}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <init_spi>:
/*-----------------------------------------------------------------------*/

/* Initialize MMC interface */
static
void init_spi (void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	SPIxENABLE();		/* Enable SPI function */
 8002be0:	f7ff ffce 	bl	8002b80 <SPIxENABLE>
	CS_HIGH();			/* Set CS# high */
 8002be4:	f7ff ffb4 	bl	8002b50 <CS_HIGH>

	for (Timer1 = 10; Timer1; ) ;	/* 10ms */
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <init_spi+0x20>)
 8002bea:	220a      	movs	r2, #10
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	bf00      	nop
 8002bf0:	4b02      	ldr	r3, [pc, #8]	; (8002bfc <init_spi+0x20>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1fb      	bne.n	8002bf0 <init_spi+0x14>
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000034 	.word	0x20000034

08002c00 <xchg_spi>:
/* Exchange a byte */

BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
//	SPIx_DR = dat;				/* Start an SPI transaction */
//	while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the transaction */
//	return (BYTE)SPIx_DR;		/* Return received byte */
	BYTE received_byte=0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(Get_SPI_HandleTypeDef(), &dat, &received_byte, sizeof(dat), HAL_MAX_DELAY);
 8002c0e:	f7fd fc89 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002c12:	f107 020f 	add.w	r2, r7, #15
 8002c16:	1df9      	adds	r1, r7, #7
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f7ff f884 	bl	8001d2c <HAL_SPI_TransmitReceive>
	return received_byte;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002c2e:	b590      	push	{r4, r7, lr}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
//
//	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
//	SPIx_CR1 |= _BV(6);


	Get_SPI_HandleTypeDef()->Init.DataSize = SPI_DATASIZE_16BIT;
 8002c38:	f7fd fc74 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c42:	60d3      	str	r3, [r2, #12]
	HAL_SPI_Init( Get_SPI_HandleTypeDef() );
 8002c44:	f7fd fc6e 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe feae 	bl	80019ac <HAL_SPI_Init>

	//HAL_SPI_TransmitReceive(Get_SPI_HandleTypeDef(), buff, buff, btr*sizeof(BYTE), HAL_MAX_DELAY);

	uint8_t txallowed = 1U;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]

	Get_SPI_HandleTypeDef()->pTxBuffPtr = buff;
 8002c54:	f7fd fc66 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30

	Get_SPI_HandleTypeDef()->TxXferCount = btr/2;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	085c      	lsrs	r4, r3, #1
 8002c62:	f7fd fc5f 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002c66:	4603      	mov	r3, r0
 8002c68:	b2a2      	uxth	r2, r4
 8002c6a:	86da      	strh	r2, [r3, #54]	; 0x36
	Get_SPI_HandleTypeDef()->RxXferCount = Get_SPI_HandleTypeDef()->TxXferCount;
 8002c6c:	f7fd fc5a 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002c70:	4604      	mov	r4, r0
 8002c72:	f7fd fc57 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002c76:	4603      	mov	r3, r0
 8002c78:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002c7a:	b292      	uxth	r2, r2
 8002c7c:	87da      	strh	r2, [r3, #62]	; 0x3e

	    while ((Get_SPI_HandleTypeDef()->TxXferCount > 0U) || (Get_SPI_HandleTypeDef()->RxXferCount > 0U))
 8002c7e:	e054      	b.n	8002d2a <rcvr_spi_multi+0xfc>
	    {
	      /* Check TXE flag */
	      if ((__HAL_SPI_GET_FLAG(Get_SPI_HandleTypeDef(), SPI_FLAG_TXE)) && (Get_SPI_HandleTypeDef()->TxXferCount > 0U) && (txallowed == 1U))
 8002c80:	f7fd fc50 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002c84:	4603      	mov	r3, r0
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d120      	bne.n	8002cd4 <rcvr_spi_multi+0xa6>
 8002c92:	f7fd fc47 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002c96:	4603      	mov	r3, r0
 8002c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <rcvr_spi_multi+0xa6>
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d116      	bne.n	8002cd4 <rcvr_spi_multi+0xa6>
	      {
	    	  Get_SPI_HandleTypeDef()->Instance->DR = 0xFFFF;
 8002ca6:	f7fd fc3d 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002caa:	4603      	mov	r3, r0
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb2:	60da      	str	r2, [r3, #12]
	    	  Get_SPI_HandleTypeDef()->pTxBuffPtr += sizeof(uint16_t);
 8002cb4:	f7fd fc36 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbc:	3202      	adds	r2, #2
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
	    	  Get_SPI_HandleTypeDef()->TxXferCount--;
 8002cc0:	f7fd fc30 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	3a01      	subs	r2, #1
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	86da      	strh	r2, [r3, #54]	; 0x36
	        /* Next Data is a reception (Rx). Tx not allowed */
	        txallowed = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]

	      }

	      /* Check RXNE flag */
	      if ((__HAL_SPI_GET_FLAG(Get_SPI_HandleTypeDef(), SPI_FLAG_RXNE)) && (Get_SPI_HandleTypeDef()->RxXferCount > 0U))
 8002cd4:	f7fd fc26 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d121      	bne.n	8002d2a <rcvr_spi_multi+0xfc>
 8002ce6:	f7fd fc1d 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002cea:	4603      	mov	r3, r0
 8002cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01a      	beq.n	8002d2a <rcvr_spi_multi+0xfc>
	      {
	        *((uint16_t *)Get_SPI_HandleTypeDef()->pRxBuffPtr) = (uint16_t)Get_SPI_HandleTypeDef()->Instance->DR;
 8002cf4:	f7fd fc16 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68dc      	ldr	r4, [r3, #12]
 8002cfe:	f7fd fc11 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002d02:	4603      	mov	r3, r0
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	b2a2      	uxth	r2, r4
 8002d08:	801a      	strh	r2, [r3, #0]
	        Get_SPI_HandleTypeDef()->pRxBuffPtr += sizeof(uint16_t);
 8002d0a:	f7fd fc0b 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d12:	3202      	adds	r2, #2
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
	        Get_SPI_HandleTypeDef()->RxXferCount--;
 8002d16:	f7fd fc05 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002d1e:	b292      	uxth	r2, r2
 8002d20:	3a01      	subs	r2, #1
 8002d22:	b292      	uxth	r2, r2
 8002d24:	87da      	strh	r2, [r3, #62]	; 0x3e
	        /* Next Data is a Transmission (Tx). Tx is allowed */
	        txallowed = 1U;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
	    while ((Get_SPI_HandleTypeDef()->TxXferCount > 0U) || (Get_SPI_HandleTypeDef()->RxXferCount > 0U))
 8002d2a:	f7fd fbfb 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1a3      	bne.n	8002c80 <rcvr_spi_multi+0x52>
 8002d38:	f7fd fbf4 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d19c      	bne.n	8002c80 <rcvr_spi_multi+0x52>
	      }
	    }


	      Get_SPI_HandleTypeDef()->Init.DataSize = SPI_DATASIZE_8BIT;
 8002d46:	f7fd fbed 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60d3      	str	r3, [r2, #12]
	      HAL_SPI_Init( Get_SPI_HandleTypeDef() );
 8002d50:	f7fd fbe8 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fe28 	bl	80019ac <HAL_SPI_Init>

}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd90      	pop	{r4, r7, pc}

08002d64 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
//	while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the SPI transaction */
//	SPIx_DR;							/* Discard received word */
//
//	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
//	SPIx_CR1 |= _BV(6);
	HAL_SPI_Transmit(Get_SPI_HandleTypeDef(), (uint8_t*)buff, btx*sizeof(BYTE), HAL_MAX_DELAY);
 8002d6e:	f7fd fbd9 	bl	8000524 <Get_SPI_HandleTypeDef>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	f7fe fe9a 	bl	8001ab4 <HAL_SPI_Transmit>
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	BYTE d;


	Timer2 = wt;
 8002d90:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <wait_ready+0x3c>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
	do {
		d = xchg_spi(0xFF);
 8002d96:	20ff      	movs	r0, #255	; 0xff
 8002d98:	f7ff ff32 	bl	8002c00 <xchg_spi>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && Timer2);	/* Wait for card goes ready or timeout */
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2bff      	cmp	r3, #255	; 0xff
 8002da4:	d003      	beq.n	8002dae <wait_ready+0x26>
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <wait_ready+0x3c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f3      	bne.n	8002d96 <wait_ready+0xe>

	return (d == 0xFF) ? 1 : 0;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2bff      	cmp	r3, #255	; 0xff
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000038 	.word	0x20000038

08002dc8 <deselect>:
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002dcc:	f7ff fec0 	bl	8002b50 <CS_HIGH>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002dd0:	20ff      	movs	r0, #255	; 0xff
 8002dd2:	f7ff ff15 	bl	8002c00 <xchg_spi>

}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <Select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int Select (void)	/* 1:OK, 0:Timeout */
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002dde:	f7ff fec3 	bl	8002b68 <CS_LOW>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002de2:	20ff      	movs	r0, #255	; 0xff
 8002de4:	f7ff ff0c 	bl	8002c00 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002de8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dec:	f7ff ffcc 	bl	8002d88 <wait_ready>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <Select+0x20>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e002      	b.n	8002e00 <Select+0x26>

	deselect();
 8002dfa:	f7ff ffe5 	bl	8002dc8 <deselect>
	return 0;	/* Timeout */
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
	BYTE token;


	Timer1 = 200;
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <rcvr_datablock+0x50>)
 8002e10:	22c8      	movs	r2, #200	; 0xc8
 8002e12:	601a      	str	r2, [r3, #0]
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002e14:	20ff      	movs	r0, #255	; 0xff
 8002e16:	f7ff fef3 	bl	8002c00 <xchg_spi>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1);
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2bff      	cmp	r3, #255	; 0xff
 8002e22:	d103      	bne.n	8002e2c <rcvr_datablock+0x28>
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <rcvr_datablock+0x50>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f3      	bne.n	8002e14 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2bfe      	cmp	r3, #254	; 0xfe
 8002e30:	d001      	beq.n	8002e36 <rcvr_datablock+0x32>
 8002e32:	2300      	movs	r3, #0
 8002e34:	e00a      	b.n	8002e4c <rcvr_datablock+0x48>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002e36:	6839      	ldr	r1, [r7, #0]
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fef8 	bl	8002c2e <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002e3e:	20ff      	movs	r0, #255	; 0xff
 8002e40:	f7ff fede 	bl	8002c00 <xchg_spi>
 8002e44:	20ff      	movs	r0, #255	; 0xff
 8002e46:	f7ff fedb 	bl	8002c00 <xchg_spi>

	return 1;						/* Function succeeded */
 8002e4a:	2301      	movs	r3, #1
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000034 	.word	0x20000034

08002e58 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e68:	f7ff ff8e 	bl	8002d88 <wait_ready>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <xmit_datablock+0x1e>
 8002e72:	2300      	movs	r3, #0
 8002e74:	e01e      	b.n	8002eb4 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fec1 	bl	8002c00 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	2bfd      	cmp	r3, #253	; 0xfd
 8002e82:	d016      	beq.n	8002eb2 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff6b 	bl	8002d64 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002e8e:	20ff      	movs	r0, #255	; 0xff
 8002e90:	f7ff feb6 	bl	8002c00 <xchg_spi>
 8002e94:	20ff      	movs	r0, #255	; 0xff
 8002e96:	f7ff feb3 	bl	8002c00 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002e9a:	20ff      	movs	r0, #255	; 0xff
 8002e9c:	f7ff feb0 	bl	8002c00 <xchg_spi>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	d001      	beq.n	8002eb2 <xmit_datablock+0x5a>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <xmit_datablock+0x5c>
	}
	return 1;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	da0e      	bge.n	8002eee <send_cmd+0x32>
		cmd &= 0x7F;
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed6:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	2037      	movs	r0, #55	; 0x37
 8002edc:	f7ff ffee 	bl	8002ebc <send_cmd>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002ee4:	7bbb      	ldrb	r3, [r7, #14]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d901      	bls.n	8002eee <send_cmd+0x32>
 8002eea:	7bbb      	ldrb	r3, [r7, #14]
 8002eec:	e051      	b.n	8002f92 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d008      	beq.n	8002f06 <send_cmd+0x4a>
		deselect();
 8002ef4:	f7ff ff68 	bl	8002dc8 <deselect>
		if (!Select()) return 0xFF;
 8002ef8:	f7ff ff6f 	bl	8002dda <Select>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <send_cmd+0x4a>
 8002f02:	23ff      	movs	r3, #255	; 0xff
 8002f04:	e045      	b.n	8002f92 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fe76 	bl	8002c00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	0e1b      	lsrs	r3, r3, #24
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fe70 	bl	8002c00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fe6a 	bl	8002c00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fe64 	bl	8002c00 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fe5f 	bl	8002c00 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <send_cmd+0x94>
 8002f4c:	2395      	movs	r3, #149	; 0x95
 8002f4e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d101      	bne.n	8002f5a <send_cmd+0x9e>
 8002f56:	2387      	movs	r3, #135	; 0x87
 8002f58:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fe4f 	bl	8002c00 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	d102      	bne.n	8002f6e <send_cmd+0xb2>
 8002f68:	20ff      	movs	r0, #255	; 0xff
 8002f6a:	f7ff fe49 	bl	8002c00 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002f6e:	230a      	movs	r3, #10
 8002f70:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002f72:	20ff      	movs	r0, #255	; 0xff
 8002f74:	f7ff fe44 	bl	8002c00 <xchg_spi>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da05      	bge.n	8002f90 <send_cmd+0xd4>
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002f90:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <disk_initialize+0x14>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0c4      	b.n	800313a <disk_initialize+0x19e>
	init_spi();							/* Initialize SPI */
 8002fb0:	f7ff fe14 	bl	8002bdc <init_spi>

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002fb4:	4b63      	ldr	r3, [pc, #396]	; (8003144 <disk_initialize+0x1a8>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <disk_initialize+0x2e>
 8002fc2:	4b60      	ldr	r3, [pc, #384]	; (8003144 <disk_initialize+0x1a8>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	e0b7      	b.n	800313a <disk_initialize+0x19e>

	FCLK_SLOW();
 8002fca:	f7ff fdf3 	bl	8002bb4 <FCLK_SLOW>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002fce:	230a      	movs	r3, #10
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e005      	b.n	8002fe0 <disk_initialize+0x44>
 8002fd4:	20ff      	movs	r0, #255	; 0xff
 8002fd6:	f7ff fe13 	bl	8002c00 <xchg_spi>
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f6      	bne.n	8002fd4 <disk_initialize+0x38>

	ty = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002fea:	2100      	movs	r1, #0
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7ff ff65 	bl	8002ebc <send_cmd>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	f040 8087 	bne.w	8003108 <disk_initialize+0x16c>
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
 8002ffa:	4b53      	ldr	r3, [pc, #332]	; (8003148 <disk_initialize+0x1ac>)
 8002ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003000:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003002:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003006:	2008      	movs	r0, #8
 8003008:	f7ff ff58 	bl	8002ebc <send_cmd>
 800300c:	4603      	mov	r3, r0
 800300e:	2b01      	cmp	r3, #1
 8003010:	d14f      	bne.n	80030b2 <disk_initialize+0x116>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e00d      	b.n	8003034 <disk_initialize+0x98>
 8003018:	7bfc      	ldrb	r4, [r7, #15]
 800301a:	20ff      	movs	r0, #255	; 0xff
 800301c:	f7ff fdf0 	bl	8002c00 <xchg_spi>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	4423      	add	r3, r4
 800302a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3301      	adds	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d9ee      	bls.n	8003018 <disk_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800303a:	7abb      	ldrb	r3, [r7, #10]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d163      	bne.n	8003108 <disk_initialize+0x16c>
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	2baa      	cmp	r3, #170	; 0xaa
 8003044:	d160      	bne.n	8003108 <disk_initialize+0x16c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003046:	bf00      	nop
 8003048:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <disk_initialize+0x1ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <disk_initialize+0xc4>
 8003050:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003054:	20a9      	movs	r0, #169	; 0xa9
 8003056:	f7ff ff31 	bl	8002ebc <send_cmd>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f3      	bne.n	8003048 <disk_initialize+0xac>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003060:	4b39      	ldr	r3, [pc, #228]	; (8003148 <disk_initialize+0x1ac>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d04f      	beq.n	8003108 <disk_initialize+0x16c>
 8003068:	2100      	movs	r1, #0
 800306a:	203a      	movs	r0, #58	; 0x3a
 800306c:	f7ff ff26 	bl	8002ebc <send_cmd>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d148      	bne.n	8003108 <disk_initialize+0x16c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e00d      	b.n	8003098 <disk_initialize+0xfc>
 800307c:	7bfc      	ldrb	r4, [r7, #15]
 800307e:	20ff      	movs	r0, #255	; 0xff
 8003080:	f7ff fdbe 	bl	8002c00 <xchg_spi>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4423      	add	r3, r4
 800308e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	3301      	adds	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d9ee      	bls.n	800307c <disk_initialize+0xe0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800309e:	7a3b      	ldrb	r3, [r7, #8]
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <disk_initialize+0x110>
 80030a8:	230c      	movs	r3, #12
 80030aa:	e000      	b.n	80030ae <disk_initialize+0x112>
 80030ac:	2304      	movs	r3, #4
 80030ae:	737b      	strb	r3, [r7, #13]
 80030b0:	e02a      	b.n	8003108 <disk_initialize+0x16c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80030b2:	2100      	movs	r1, #0
 80030b4:	20a9      	movs	r0, #169	; 0xa9
 80030b6:	f7ff ff01 	bl	8002ebc <send_cmd>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d804      	bhi.n	80030ca <disk_initialize+0x12e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80030c0:	2302      	movs	r3, #2
 80030c2:	737b      	strb	r3, [r7, #13]
 80030c4:	23a9      	movs	r3, #169	; 0xa9
 80030c6:	73bb      	strb	r3, [r7, #14]
 80030c8:	e003      	b.n	80030d2 <disk_initialize+0x136>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80030ca:	2301      	movs	r3, #1
 80030cc:	737b      	strb	r3, [r7, #13]
 80030ce:	2301      	movs	r3, #1
 80030d0:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80030d2:	bf00      	nop
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <disk_initialize+0x1ac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <disk_initialize+0x150>
 80030dc:	7bbb      	ldrb	r3, [r7, #14]
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff feeb 	bl	8002ebc <send_cmd>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f3      	bne.n	80030d4 <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80030ec:	4b16      	ldr	r3, [pc, #88]	; (8003148 <disk_initialize+0x1ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <disk_initialize+0x168>
 80030f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030f8:	2010      	movs	r0, #16
 80030fa:	f7ff fedf 	bl	8002ebc <send_cmd>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <disk_initialize+0x16c>
				ty = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003108:	4a10      	ldr	r2, [pc, #64]	; (800314c <disk_initialize+0x1b0>)
 800310a:	7b7b      	ldrb	r3, [r7, #13]
 800310c:	7013      	strb	r3, [r2, #0]
	deselect();
 800310e:	f7ff fe5b 	bl	8002dc8 <deselect>

	if (ty) {			/* OK */
 8003112:	7b7b      	ldrb	r3, [r7, #13]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <disk_initialize+0x192>
		FCLK_FAST();			/* Set fast clock */
 8003118:	f7ff fd38 	bl	8002b8c <FCLK_FAST>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <disk_initialize+0x1a8>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <disk_initialize+0x1a8>)
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e002      	b.n	8003134 <disk_initialize+0x198>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <disk_initialize+0x1a8>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <disk_initialize+0x1a8>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	bf00      	nop
 8003144:	20000011 	.word	0x20000011
 8003148:	20000034 	.word	0x20000034
 800314c:	2000003c 	.word	0x2000003c

08003150 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <disk_status+0x14>
 8003160:	2301      	movs	r3, #1
 8003162:	e002      	b.n	800316a <disk_status+0x1a>

	return Stat;	/* Return disk status */
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <disk_status+0x24>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	b2db      	uxtb	r3, r3
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	20000011 	.word	0x20000011

08003178 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	LBA_t sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4603      	mov	r3, r0
 8003186:	73fb      	strb	r3, [r7, #15]
	DWORD sect = (DWORD)sector;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	617b      	str	r3, [r7, #20]


	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <disk_read+0x20>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <disk_read+0x24>
 8003198:	2304      	movs	r3, #4
 800319a:	e04d      	b.n	8003238 <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800319c:	4b28      	ldr	r3, [pc, #160]	; (8003240 <disk_read+0xc8>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <disk_read+0x36>
 80031aa:	2303      	movs	r3, #3
 80031ac:	e044      	b.n	8003238 <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <disk_read+0xcc>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <disk_read+0x48>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	025b      	lsls	r3, r3, #9
 80031be:	617b      	str	r3, [r7, #20]

	if (count == 1) {	/* Single sector read */
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d111      	bne.n	80031ea <disk_read+0x72>
		if ((send_cmd(CMD17, sect) == 0)	/* READ_SINGLE_BLOCK */
 80031c6:	6979      	ldr	r1, [r7, #20]
 80031c8:	2011      	movs	r0, #17
 80031ca:	f7ff fe77 	bl	8002ebc <send_cmd>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d129      	bne.n	8003228 <disk_read+0xb0>
			&& rcvr_datablock(buff, 512)) {
 80031d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031d8:	68b8      	ldr	r0, [r7, #8]
 80031da:	f7ff fe13 	bl	8002e04 <rcvr_datablock>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d021      	beq.n	8003228 <disk_read+0xb0>
			count = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	e01e      	b.n	8003228 <disk_read+0xb0>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sect) == 0) {	/* READ_MULTIPLE_BLOCK */
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	2012      	movs	r0, #18
 80031ee:	f7ff fe65 	bl	8002ebc <send_cmd>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d117      	bne.n	8003228 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80031f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031fc:	68b8      	ldr	r0, [r7, #8]
 80031fe:	f7ff fe01 	bl	8002e04 <rcvr_datablock>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <disk_read+0xa6>
				buff += 512;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800320e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	3b01      	subs	r3, #1
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ed      	bne.n	80031f8 <disk_read+0x80>
 800321c:	e000      	b.n	8003220 <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 800321e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003220:	2100      	movs	r1, #0
 8003222:	200c      	movs	r0, #12
 8003224:	f7ff fe4a 	bl	8002ebc <send_cmd>
		}
	}
	deselect();
 8003228:	f7ff fdce 	bl	8002dc8 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000011 	.word	0x20000011
 8003244:	2000003c 	.word	0x2000003c

08003248 <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4603      	mov	r3, r0
 8003256:	73fb      	strb	r3, [r7, #15]
	DWORD sect = (DWORD)sector;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	617b      	str	r3, [r7, #20]


	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <disk_write+0x20>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <disk_write+0x24>
 8003268:	2304      	movs	r3, #4
 800326a:	e063      	b.n	8003334 <disk_write+0xec>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800326c:	4b33      	ldr	r3, [pc, #204]	; (800333c <disk_write+0xf4>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <disk_write+0x36>
 800327a:	2303      	movs	r3, #3
 800327c:	e05a      	b.n	8003334 <disk_write+0xec>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800327e:	4b2f      	ldr	r3, [pc, #188]	; (800333c <disk_write+0xf4>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <disk_write+0x48>
 800328c:	2302      	movs	r3, #2
 800328e:	e051      	b.n	8003334 <disk_write+0xec>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003290:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <disk_write+0xf8>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <disk_write+0x5a>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	025b      	lsls	r3, r3, #9
 80032a0:	617b      	str	r3, [r7, #20]

	if (count == 1) {	/* Single sector write */
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d110      	bne.n	80032ca <disk_write+0x82>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
 80032a8:	6979      	ldr	r1, [r7, #20]
 80032aa:	2018      	movs	r0, #24
 80032ac:	f7ff fe06 	bl	8002ebc <send_cmd>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d136      	bne.n	8003324 <disk_write+0xdc>
			&& xmit_datablock(buff, 0xFE)) {
 80032b6:	21fe      	movs	r1, #254	; 0xfe
 80032b8:	68b8      	ldr	r0, [r7, #8]
 80032ba:	f7ff fdcd 	bl	8002e58 <xmit_datablock>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d02f      	beq.n	8003324 <disk_write+0xdc>
			count = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	e02c      	b.n	8003324 <disk_write+0xdc>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <disk_write+0xf8>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	f003 0306 	and.w	r3, r3, #6
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <disk_write+0x96>
 80032d6:	6839      	ldr	r1, [r7, #0]
 80032d8:	2097      	movs	r0, #151	; 0x97
 80032da:	f7ff fdef 	bl	8002ebc <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80032de:	6979      	ldr	r1, [r7, #20]
 80032e0:	2019      	movs	r0, #25
 80032e2:	f7ff fdeb 	bl	8002ebc <send_cmd>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d11b      	bne.n	8003324 <disk_write+0xdc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80032ec:	21fc      	movs	r1, #252	; 0xfc
 80032ee:	68b8      	ldr	r0, [r7, #8]
 80032f0:	f7ff fdb2 	bl	8002e58 <xmit_datablock>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <disk_write+0xc8>
				buff += 512;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003300:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	3b01      	subs	r3, #1
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ee      	bne.n	80032ec <disk_write+0xa4>
 800330e:	e000      	b.n	8003312 <disk_write+0xca>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003310:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003312:	21fd      	movs	r1, #253	; 0xfd
 8003314:	2000      	movs	r0, #0
 8003316:	f7ff fd9f 	bl	8002e58 <xmit_datablock>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <disk_write+0xdc>
 8003320:	2301      	movs	r3, #1
 8003322:	603b      	str	r3, [r7, #0]
		}
	}
	deselect();
 8003324:	f7ff fd50 	bl	8002dc8 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2db      	uxtb	r3, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000011 	.word	0x20000011
 8003340:	2000003c 	.word	0x2000003c

08003344 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08c      	sub	sp, #48	; 0x30
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	603a      	str	r2, [r7, #0]
 800334e:	71fb      	strb	r3, [r7, #7]
 8003350:	460b      	mov	r3, r1
 8003352:	71bb      	strb	r3, [r7, #6]
	BYTE n, csd[16];
	DWORD st, ed, csize;
	LBA_t *dp;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <disk_ioctl+0x1a>
 800335a:	2304      	movs	r3, #4
 800335c:	e15b      	b.n	8003616 <disk_ioctl+0x2d2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800335e:	4bb0      	ldr	r3, [pc, #704]	; (8003620 <disk_ioctl+0x2dc>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <disk_ioctl+0x2c>
 800336c:	2303      	movs	r3, #3
 800336e:	e152      	b.n	8003616 <disk_ioctl+0x2d2>

	res = RES_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003376:	79bb      	ldrb	r3, [r7, #6]
 8003378:	2b04      	cmp	r3, #4
 800337a:	f200 8137 	bhi.w	80035ec <disk_ioctl+0x2a8>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <disk_ioctl+0x40>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	08003399 	.word	0x08003399
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080035ed 	.word	0x080035ed
 8003390:	08003459 	.word	0x08003459
 8003394:	0800354f 	.word	0x0800354f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (Select()) res = RES_OK;
 8003398:	f7ff fd1f 	bl	8002dda <Select>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8128 	beq.w	80035f4 <disk_ioctl+0x2b0>
 80033a4:	2300      	movs	r3, #0
 80033a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80033aa:	e123      	b.n	80035f4 <disk_ioctl+0x2b0>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80033ac:	2100      	movs	r1, #0
 80033ae:	2009      	movs	r0, #9
 80033b0:	f7ff fd84 	bl	8002ebc <send_cmd>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 811e 	bne.w	80035f8 <disk_ioctl+0x2b4>
 80033bc:	f107 030c 	add.w	r3, r7, #12
 80033c0:	2110      	movs	r1, #16
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fd1e 	bl	8002e04 <rcvr_datablock>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8114 	beq.w	80035f8 <disk_ioctl+0x2b4>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80033d0:	7b3b      	ldrb	r3, [r7, #12]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d111      	bne.n	80033fe <disk_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80033da:	7d7b      	ldrb	r3, [r7, #21]
 80033dc:	461a      	mov	r2, r3
 80033de:	7d3b      	ldrb	r3, [r7, #20]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	4413      	add	r3, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80033ee:	4413      	add	r3, r2
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
				*(LBA_t*)buff = csize << 10;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	029a      	lsls	r2, r3, #10
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e028      	b.n	8003450 <disk_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80033fe:	7c7b      	ldrb	r3, [r7, #17]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	b2da      	uxtb	r2, r3
 8003406:	7dbb      	ldrb	r3, [r7, #22]
 8003408:	09db      	lsrs	r3, r3, #7
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4413      	add	r3, r2
 800340e:	b2da      	uxtb	r2, r3
 8003410:	7d7b      	ldrb	r3, [r7, #21]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 0306 	and.w	r3, r3, #6
 800341a:	b2db      	uxtb	r3, r3
 800341c:	4413      	add	r3, r2
 800341e:	b2db      	uxtb	r3, r3
 8003420:	3302      	adds	r3, #2
 8003422:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003426:	7d3b      	ldrb	r3, [r7, #20]
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	441a      	add	r2, r3
 8003434:	7cbb      	ldrb	r3, [r7, #18]
 8003436:	029b      	lsls	r3, r3, #10
 8003438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800343c:	4413      	add	r3, r2
 800343e:	3301      	adds	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
				*(LBA_t*)buff = csize << (n - 9);
 8003442:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003446:	3b09      	subs	r3, #9
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	409a      	lsls	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003456:	e0cf      	b.n	80035f8 <disk_ioctl+0x2b4>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003458:	4b72      	ldr	r3, [pc, #456]	; (8003624 <disk_ioctl+0x2e0>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d031      	beq.n	80034c8 <disk_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003464:	2100      	movs	r1, #0
 8003466:	208d      	movs	r0, #141	; 0x8d
 8003468:	f7ff fd28 	bl	8002ebc <send_cmd>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	f040 80c4 	bne.w	80035fc <disk_ioctl+0x2b8>
				xchg_spi(0xFF);
 8003474:	20ff      	movs	r0, #255	; 0xff
 8003476:	f7ff fbc3 	bl	8002c00 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	2110      	movs	r1, #16
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fcbf 	bl	8002e04 <rcvr_datablock>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80b7 	beq.w	80035fc <disk_ioctl+0x2b8>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800348e:	2330      	movs	r3, #48	; 0x30
 8003490:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003494:	e007      	b.n	80034a6 <disk_ioctl+0x162>
 8003496:	20ff      	movs	r0, #255	; 0xff
 8003498:	f7ff fbb2 	bl	8002c00 <xchg_spi>
 800349c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034a0:	3b01      	subs	r3, #1
 80034a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80034a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f3      	bne.n	8003496 <disk_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80034ae:	7dbb      	ldrb	r3, [r7, #22]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	2310      	movs	r3, #16
 80034b8:	fa03 f202 	lsl.w	r2, r3, r2
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80034c6:	e099      	b.n	80035fc <disk_ioctl+0x2b8>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80034c8:	2100      	movs	r1, #0
 80034ca:	2009      	movs	r0, #9
 80034cc:	f7ff fcf6 	bl	8002ebc <send_cmd>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 8092 	bne.w	80035fc <disk_ioctl+0x2b8>
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	2110      	movs	r1, #16
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fc90 	bl	8002e04 <rcvr_datablock>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8088 	beq.w	80035fc <disk_ioctl+0x2b8>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80034ec:	4b4d      	ldr	r3, [pc, #308]	; (8003624 <disk_ioctl+0x2e0>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <disk_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80034f8:	7dbb      	ldrb	r3, [r7, #22]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003500:	7dfa      	ldrb	r2, [r7, #23]
 8003502:	09d2      	lsrs	r2, r2, #7
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	4413      	add	r3, r2
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	7e7b      	ldrb	r3, [r7, #25]
 800350c:	099b      	lsrs	r3, r3, #6
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	461a      	mov	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e013      	b.n	8003546 <disk_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800351e:	7dbb      	ldrb	r3, [r7, #22]
 8003520:	109b      	asrs	r3, r3, #2
 8003522:	b29b      	uxth	r3, r3
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	3301      	adds	r3, #1
 800352a:	7dfa      	ldrb	r2, [r7, #23]
 800352c:	00d2      	lsls	r2, r2, #3
 800352e:	f002 0218 	and.w	r2, r2, #24
 8003532:	7df9      	ldrb	r1, [r7, #23]
 8003534:	0949      	lsrs	r1, r1, #5
 8003536:	b2c9      	uxtb	r1, r1
 8003538:	440a      	add	r2, r1
 800353a:	3201      	adds	r2, #1
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	461a      	mov	r2, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800354c:	e056      	b.n	80035fc <disk_ioctl+0x2b8>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800354e:	4b35      	ldr	r3, [pc, #212]	; (8003624 <disk_ioctl+0x2e0>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	f003 0306 	and.w	r3, r3, #6
 8003556:	2b00      	cmp	r3, #0
 8003558:	d052      	beq.n	8003600 <disk_ioctl+0x2bc>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800355a:	f107 020c 	add.w	r2, r7, #12
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	2133      	movs	r1, #51	; 0x33
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff feee 	bl	8003344 <disk_ioctl>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d14a      	bne.n	8003604 <disk_ioctl+0x2c0>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800356e:	7b3b      	ldrb	r3, [r7, #12]
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d104      	bne.n	8003582 <disk_ioctl+0x23e>
 8003578:	7dbb      	ldrb	r3, [r7, #22]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d042      	beq.n	8003608 <disk_ioctl+0x2c4>
		dp = buff; st = (DWORD)dp[0]; ed = (DWORD)dp[1];	/* Load sector block */
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	623b      	str	r3, [r7, #32]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	3304      	adds	r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8003594:	4b23      	ldr	r3, [pc, #140]	; (8003624 <disk_ioctl+0x2e0>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <disk_ioctl+0x268>
			st *= 512; ed *= 512;
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	025b      	lsls	r3, r3, #9
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80035ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ae:	2020      	movs	r0, #32
 80035b0:	f7ff fc84 	bl	8002ebc <send_cmd>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d128      	bne.n	800360c <disk_ioctl+0x2c8>
 80035ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035bc:	2021      	movs	r0, #33	; 0x21
 80035be:	f7ff fc7d 	bl	8002ebc <send_cmd>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d121      	bne.n	800360c <disk_ioctl+0x2c8>
 80035c8:	2100      	movs	r1, #0
 80035ca:	2026      	movs	r0, #38	; 0x26
 80035cc:	f7ff fc76 	bl	8002ebc <send_cmd>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11a      	bne.n	800360c <disk_ioctl+0x2c8>
 80035d6:	f247 5030 	movw	r0, #30000	; 0x7530
 80035da:	f7ff fbd5 	bl	8002d88 <wait_ready>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <disk_ioctl+0x2c8>
			res = RES_OK;	/* FatFs does not check result of this command */
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80035ea:	e00f      	b.n	800360c <disk_ioctl+0x2c8>

	default:
		res = RES_PARERR;
 80035ec:	2304      	movs	r3, #4
 80035ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80035f2:	e00c      	b.n	800360e <disk_ioctl+0x2ca>
		break;
 80035f4:	bf00      	nop
 80035f6:	e00a      	b.n	800360e <disk_ioctl+0x2ca>
		break;
 80035f8:	bf00      	nop
 80035fa:	e008      	b.n	800360e <disk_ioctl+0x2ca>
		break;
 80035fc:	bf00      	nop
 80035fe:	e006      	b.n	800360e <disk_ioctl+0x2ca>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003600:	bf00      	nop
 8003602:	e004      	b.n	800360e <disk_ioctl+0x2ca>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003604:	bf00      	nop
 8003606:	e002      	b.n	800360e <disk_ioctl+0x2ca>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003608:	bf00      	nop
 800360a:	e000      	b.n	800360e <disk_ioctl+0x2ca>
		break;
 800360c:	bf00      	nop
	}

	deselect();
 800360e:	f7ff fbdb 	bl	8002dc8 <deselect>

	return res;
 8003612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003616:	4618      	mov	r0, r3
 8003618:	3730      	adds	r7, #48	; 0x30
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000011 	.word	0x20000011
 8003624:	2000003c 	.word	0x2000003c

08003628 <disk_timerproc>:
/* This function must be called from timer interrupt routine in period
/  of 1 ms to generate card control timing.
*/

void disk_timerproc (void)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
	WORD n;

	n = Timer1;						/* 1kHz decrement timer stopped at 0 */
 800362e:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <disk_timerproc+0x40>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	80fb      	strh	r3, [r7, #6]
	if (n) Timer1 = --n;
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <disk_timerproc+0x1e>
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	3b01      	subs	r3, #1
 800363e:	80fb      	strh	r3, [r7, #6]
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <disk_timerproc+0x40>)
 8003644:	6013      	str	r3, [r2, #0]
	n = Timer2;
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <disk_timerproc+0x44>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	80fb      	strh	r3, [r7, #6]
	if (n) Timer2 = --n;
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <disk_timerproc+0x36>
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	3b01      	subs	r3, #1
 8003656:	80fb      	strh	r3, [r7, #6]
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	4a04      	ldr	r2, [pc, #16]	; (800366c <disk_timerproc+0x44>)
 800365c:	6013      	str	r3, [r2, #0]

}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	20000034 	.word	0x20000034
 800366c:	20000038 	.word	0x20000038

08003670 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3301      	adds	r3, #1
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003680:	89fb      	ldrh	r3, [r7, #14]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	b21a      	sxth	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b21b      	sxth	r3, r3
 800368c:	4313      	orrs	r3, r2
 800368e:	b21b      	sxth	r3, r3
 8003690:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003692:	89fb      	ldrh	r3, [r7, #14]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3303      	adds	r3, #3
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	3202      	adds	r2, #2
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	3201      	adds	r2, #1
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
	return rv;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80036e2:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3307      	adds	r3, #7
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f04f 0400 	mov.w	r4, #0
 80036f8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 80036fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003700:	f04f 0b00 	mov.w	fp, #0
 8003704:	f04f 0c00 	mov.w	ip, #0
 8003708:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800370c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003710:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	3206      	adds	r2, #6
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	b2d1      	uxtb	r1, r2
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	ea4b 0301 	orr.w	r3, fp, r1
 8003724:	ea4c 0402 	orr.w	r4, ip, r2
 8003728:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800372c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003730:	f04f 0b00 	mov.w	fp, #0
 8003734:	f04f 0c00 	mov.w	ip, #0
 8003738:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800373c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003740:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	3205      	adds	r2, #5
 8003748:	7812      	ldrb	r2, [r2, #0]
 800374a:	b2d1      	uxtb	r1, r2
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	ea4b 0301 	orr.w	r3, fp, r1
 8003754:	ea4c 0402 	orr.w	r4, ip, r2
 8003758:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800375c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003760:	f04f 0b00 	mov.w	fp, #0
 8003764:	f04f 0c00 	mov.w	ip, #0
 8003768:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800376c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003770:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	3204      	adds	r2, #4
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	b2d1      	uxtb	r1, r2
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	ea4b 0301 	orr.w	r3, fp, r1
 8003784:	ea4c 0402 	orr.w	r4, ip, r2
 8003788:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800378c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003790:	f04f 0b00 	mov.w	fp, #0
 8003794:	f04f 0c00 	mov.w	ip, #0
 8003798:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800379c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80037a0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	3203      	adds	r2, #3
 80037a8:	7812      	ldrb	r2, [r2, #0]
 80037aa:	b2d1      	uxtb	r1, r2
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	ea4b 0301 	orr.w	r3, fp, r1
 80037b4:	ea4c 0402 	orr.w	r4, ip, r2
 80037b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 80037bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037c0:	f04f 0b00 	mov.w	fp, #0
 80037c4:	f04f 0c00 	mov.w	ip, #0
 80037c8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80037cc:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80037d0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	3202      	adds	r2, #2
 80037d8:	7812      	ldrb	r2, [r2, #0]
 80037da:	b2d1      	uxtb	r1, r2
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	ea4b 0301 	orr.w	r3, fp, r1
 80037e4:	ea4c 0402 	orr.w	r4, ip, r2
 80037e8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 80037ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037f0:	f04f 0b00 	mov.w	fp, #0
 80037f4:	f04f 0c00 	mov.w	ip, #0
 80037f8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80037fc:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003800:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	3201      	adds	r2, #1
 8003808:	7812      	ldrb	r2, [r2, #0]
 800380a:	b2d1      	uxtb	r1, r2
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	ea4b 0301 	orr.w	r3, fp, r1
 8003814:	ea4c 0402 	orr.w	r4, ip, r2
 8003818:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800381c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003820:	f04f 0b00 	mov.w	fp, #0
 8003824:	f04f 0c00 	mov.w	ip, #0
 8003828:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800382c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003830:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	b2d1      	uxtb	r1, r2
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	ea4b 0301 	orr.w	r3, fp, r1
 8003842:	ea4c 0402 	orr.w	r4, ip, r2
 8003846:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800384a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800384e:	4618      	mov	r0, r3
 8003850:	4621      	mov	r1, r4
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800385a:	4770      	bx	lr

0800385c <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	887b      	ldrh	r3, [r7, #2]
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	887a      	ldrh	r2, [r7, #2]
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80038e6:	b490      	push	{r4, r7}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	60fa      	str	r2, [r7, #12]
 80038f8:	783a      	ldrb	r2, [r7, #0]
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	f04f 0400 	mov.w	r4, #0
 8003908:	0a0b      	lsrs	r3, r1, #8
 800390a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800390e:	0a14      	lsrs	r4, r2, #8
 8003910:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	60fa      	str	r2, [r7, #12]
 800391a:	783a      	ldrb	r2, [r7, #0]
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	f04f 0400 	mov.w	r4, #0
 800392a:	0a0b      	lsrs	r3, r1, #8
 800392c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003930:	0a14      	lsrs	r4, r2, #8
 8003932:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	60fa      	str	r2, [r7, #12]
 800393c:	783a      	ldrb	r2, [r7, #0]
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	f04f 0400 	mov.w	r4, #0
 800394c:	0a0b      	lsrs	r3, r1, #8
 800394e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003952:	0a14      	lsrs	r4, r2, #8
 8003954:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	60fa      	str	r2, [r7, #12]
 800395e:	783a      	ldrb	r2, [r7, #0]
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	f04f 0400 	mov.w	r4, #0
 800396e:	0a0b      	lsrs	r3, r1, #8
 8003970:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003974:	0a14      	lsrs	r4, r2, #8
 8003976:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	60fa      	str	r2, [r7, #12]
 8003980:	783a      	ldrb	r2, [r7, #0]
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	0a0b      	lsrs	r3, r1, #8
 8003992:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003996:	0a14      	lsrs	r4, r2, #8
 8003998:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	60fa      	str	r2, [r7, #12]
 80039a2:	783a      	ldrb	r2, [r7, #0]
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	f04f 0400 	mov.w	r4, #0
 80039b2:	0a0b      	lsrs	r3, r1, #8
 80039b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80039b8:	0a14      	lsrs	r4, r2, #8
 80039ba:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	60fa      	str	r2, [r7, #12]
 80039c4:	783a      	ldrb	r2, [r7, #0]
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	f04f 0400 	mov.w	r4, #0
 80039d4:	0a0b      	lsrs	r3, r1, #8
 80039d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80039da:	0a14      	lsrs	r4, r2, #8
 80039dc:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	60fa      	str	r2, [r7, #12]
 80039e6:	783a      	ldrb	r2, [r7, #0]
 80039e8:	701a      	strb	r2, [r3, #0]
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc90      	pop	{r4, r7}
 80039f2:	4770      	bx	lr

080039f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	1c53      	adds	r3, r2, #1
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	1c59      	adds	r1, r3, #1
 8003a18:	6179      	str	r1, [r7, #20]
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f1      	bne.n	8003a0e <mem_cpy+0x1a>
	}
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	617a      	str	r2, [r7, #20]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f3      	bne.n	8003a44 <mem_set+0x10>
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8003a66:	b480      	push	{r7}
 8003a68:	b089      	sub	sp, #36	; 0x24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	61fa      	str	r2, [r7, #28]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	61ba      	str	r2, [r7, #24]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	1acb      	subs	r3, r1, r3
 8003a92:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <mem_cmp+0x40>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0eb      	beq.n	8003a7e <mem_cmp+0x18>

	return r;
 8003aa6:	697b      	ldr	r3, [r7, #20]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3724      	adds	r7, #36	; 0x24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003abc:	e002      	b.n	8003ac4 <chk_chr+0x12>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <chk_chr+0x26>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d1f2      	bne.n	8003abe <chk_chr+0xc>
	return *str;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	781b      	ldrb	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr

08003ae6 <dbc_1st>:


/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8003af0:	2281      	movs	r2, #129	; 0x81
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d30f      	bcc.n	8003b18 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8003af8:	229f      	movs	r2, #159	; 0x9f
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d801      	bhi.n	8003b04 <dbc_1st+0x1e>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e00a      	b.n	8003b1a <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8003b04:	22e0      	movs	r2, #224	; 0xe0
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d305      	bcc.n	8003b18 <dbc_1st+0x32>
 8003b0c:	22fc      	movs	r2, #252	; 0xfc
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d801      	bhi.n	8003b18 <dbc_1st+0x32>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	613b      	str	r3, [r7, #16]

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get an encoding unit */
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	613a      	str	r2, [r7, #16]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	617b      	str	r3, [r7, #20]
	if (uc & 0x80) {	/* Multiple byte code? */
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d065      	beq.n	8003c12 <tchar2uni+0xee>
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003b4c:	2bc0      	cmp	r3, #192	; 0xc0
 8003b4e:	d106      	bne.n	8003b5e <tchar2uni+0x3a>
			uc &= 0x1F; nf = 1;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	2301      	movs	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e01a      	b.n	8003b94 <tchar2uni+0x70>
		} else {
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b64:	2be0      	cmp	r3, #224	; 0xe0
 8003b66:	d106      	bne.n	8003b76 <tchar2uni+0x52>
				uc &= 0x0F; nf = 2;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	2302      	movs	r3, #2
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e00e      	b.n	8003b94 <tchar2uni+0x70>
			} else {
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003b7c:	2bf0      	cmp	r3, #240	; 0xf0
 8003b7e:	d106      	bne.n	8003b8e <tchar2uni+0x6a>
					uc &= 0x07; nf = 3;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	2303      	movs	r3, #3
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	e002      	b.n	8003b94 <tchar2uni+0x70>
				} else {					/* Wrong sequence */
					return 0xFFFFFFFF;
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b92:	e042      	b.n	8003c1a <tchar2uni+0xf6>
				}
			}
		}
		do {	/* Get trailing bytes */
			b = (BYTE)*p++;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	613a      	str	r2, [r7, #16]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	72fb      	strb	r3, [r7, #11]
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 8003b9e:	7afb      	ldrb	r3, [r7, #11]
 8003ba0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d002      	beq.n	8003bae <tchar2uni+0x8a>
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	e035      	b.n	8003c1a <tchar2uni+0xf6>
			uc = uc << 6 | (b & 0x3F);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	019a      	lsls	r2, r3, #6
 8003bb2:	7afb      	ldrb	r3, [r7, #11]
 8003bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
		} while (--nf != 0);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e5      	bne.n	8003b94 <tchar2uni+0x70>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b7f      	cmp	r3, #127	; 0x7f
 8003bcc:	d90b      	bls.n	8003be6 <tchar2uni+0xc2>
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8003bd4:	d303      	bcc.n	8003bde <tchar2uni+0xba>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8003bdc:	d303      	bcc.n	8003be6 <tchar2uni+0xc2>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003be4:	d302      	bcc.n	8003bec <tchar2uni+0xc8>
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	e016      	b.n	8003c1a <tchar2uni+0xf6>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf2:	d30e      	bcc.n	8003c12 <tchar2uni+0xee>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003bfa:	019a      	lsls	r2, r3, #6
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <tchar2uni+0x100>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f043 4358 	orr.w	r3, r3, #3623878656	; 0xd8000000
 8003c0c:	f443 435c 	orr.w	r3, r3, #56320	; 0xdc00
 8003c10:	617b      	str	r3, [r7, #20]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	601a      	str	r2, [r3, #0]
	return uc;
 8003c18:	697b      	ldr	r3, [r7, #20]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	03ff0000 	.word	0x03ff0000

08003c28 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	78db      	ldrb	r3, [r3, #3]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02c      	beq.n	8003c96 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	7858      	ldrb	r0, [r3, #1]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f7ff fafc 	bl	8003248 <disk_write>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11d      	bne.n	8003c92 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	1ad2      	subs	r2, r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d213      	bcs.n	8003c96 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	789b      	ldrb	r3, [r3, #2]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d10f      	bne.n	8003c96 <sync_window+0x6e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7858      	ldrb	r0, [r3, #1]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	441a      	add	r2, r3
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f7ff fadc 	bl	8003248 <disk_write>
 8003c90:	e001      	b.n	8003c96 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d01b      	beq.n	8003cf0 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ffb5 	bl	8003c28 <sync_window>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d113      	bne.n	8003cf0 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7858      	ldrb	r0, [r3, #1]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	f7ff fa4f 	bl	8003178 <disk_read>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8003ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff8f 	bl	8003c28 <sync_window>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d158      	bne.n	8003dc6 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d148      	bne.n	8003dae <sync_fs+0xb2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	791b      	ldrb	r3, [r3, #4]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d144      	bne.n	8003dae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	333c      	adds	r3, #60	; 0x3c
 8003d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fe80 	bl	8003a34 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	333c      	adds	r3, #60	; 0x3c
 8003d38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003d3c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fd8b 	bl	800385c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	333c      	adds	r3, #60	; 0x3c
 8003d4a:	4921      	ldr	r1, [pc, #132]	; (8003dd0 <sync_fs+0xd4>)
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fd9f 	bl	8003890 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	333c      	adds	r3, #60	; 0x3c
 8003d56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003d5a:	491e      	ldr	r1, [pc, #120]	; (8003dd4 <sync_fs+0xd8>)
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fd97 	bl	8003890 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	333c      	adds	r3, #60	; 0x3c
 8003d66:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7ff fd8d 	bl	8003890 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	333c      	adds	r3, #60	; 0x3c
 8003d7a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f7ff fd83 	bl	8003890 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7858      	ldrb	r0, [r3, #1]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da2:	2301      	movs	r3, #1
 8003da4:	f7ff fa50 	bl	8003248 <disk_write>
			fs->fsi_flag = 0;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fac4 	bl	8003344 <disk_ioctl>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <sync_fs+0xca>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	41615252 	.word	0x41615252
 8003dd4:	61417272 	.word	0x61417272

08003dd8 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	3b02      	subs	r3, #2
 8003de6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	3b02      	subs	r3, #2
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d301      	bcc.n	8003df8 <clst2sect+0x20>
 8003df4:	2300      	movs	r3, #0
 8003df6:	e008      	b.n	8003e0a <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	895b      	ldrh	r3, [r3, #10]
 8003e00:	4619      	mov	r1, r3
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	fb03 f301 	mul.w	r3, r3, r1
 8003e08:	4413      	add	r3, r2
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d904      	bls.n	8003e34 <get_fat+0x20>
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <get_fat+0x26>
		val = 1;	/* Internal error */
 8003e34:	2301      	movs	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	e10f      	b.n	800405a <get_fat+0x246>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	f200 80fb 	bhi.w	8004042 <get_fat+0x22e>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <get_fat+0x40>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003eed 	.word	0x08003eed
 8003e5c:	08003f23 	.word	0x08003f23
 8003e60:	08003f5d 	.word	0x08003f5d
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	0a5b      	lsrs	r3, r3, #9
 8003e7a:	4413      	add	r3, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	69b8      	ldr	r0, [r7, #24]
 8003e80:	f7ff ff0e 	bl	8003ca0 <move_window>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f040 80de 	bne.w	8004048 <get_fat+0x234>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	60fa      	str	r2, [r7, #12]
 8003e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	0a5b      	lsrs	r3, r3, #9
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	69b8      	ldr	r0, [r7, #24]
 8003eae:	f7ff fef7 	bl	8003ca0 <move_window>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 80c9 	bne.w	800404c <get_fat+0x238>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <get_fat+0xce>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	e002      	b.n	8003ee8 <get_fat+0xd4>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee8:	61fb      	str	r3, [r7, #28]
			break;
 8003eea:	e0b6      	b.n	800405a <get_fat+0x246>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	4413      	add	r3, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	69b8      	ldr	r0, [r7, #24]
 8003efa:	f7ff fed1 	bl	8003ca0 <move_window>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f040 80a5 	bne.w	8004050 <get_fat+0x23c>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003f14:	4413      	add	r3, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fbaa 	bl	8003670 <ld_word>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	61fb      	str	r3, [r7, #28]
			break;
 8003f20:	e09b      	b.n	800405a <get_fat+0x246>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	09db      	lsrs	r3, r3, #7
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	69b8      	ldr	r0, [r7, #24]
 8003f30:	f7ff feb6 	bl	8003ca0 <move_window>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f040 808c 	bne.w	8004054 <get_fat+0x240>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fba6 	bl	800369e <ld_dword>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f58:	61fb      	str	r3, [r7, #28]
			break;
 8003f5a:	e07e      	b.n	800405a <get_fat+0x246>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f103 0410 	add.w	r4, r3, #16
 8003f62:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003f66:	4323      	orrs	r3, r4
 8003f68:	d003      	beq.n	8003f72 <get_fat+0x15e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <get_fat+0x166>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	79db      	ldrb	r3, [r3, #7]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d163      	bne.n	8004042 <get_fat+0x22e>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f103 0410 	add.w	r4, r3, #16
 8003f8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003f8e:	f113 31ff 	adds.w	r1, r3, #4294967295
 8003f92:	f144 32ff 	adc.w	r2, r4, #4294967295
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	f04f 0400 	mov.w	r4, #0
 8003f9e:	0a4b      	lsrs	r3, r1, #9
 8003fa0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003fa4:	0a54      	lsrs	r4, r2, #9
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	895b      	ldrh	r3, [r3, #10]
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	79db      	ldrb	r3, [r3, #7]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d10e      	bne.n	8003fd8 <get_fat+0x1c4>
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d80a      	bhi.n	8003fd8 <get_fat+0x1c4>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d002      	beq.n	8003fd0 <get_fat+0x1bc>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	e001      	b.n	8003fd4 <get_fat+0x1c0>
 8003fd0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003fd4:	61fb      	str	r3, [r7, #28]
					break;
 8003fd6:	e040      	b.n	800405a <get_fat+0x246>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	79db      	ldrb	r3, [r3, #7]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d108      	bne.n	8003ff2 <get_fat+0x1de>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d203      	bcs.n	8003ff2 <get_fat+0x1de>
					val = clst + 1; 	/* Generate the value */
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	61fb      	str	r3, [r7, #28]
					break;
 8003ff0:	e033      	b.n	800405a <get_fat+0x246>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	79db      	ldrb	r3, [r3, #7]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d023      	beq.n	8004042 <get_fat+0x22e>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <get_fat+0x1f6>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8004002:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004006:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8004008:	e027      	b.n	800405a <get_fat+0x246>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	09db      	lsrs	r3, r3, #7
 8004012:	4413      	add	r3, r2
 8004014:	4619      	mov	r1, r3
 8004016:	69b8      	ldr	r0, [r7, #24]
 8004018:	f7ff fe42 	bl	8003ca0 <move_window>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d11a      	bne.n	8004058 <get_fat+0x244>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004030:	4413      	add	r3, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fb33 	bl	800369e <ld_dword>
 8004038:	4603      	mov	r3, r0
 800403a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800403e:	61fb      	str	r3, [r7, #28]
					break;
 8004040:	e00b      	b.n	800405a <get_fat+0x246>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004042:	2301      	movs	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e008      	b.n	800405a <get_fat+0x246>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004048:	bf00      	nop
 800404a:	e006      	b.n	800405a <get_fat+0x246>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800404c:	bf00      	nop
 800404e:	e004      	b.n	800405a <get_fat+0x246>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004050:	bf00      	nop
 8004052:	e002      	b.n	800405a <get_fat+0x246>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <get_fat+0x246>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004058:	bf00      	nop
		}
	}

	return val;
 800405a:	69fb      	ldr	r3, [r7, #28]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3724      	adds	r7, #36	; 0x24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd90      	pop	{r4, r7, pc}

08004064 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b089      	sub	sp, #36	; 0x24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004070:	2302      	movs	r3, #2
 8004072:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b01      	cmp	r3, #1
 8004078:	f240 80e2 	bls.w	8004240 <put_fat+0x1dc>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	f080 80dc 	bcs.w	8004240 <put_fat+0x1dc>
		switch (fs->fs_type) {
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	3b01      	subs	r3, #1
 800408e:	2b03      	cmp	r3, #3
 8004090:	f200 80d6 	bhi.w	8004240 <put_fat+0x1dc>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <put_fat+0x38>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040ad 	.word	0x080040ad
 80040a0:	08004189 	.word	0x08004189
 80040a4:	080041c9 	.word	0x080041c9
 80040a8:	080041c9 	.word	0x080041c9
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4413      	add	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	0a5b      	lsrs	r3, r3, #9
 80040c2:	4413      	add	r3, r2
 80040c4:	4619      	mov	r1, r3
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff fdea 	bl	8003ca0 <move_window>
 80040cc:	4603      	mov	r3, r0
 80040ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040d0:	7ffb      	ldrb	r3, [r7, #31]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f040 80ad 	bne.w	8004232 <put_fat+0x1ce>
			p = fs->win + bc++ % SS(fs);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1c59      	adds	r1, r3, #1
 80040e2:	61b9      	str	r1, [r7, #24]
 80040e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e8:	4413      	add	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <put_fat+0xae>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	b25b      	sxtb	r3, r3
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	b25a      	sxtb	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	b25b      	sxtb	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b25b      	sxtb	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e001      	b.n	8004116 <put_fat+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	0a5b      	lsrs	r3, r3, #9
 8004128:	4413      	add	r3, r2
 800412a:	4619      	mov	r1, r3
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff fdb7 	bl	8003ca0 <move_window>
 8004132:	4603      	mov	r3, r0
 8004134:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004136:	7ffb      	ldrb	r3, [r7, #31]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d17c      	bne.n	8004236 <put_fat+0x1d2>
			p = fs->win + bc % SS(fs);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004148:	4413      	add	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <put_fat+0xfa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e00e      	b.n	800417c <put_fat+0x118>
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b25b      	sxtb	r3, r3
 8004164:	f023 030f 	bic.w	r3, r3, #15
 8004168:	b25a      	sxtb	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	b25b      	sxtb	r3, r3
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	b25b      	sxtb	r3, r3
 8004176:	4313      	orrs	r3, r2
 8004178:	b25b      	sxtb	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	70da      	strb	r2, [r3, #3]
			break;
 8004186:	e05b      	b.n	8004240 <put_fat+0x1dc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	4413      	add	r3, r2
 8004192:	4619      	mov	r1, r3
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff fd83 	bl	8003ca0 <move_window>
 800419a:	4603      	mov	r3, r0
 800419c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800419e:	7ffb      	ldrb	r3, [r7, #31]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d14a      	bne.n	800423a <put_fat+0x1d6>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80041b2:	4413      	add	r3, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	b292      	uxth	r2, r2
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fb4e 	bl	800385c <st_word>
			fs->wflag = 1;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	70da      	strb	r2, [r3, #3]
			break;
 80041c6:	e03b      	b.n	8004240 <put_fat+0x1dc>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	09db      	lsrs	r3, r3, #7
 80041d0:	4413      	add	r3, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff fd63 	bl	8003ca0 <move_window>
 80041da:	4603      	mov	r3, r0
 80041dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041de:	7ffb      	ldrb	r3, [r7, #31]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d12c      	bne.n	800423e <put_fat+0x1da>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d012      	beq.n	8004212 <put_fat+0x1ae>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004200:	4413      	add	r3, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fa4b 	bl	800369e <ld_dword>
 8004208:	4603      	mov	r3, r0
 800420a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800420e:	4323      	orrs	r3, r4
 8004210:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004220:	4413      	add	r3, r2
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fb33 	bl	8003890 <st_dword>
			fs->wflag = 1;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	70da      	strb	r2, [r3, #3]
			break;
 8004230:	e006      	b.n	8004240 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8004232:	bf00      	nop
 8004234:	e004      	b.n	8004240 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8004236:	bf00      	nop
 8004238:	e002      	b.n	8004240 <put_fat+0x1dc>
			if (res != FR_OK) break;
 800423a:	bf00      	nop
 800423c:	e000      	b.n	8004240 <put_fat+0x1dc>
			if (res != FR_OK) break;
 800423e:	bf00      	nop
		}
	}
	return res;
 8004240:	7ffb      	ldrb	r3, [r7, #31]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3724      	adds	r7, #36	; 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd90      	pop	{r4, r7, pc}
 800424a:	bf00      	nop

0800424c <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	3b02      	subs	r3, #2
 800425c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	3b02      	subs	r3, #2
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	d301      	bcc.n	800426e <find_bitmap+0x22>
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	0b1b      	lsrs	r3, r3, #12
 8004282:	4413      	add	r3, r2
 8004284:	4619      	mov	r1, r3
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fd0a 	bl	8003ca0 <move_window>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <find_bitmap+0x4c>
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
 8004296:	e051      	b.n	800433c <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	08db      	lsrs	r3, r3, #3
 800429c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	2201      	movs	r2, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	4413      	add	r3, r2
 80042b8:	333c      	adds	r3, #60	; 0x3c
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042c0:	4013      	ands	r3, r2
 80042c2:	74fb      	strb	r3, [r7, #19]
 80042c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3301      	adds	r3, #1
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	3b02      	subs	r3, #2
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d307      	bcc.n	80042f0 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	2300      	movs	r3, #0
 80042e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ee:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	3301      	adds	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d106      	bne.n	8004312 <find_bitmap+0xc6>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	3302      	adds	r3, #2
 8004308:	e018      	b.n	800433c <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	d101      	bne.n	800431e <find_bitmap+0xd2>
 800431a:	2300      	movs	r3, #0
 800431c:	e00e      	b.n	800433c <find_bitmap+0xf0>
			} while (bm != 0);
 800431e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1c5      	bne.n	80042b2 <find_bitmap+0x66>
			bm = 1;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	3301      	adds	r3, #1
 8004330:	623b      	str	r3, [r7, #32]
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004338:	d3bb      	bcc.n	80042b2 <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800433a:	e79e      	b.n	800427a <find_bitmap+0x2e>
	}
}
 800433c:	4618      	mov	r0, r3
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	3b02      	subs	r3, #2
 8004356:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	0b1b      	lsrs	r3, r3, #12
 8004360:	4413      	add	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	08db      	lsrs	r3, r3, #3
 8004368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	2201      	movs	r2, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	617a      	str	r2, [r7, #20]
 8004382:	4619      	mov	r1, r3
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7ff fc8b 	bl	8003ca0 <move_window>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <change_bitmap+0x50>
 8004390:	2301      	movs	r3, #1
 8004392:	e03d      	b.n	8004410 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4413      	add	r3, r2
 800439a:	333c      	adds	r3, #60	; 0x3c
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	7ffb      	ldrb	r3, [r7, #31]
 80043a0:	4013      	ands	r3, r2
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <change_bitmap+0x76>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e02a      	b.n	8004410 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	4413      	add	r3, r2
 80043c0:	333c      	adds	r3, #60	; 0x3c
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	7ffb      	ldrb	r3, [r7, #31]
 80043c6:	4053      	eors	r3, r2
 80043c8:	b2d9      	uxtb	r1, r3
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4413      	add	r3, r2
 80043d0:	333c      	adds	r3, #60	; 0x3c
 80043d2:	460a      	mov	r2, r1
 80043d4:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <change_bitmap+0xa8>
 80043e8:	2300      	movs	r3, #0
 80043ea:	e011      	b.n	8004410 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 80043ec:	7ffb      	ldrb	r3, [r7, #31]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1cd      	bne.n	8004394 <change_bitmap+0x50>
			bm = 1;
 80043f8:	2301      	movs	r3, #1
 80043fa:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	3301      	adds	r3, #1
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004408:	d3c4      	bcc.n	8004394 <change_bitmap+0x50>
		i = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800440e:	e7b5      	b.n	800437c <change_bitmap+0x38>
	}
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	79db      	ldrb	r3, [r3, #7]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d121      	bne.n	800446c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e014      	b.n	8004460 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3301      	adds	r3, #1
 800443e:	461a      	mov	r2, r3
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	f7ff fe0f 	bl	8004064 <put_fat>
 8004446:	4603      	mov	r3, r0
 8004448:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <fill_first_frag+0x3c>
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	e00c      	b.n	800446e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3301      	adds	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3b01      	subs	r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e7      	bne.n	8004436 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8004482:	e020      	b.n	80044c6 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	1c59      	adds	r1, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d905      	bls.n	80044a6 <fill_last_frag+0x30>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	3302      	adds	r3, #2
 80044a4:	e000      	b.n	80044a8 <fill_last_frag+0x32>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f7ff fddb 	bl	8004064 <put_fat>
 80044ae:	4603      	mov	r3, r0
 80044b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <fill_last_frag+0x46>
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	e009      	b.n	80044d0 <fill_last_frag+0x5a>
		obj->n_frag--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	1e5a      	subs	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1da      	bne.n	8004484 <fill_last_frag+0xe>
	}
	return FR_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d904      	bls.n	8004506 <remove_chain+0x2e>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	d301      	bcc.n	800450a <remove_chain+0x32>
 8004506:	2302      	movs	r3, #2
 8004508:	e0c4      	b.n	8004694 <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d014      	beq.n	800453a <remove_chain+0x62>
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d103      	bne.n	8004520 <remove_chain+0x48>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	79db      	ldrb	r3, [r3, #7]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d00c      	beq.n	800453a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004520:	f04f 32ff 	mov.w	r2, #4294967295
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	69b8      	ldr	r0, [r7, #24]
 8004528:	f7ff fd9c 	bl	8004064 <put_fat>
 800452c:	4603      	mov	r3, r0
 800452e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004530:	7ffb      	ldrb	r3, [r7, #31]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <remove_chain+0x62>
 8004536:	7ffb      	ldrb	r3, [r7, #31]
 8004538:	e0ac      	b.n	8004694 <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fc69 	bl	8003e14 <get_fat>
 8004542:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d055      	beq.n	80045f6 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <remove_chain+0x7c>
 8004550:	2302      	movs	r3, #2
 8004552:	e09f      	b.n	8004694 <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d101      	bne.n	8004560 <remove_chain+0x88>
 800455c:	2301      	movs	r3, #1
 800455e:	e099      	b.n	8004694 <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d00b      	beq.n	8004580 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004568:	2200      	movs	r2, #0
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	69b8      	ldr	r0, [r7, #24]
 800456e:	f7ff fd79 	bl	8004064 <put_fat>
 8004572:	4603      	mov	r3, r0
 8004574:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004576:	7ffb      	ldrb	r3, [r7, #31]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <remove_chain+0xa8>
 800457c:	7ffb      	ldrb	r3, [r7, #31]
 800457e:	e089      	b.n	8004694 <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	699a      	ldr	r2, [r3, #24]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	3b02      	subs	r3, #2
 800458a:	429a      	cmp	r2, r3
 800458c:	d20b      	bcs.n	80045a6 <remove_chain+0xce>
			fs->free_clst++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	791b      	ldrb	r3, [r3, #4]
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	711a      	strb	r2, [r3, #4]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	3301      	adds	r3, #1
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d102      	bne.n	80045b6 <remove_chain+0xde>
			ecl = nxt;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	623b      	str	r3, [r7, #32]
 80045b4:	e017      	b.n	80045e6 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d10f      	bne.n	80045de <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80045be:	6a3a      	ldr	r2, [r7, #32]
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	2300      	movs	r3, #0
 80045c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ca:	69b8      	ldr	r0, [r7, #24]
 80045cc:	f7ff feba 	bl	8004344 <change_bitmap>
 80045d0:	4603      	mov	r3, r0
 80045d2:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80045d4:	7ffb      	ldrb	r3, [r7, #31]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <remove_chain+0x106>
 80045da:	7ffb      	ldrb	r3, [r7, #31]
 80045dc:	e05a      	b.n	8004694 <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d3a2      	bcc.n	800453a <remove_chain+0x62>
 80045f4:	e000      	b.n	80045f8 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80045f6:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d148      	bne.n	8004692 <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	71da      	strb	r2, [r3, #7]
 800460c:	e041      	b.n	8004692 <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	79db      	ldrb	r3, [r3, #7]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d129      	bne.n	800466a <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800461c:	e017      	b.n	800464e <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fbf7 	bl	8003e14 <get_fat>
 8004626:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d801      	bhi.n	8004632 <remove_chain+0x15a>
 800462e:	2302      	movs	r3, #2
 8004630:	e030      	b.n	8004694 <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d101      	bne.n	800463e <remove_chain+0x166>
 800463a:	2301      	movs	r3, #1
 800463c:	e02a      	b.n	8004694 <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3301      	adds	r3, #1
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	429a      	cmp	r2, r3
 8004646:	d107      	bne.n	8004658 <remove_chain+0x180>
					clst++;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3301      	adds	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	d1e3      	bne.n	800461e <remove_chain+0x146>
 8004656:	e000      	b.n	800465a <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8004658:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d117      	bne.n	8004692 <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2202      	movs	r2, #2
 8004666:	71da      	strb	r2, [r3, #7]
 8004668:	e013      	b.n	8004692 <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	79db      	ldrb	r3, [r3, #7]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d10f      	bne.n	8004692 <remove_chain+0x1ba>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d30a      	bcc.n	8004692 <remove_chain+0x1ba>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	4413      	add	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	d802      	bhi.n	8004692 <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2202      	movs	r2, #2
 8004690:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3728      	adds	r7, #40	; 0x28
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <create_chain+0x2c>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d31b      	bcc.n	8004700 <create_chain+0x64>
 80046c8:	2301      	movs	r3, #1
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	e018      	b.n	8004700 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fb9f 	bl	8003e14 <get_fat>
 80046d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d801      	bhi.n	80046e2 <create_chain+0x46>
 80046de:	2301      	movs	r3, #1
 80046e0:	e113      	b.n	800490a <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d101      	bne.n	80046ee <create_chain+0x52>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	e10d      	b.n	800490a <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d201      	bcs.n	80046fc <create_chain+0x60>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	e106      	b.n	800490a <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <create_chain+0x70>
 8004708:	2300      	movs	r3, #0
 800470a:	e0fe      	b.n	800490a <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d165      	bne.n	80047e0 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8004714:	2201      	movs	r2, #1
 8004716:	69b9      	ldr	r1, [r7, #24]
 8004718:	6938      	ldr	r0, [r7, #16]
 800471a:	f7ff fd97 	bl	800424c <find_bitmap>
 800471e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <create_chain+0x92>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472c:	d101      	bne.n	8004732 <create_chain+0x96>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	e0eb      	b.n	800490a <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8004732:	2301      	movs	r3, #1
 8004734:	2201      	movs	r2, #1
 8004736:	69f9      	ldr	r1, [r7, #28]
 8004738:	6938      	ldr	r0, [r7, #16]
 800473a:	f7ff fe03 	bl	8004344 <change_bitmap>
 800473e:	4603      	mov	r3, r0
 8004740:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d101      	bne.n	800474c <create_chain+0xb0>
 8004748:	2301      	movs	r3, #1
 800474a:	e0de      	b.n	800490a <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d102      	bne.n	8004758 <create_chain+0xbc>
 8004752:	f04f 33ff 	mov.w	r3, #4294967295
 8004756:	e0d8      	b.n	800490a <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	71da      	strb	r2, [r3, #7]
 8004764:	e011      	b.n	800478a <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	79db      	ldrb	r3, [r3, #7]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d10d      	bne.n	800478a <create_chain+0xee>
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3301      	adds	r3, #1
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	429a      	cmp	r2, r3
 8004776:	d008      	beq.n	800478a <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2203      	movs	r2, #3
 8004788:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	79db      	ldrb	r3, [r3, #7]
 800478e:	2b02      	cmp	r3, #2
 8004790:	f000 8098 	beq.w	80048c4 <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	3301      	adds	r3, #1
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	429a      	cmp	r2, r3
 800479c:	d10b      	bne.n	80047b6 <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <create_chain+0x112>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	3301      	adds	r3, #1
 80047ac:	e000      	b.n	80047b0 <create_chain+0x114>
 80047ae:	2302      	movs	r3, #2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	61d3      	str	r3, [r2, #28]
 80047b4:	e086      	b.n	80048c4 <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <create_chain+0x128>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	6839      	ldr	r1, [r7, #0]
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fe54 	bl	8004476 <fill_last_frag>
 80047ce:	4603      	mov	r3, r0
 80047d0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d175      	bne.n	80048c4 <create_chain+0x228>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	61da      	str	r2, [r3, #28]
 80047de:	e071      	b.n	80048c4 <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d129      	bne.n	8004840 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	3301      	adds	r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d301      	bcc.n	8004800 <create_chain+0x164>
 80047fc:	2302      	movs	r3, #2
 80047fe:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8004800:	69f9      	ldr	r1, [r7, #28]
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fb06 	bl	8003e14 <get_fat>
 8004808:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d003      	beq.n	8004818 <create_chain+0x17c>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d101      	bne.n	800481c <create_chain+0x180>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	e076      	b.n	800490a <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00e      	beq.n	8004840 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d906      	bls.n	800483c <create_chain+0x1a0>
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d201      	bcs.n	800483c <create_chain+0x1a0>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d129      	bne.n	800489a <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3301      	adds	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	429a      	cmp	r2, r3
 8004858:	d307      	bcc.n	800486a <create_chain+0x1ce>
					ncl = 2;
 800485a:	2302      	movs	r3, #2
 800485c:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	429a      	cmp	r2, r3
 8004864:	d901      	bls.n	800486a <create_chain+0x1ce>
 8004866:	2300      	movs	r3, #0
 8004868:	e04f      	b.n	800490a <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800486a:	69f9      	ldr	r1, [r7, #28]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fad1 	bl	8003e14 <get_fat>
 8004872:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00e      	beq.n	8004898 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d003      	beq.n	8004888 <create_chain+0x1ec>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d101      	bne.n	800488c <create_chain+0x1f0>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	e03e      	b.n	800490a <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	429a      	cmp	r2, r3
 8004892:	d1da      	bne.n	800484a <create_chain+0x1ae>
 8004894:	2300      	movs	r3, #0
 8004896:	e038      	b.n	800490a <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 8004898:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800489a:	f04f 32ff 	mov.w	r2, #4294967295
 800489e:	69f9      	ldr	r1, [r7, #28]
 80048a0:	6938      	ldr	r0, [r7, #16]
 80048a2:	f7ff fbdf 	bl	8004064 <put_fat>
 80048a6:	4603      	mov	r3, r0
 80048a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <create_chain+0x228>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d006      	beq.n	80048c4 <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	6839      	ldr	r1, [r7, #0]
 80048ba:	6938      	ldr	r0, [r7, #16]
 80048bc:	f7ff fbd2 	bl	8004064 <put_fat>
 80048c0:	4603      	mov	r3, r0
 80048c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <create_chain+0x25c>
		fs->last_clst = ncl;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	3b02      	subs	r3, #2
 80048da:	429a      	cmp	r2, r3
 80048dc:	d804      	bhi.n	80048e8 <create_chain+0x24c>
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	1e5a      	subs	r2, r3, #1
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	791b      	ldrb	r3, [r3, #4]
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	711a      	strb	r2, [r3, #4]
 80048f6:	e007      	b.n	8004908 <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <create_chain+0x268>
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004902:	e000      	b.n	8004906 <create_chain+0x26a>
 8004904:	2301      	movs	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004908:	69fb      	ldr	r3, [r7, #28]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff f983 	bl	8003c28 <sync_window>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <dir_clear+0x1a>
 8004928:	2301      	movs	r3, #1
 800492a:	e036      	b.n	800499a <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff fa52 	bl	8003dd8 <clst2sect>
 8004934:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	333c      	adds	r3, #60	; 0x3c
 8004940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff f874 	bl	8003a34 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	333c      	adds	r3, #60	; 0x3c
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	2301      	movs	r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e003      	b.n	8004964 <dir_clear+0x52>
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4413      	add	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	895b      	ldrh	r3, [r3, #10]
 8004968:	461a      	mov	r2, r3
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4293      	cmp	r3, r2
 800496e:	d20b      	bcs.n	8004988 <dir_clear+0x76>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	7858      	ldrb	r0, [r3, #1]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	441a      	add	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	f7fe fc63 	bl	8003248 <disk_write>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0e9      	beq.n	800495c <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	895b      	ldrh	r3, [r3, #10]
 800498c:	461a      	mov	r2, r3
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	4293      	cmp	r3, r2
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b086      	sub	sp, #24
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d102      	bne.n	80049c0 <dir_sdi+0x1e>
 80049ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049be:	e001      	b.n	80049c4 <dir_sdi+0x22>
 80049c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d904      	bls.n	80049d4 <dir_sdi+0x32>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <dir_sdi+0x36>
		return FR_INT_ERR;
 80049d4:	2302      	movs	r3, #2
 80049d6:	e066      	b.n	8004aa6 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <dir_sdi+0x5c>
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d905      	bls.n	80049fe <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10c      	bne.n	8004a1e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	8912      	ldrh	r2, [r2, #8]
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d301      	bcc.n	8004a14 <dir_sdi+0x72>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e048      	b.n	8004aa6 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a1c:	e029      	b.n	8004a72 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	895b      	ldrh	r3, [r3, #10]
 8004a22:	025b      	lsls	r3, r3, #9
 8004a24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004a26:	e019      	b.n	8004a5c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6979      	ldr	r1, [r7, #20]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f9f1 	bl	8003e14 <get_fat>
 8004a32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d101      	bne.n	8004a40 <dir_sdi+0x9e>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e032      	b.n	8004aa6 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d904      	bls.n	8004a50 <dir_sdi+0xae>
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d301      	bcc.n	8004a54 <dir_sdi+0xb2>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e028      	b.n	8004aa6 <dir_sdi+0x104>
			ofs -= csz;
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d2e1      	bcs.n	8004a28 <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	6938      	ldr	r0, [r7, #16]
 8004a68:	f7ff f9b6 	bl	8003dd8 <clst2sect>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	635a      	str	r2, [r3, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <dir_sdi+0xe2>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e010      	b.n	8004aa6 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	0a5b      	lsrs	r3, r3, #9
 8004a8c:	441a      	add	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	441a      	add	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b086      	sub	sp, #24
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	3320      	adds	r3, #32
 8004ac4:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d102      	bne.n	8004ad4 <dir_next+0x26>
 8004ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad2:	e001      	b.n	8004ad8 <dir_next+0x2a>
 8004ad4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d802      	bhi.n	8004ae4 <dir_next+0x36>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <dir_next+0x42>
 8004aec:	2304      	movs	r3, #4
 8004aee:	e07f      	b.n	8004bf0 <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d16d      	bne.n	8004bd6 <dir_next+0x128>
		dp->sect++;				/* Next sector */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	639a      	str	r2, [r3, #56]	; 0x38

		if (dp->clust == 0) {	/* Static table */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	8912      	ldrh	r2, [r2, #8]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d35e      	bcc.n	8004bd6 <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b1e:	2304      	movs	r3, #4
 8004b20:	e066      	b.n	8004bf0 <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	0a5b      	lsrs	r3, r3, #9
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	8952      	ldrh	r2, [r2, #10]
 8004b2a:	3a01      	subs	r2, #1
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d151      	bne.n	8004bd6 <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f7ff f96a 	bl	8003e14 <get_fat>
 8004b40:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d801      	bhi.n	8004b4c <dir_next+0x9e>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e051      	b.n	8004bf0 <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d101      	bne.n	8004b58 <dir_next+0xaa>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e04b      	b.n	8004bf0 <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d32f      	bcc.n	8004bc2 <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b6e:	2304      	movs	r3, #4
 8004b70:	e03e      	b.n	8004bf0 <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f7ff fd8e 	bl	800469c <create_chain>
 8004b80:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <dir_next+0xde>
 8004b88:	2307      	movs	r3, #7
 8004b8a:	e031      	b.n	8004bf0 <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <dir_next+0xe8>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e02c      	b.n	8004bf0 <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d101      	bne.n	8004ba2 <dir_next+0xf4>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e026      	b.n	8004bf0 <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8004ba2:	6979      	ldr	r1, [r7, #20]
 8004ba4:	6938      	ldr	r0, [r7, #16]
 8004ba6:	f7ff feb4 	bl	8004912 <dir_clear>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <dir_next+0x106>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e01d      	b.n	8004bf0 <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	79db      	ldrb	r3, [r3, #7]
 8004bb8:	f043 0304 	orr.w	r3, r3, #4
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 8004bc8:	6979      	ldr	r1, [r7, #20]
 8004bca:	6938      	ldr	r0, [r7, #16]
 8004bcc:	f7ff f904 	bl	8003dd8 <clst2sect>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be8:	441a      	add	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004c08:	2100      	movs	r1, #0
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fec9 	bl	80049a2 <dir_sdi>
 8004c10:	4603      	mov	r3, r0
 8004c12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d140      	bne.n	8004c9c <dir_alloc+0xa4>
		n = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	4619      	mov	r1, r3
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff f83b 	bl	8003ca0 <move_window>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d132      	bne.n	8004c9a <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d108      	bne.n	8004c4e <dir_alloc+0x56>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	09db      	lsrs	r3, r3, #7
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	e00f      	b.n	8004c6e <dir_alloc+0x76>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2be5      	cmp	r3, #229	; 0xe5
 8004c56:	d004      	beq.n	8004c62 <dir_alloc+0x6a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <dir_alloc+0x6e>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <dir_alloc+0x70>
 8004c66:	2300      	movs	r3, #0
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	3301      	adds	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d102      	bne.n	8004c86 <dir_alloc+0x8e>
 8004c80:	e00c      	b.n	8004c9c <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004c86:	2101      	movs	r1, #1
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff10 	bl	8004aae <dir_next>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0c2      	beq.n	8004c1e <dir_alloc+0x26>
 8004c98:	e000      	b.n	8004c9c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8004c9a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d101      	bne.n	8004ca6 <dir_alloc+0xae>
 8004ca2:	2307      	movs	r3, #7
 8004ca4:	75fb      	strb	r3, [r7, #23]
	return res;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	331a      	adds	r3, #26
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fcd6 	bl	8003670 <ld_word>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d109      	bne.n	8004ce4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	3314      	adds	r3, #20
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fe fccb 	bl	8003670 <ld_word>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	041b      	lsls	r3, r3, #16
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	331a      	adds	r3, #26
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	b292      	uxth	r2, r2
 8004d02:	4611      	mov	r1, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe fda9 	bl	800385c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d109      	bne.n	8004d26 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f103 0214 	add.w	r2, r3, #20
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7fe fd9b 	bl	800385c <st_word>
	}
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	331a      	adds	r3, #26
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fc96 	bl	8003670 <ld_word>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <cmp_lfn+0x1e>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e058      	b.n	8004e00 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d56:	1e5a      	subs	r2, r3, #1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004d64:	2301      	movs	r3, #1
 8004d66:	81fb      	strh	r3, [r7, #14]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	e032      	b.n	8004dd4 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004d6e:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <cmp_lfn+0xd8>)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fe fc77 	bl	8003670 <ld_word>
 8004d82:	4603      	mov	r3, r0
 8004d84:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8004d86:	89fb      	ldrh	r3, [r7, #14]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d019      	beq.n	8004dc0 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2bff      	cmp	r3, #255	; 0xff
 8004d90:	d811      	bhi.n	8004db6 <cmp_lfn+0x86>
 8004d92:	89bb      	ldrh	r3, [r7, #12]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f002 fc79 	bl	800768c <ff_wtoupper>
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	617a      	str	r2, [r7, #20]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f002 fc6e 	bl	800768c <ff_wtoupper>
 8004db0:	4603      	mov	r3, r0
 8004db2:	429c      	cmp	r4, r3
 8004db4:	d001      	beq.n	8004dba <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 8004db6:	2300      	movs	r3, #0
 8004db8:	e022      	b.n	8004e00 <cmp_lfn+0xd0>
			}
			wc = uc;
 8004dba:	89bb      	ldrh	r3, [r7, #12]
 8004dbc:	81fb      	strh	r3, [r7, #14]
 8004dbe:	e006      	b.n	8004dce <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004dc0:	89bb      	ldrh	r3, [r7, #12]
 8004dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d001      	beq.n	8004dce <cmp_lfn+0x9e>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e018      	b.n	8004e00 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d9c9      	bls.n	8004d6e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <cmp_lfn+0xce>
 8004de6:	89fb      	ldrh	r3, [r7, #14]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <cmp_lfn+0xce>
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <cmp_lfn+0xce>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e000      	b.n	8004e00 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 8004dfe:	2301      	movs	r3, #1
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd90      	pop	{r4, r7, pc}
 8004e08:	08007884 	.word	0x08007884

08004e0c <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	331a      	adds	r3, #26
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fc28 	bl	8003670 <ld_word>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <pick_lfn+0x1e>
 8004e26:	2300      	movs	r3, #0
 8004e28:	e050      	b.n	8004ecc <pick_lfn+0xc0>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e32:	1e5a      	subs	r2, r3, #1
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004e40:	2301      	movs	r3, #1
 8004e42:	81fb      	strh	r3, [r7, #14]
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	e028      	b.n	8004e9c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004e4a:	4a22      	ldr	r2, [pc, #136]	; (8004ed4 <pick_lfn+0xc8>)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	4413      	add	r3, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fc09 	bl	8003670 <ld_word>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8004e62:	89fb      	ldrh	r3, [r7, #14]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00f      	beq.n	8004e88 <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2bff      	cmp	r3, #255	; 0xff
 8004e6c:	d901      	bls.n	8004e72 <pick_lfn+0x66>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e02c      	b.n	8004ecc <pick_lfn+0xc0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004e72:	89bb      	ldrh	r3, [r7, #12]
 8004e74:	81fb      	strh	r3, [r7, #14]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	617a      	str	r2, [r7, #20]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	89fa      	ldrh	r2, [r7, #14]
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e006      	b.n	8004e96 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004e88:	89bb      	ldrh	r3, [r7, #12]
 8004e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d001      	beq.n	8004e96 <pick_lfn+0x8a>
 8004e92:	2300      	movs	r3, #0
 8004e94:	e01a      	b.n	8004ecc <pick_lfn+0xc0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d9d3      	bls.n	8004e4a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <pick_lfn+0xbe>
 8004eae:	89fb      	ldrh	r3, [r7, #14]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <pick_lfn+0xbe>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2bff      	cmp	r3, #255	; 0xff
 8004eb8:	d901      	bls.n	8004ebe <pick_lfn+0xb2>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e006      	b.n	8004ecc <pick_lfn+0xc0>
		lfnbuf[i] = 0;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8004eca:	2301      	movs	r3, #1
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	08007884 	.word	0x08007884

08004ed8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	71fb      	strb	r3, [r7, #7]
 8004eea:	4613      	mov	r3, r2
 8004eec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	330d      	adds	r3, #13
 8004ef2:	79ba      	ldrb	r2, [r7, #6]
 8004ef4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	330b      	adds	r3, #11
 8004efa:	220f      	movs	r2, #15
 8004efc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	330c      	adds	r3, #12
 8004f02:	2200      	movs	r2, #0
 8004f04:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	331a      	adds	r3, #26
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fe fca5 	bl	800385c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	1e5a      	subs	r2, r3, #1
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	82fb      	strh	r3, [r7, #22]
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004f2a:	8afb      	ldrh	r3, [r7, #22]
 8004f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <put_lfn+0x6c>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	61fa      	str	r2, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004f44:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <put_lfn+0xcc>)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	4413      	add	r3, r2
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	8afa      	ldrh	r2, [r7, #22]
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe fc80 	bl	800385c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
 8004f5c:	8afb      	ldrh	r3, [r7, #22]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <put_lfn+0x90>
 8004f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f66:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	d9da      	bls.n	8004f2a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004f74:	8afb      	ldrh	r3, [r7, #22]
 8004f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d006      	beq.n	8004f8c <put_lfn+0xb4>
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d103      	bne.n	8004f94 <put_lfn+0xbc>
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f92:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	79fa      	ldrb	r2, [r7, #7]
 8004f98:	701a      	strb	r2, [r3, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08007884 	.word	0x08007884

08004fa8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	; 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	mem_cpy(dst, src, 11);
 8004fb6:	220b      	movs	r2, #11
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7fe fd1a 	bl	80039f4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b05      	cmp	r3, #5
 8004fc4:	d92b      	bls.n	800501e <gen_numname+0x76>
		sreg = seq;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 8004fca:	e022      	b.n	8005012 <gen_numname+0x6a>
			wc = *lfn++;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	1c9a      	adds	r2, r3, #2
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fda:	e017      	b.n	800500c <gen_numname+0x64>
				sreg = (sreg << 1) + (wc & 1);
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005a      	lsls	r2, r3, #1
 8004fe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004fea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <gen_numname+0x5e>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005000:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005004:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	3301      	adds	r3, #1
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	2b0f      	cmp	r3, #15
 8005010:	d9e4      	bls.n	8004fdc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1d8      	bne.n	8004fcc <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800501e:	2307      	movs	r3, #7
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	b2db      	uxtb	r3, r3
 800502c:	3330      	adds	r3, #48	; 0x30
 800502e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005036:	2b39      	cmp	r3, #57	; 0x39
 8005038:	d904      	bls.n	8005044 <gen_numname+0x9c>
 800503a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800503e:	3307      	adds	r3, #7
 8005040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	1e5a      	subs	r2, r3, #1
 8005048:	62ba      	str	r2, [r7, #40]	; 0x28
 800504a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800504e:	4413      	add	r3, r2
 8005050:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005054:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1de      	bne.n	8005022 <gen_numname+0x7a>
	ns[i] = '~';
 8005064:	f107 0214 	add.w	r2, r7, #20
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	4413      	add	r3, r2
 800506c:	227e      	movs	r2, #126	; 0x7e
 800506e:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005070:	2300      	movs	r3, #0
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
 8005074:	e014      	b.n	80050a0 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	4413      	add	r3, r2
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe fd31 	bl	8003ae6 <dbc_1st>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <gen_numname+0xf2>
			if (j == i - 1) break;
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	3b01      	subs	r3, #1
 800508e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005090:	429a      	cmp	r2, r3
 8005092:	d010      	beq.n	80050b6 <gen_numname+0x10e>
			j++;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	3301      	adds	r3, #1
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	3301      	adds	r3, #1
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
 80050a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d207      	bcs.n	80050b8 <gen_numname+0x110>
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	4413      	add	r3, r2
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d1e0      	bne.n	8005076 <gen_numname+0xce>
 80050b4:	e000      	b.n	80050b8 <gen_numname+0x110>
			if (j == i - 1) break;
 80050b6:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	2b07      	cmp	r3, #7
 80050bc:	d808      	bhi.n	80050d0 <gen_numname+0x128>
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80050c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80050c8:	4413      	add	r3, r2
 80050ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80050ce:	e000      	b.n	80050d2 <gen_numname+0x12a>
 80050d0:	2120      	movs	r1, #32
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	627a      	str	r2, [r7, #36]	; 0x24
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	460a      	mov	r2, r1
 80050de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	2b07      	cmp	r3, #7
 80050e4:	d9e8      	bls.n	80050b8 <gen_numname+0x110>
}
 80050e6:	bf00      	nop
 80050e8:	3730      	adds	r7, #48	; 0x30
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80050fa:	230b      	movs	r3, #11
 80050fc:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	0852      	lsrs	r2, r2, #1
 8005104:	01db      	lsls	r3, r3, #7
 8005106:	4313      	orrs	r3, r2
 8005108:	b2da      	uxtb	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	1c59      	adds	r1, r3, #1
 800510e:	6079      	str	r1, [r7, #4]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	4413      	add	r3, r2
 8005114:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	3b01      	subs	r3, #1
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1ed      	bne.n	80050fe <sum_sfn+0x10>
	return sum;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800512e:	b480      	push	{r7}
 8005130:	b087      	sub	sp, #28
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3301      	adds	r3, #1
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	015b      	lsls	r3, r3, #5
 8005140:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8005142:	2300      	movs	r3, #0
 8005144:	827b      	strh	r3, [r7, #18]
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e018      	b.n	800517e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d103      	bne.n	800515a <xdir_sum+0x2c>
			i++;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	3301      	adds	r3, #1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	e00e      	b.n	8005178 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800515a:	8a7b      	ldrh	r3, [r7, #18]
 800515c:	03db      	lsls	r3, r3, #15
 800515e:	b29a      	uxth	r2, r3
 8005160:	8a7b      	ldrh	r3, [r7, #18]
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	4413      	add	r3, r2
 8005168:	b29a      	uxth	r2, r3
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	440b      	add	r3, r1
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	4413      	add	r3, r2
 8005176:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3301      	adds	r3, #1
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	429a      	cmp	r2, r3
 8005184:	d3e2      	bcc.n	800514c <xdir_sum+0x1e>
		}
	}
	return sum;
 8005186:	8a7b      	ldrh	r3, [r7, #18]
}
 8005188:	4618      	mov	r0, r3
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800519e:	e01f      	b.n	80051e0 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 80051a0:	89bb      	ldrh	r3, [r7, #12]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f002 fa72 	bl	800768c <ff_wtoupper>
 80051a8:	4603      	mov	r3, r0
 80051aa:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80051ac:	89fb      	ldrh	r3, [r7, #14]
 80051ae:	03db      	lsls	r3, r3, #15
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	89fb      	ldrh	r3, [r7, #14]
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	89bb      	ldrh	r3, [r7, #12]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80051c6:	89fb      	ldrh	r3, [r7, #14]
 80051c8:	03db      	lsls	r3, r3, #15
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	89fb      	ldrh	r3, [r7, #14]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	4413      	add	r3, r2
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	89bb      	ldrh	r3, [r7, #12]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	b29b      	uxth	r3, r3
 80051dc:	4413      	add	r3, r2
 80051de:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	81bb      	strh	r3, [r7, #12]
 80051ea:	89bb      	ldrh	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1d7      	bne.n	80051a0 <xname_sum+0xe>
	}
	return sum;
 80051f0:	89fb      	ldrh	r3, [r7, #14]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <load_xdir>:
/*-----------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
)
{
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f7fe fd42 	bl	8003ca0 <move_window>
 800521c:	4603      	mov	r3, r0
 800521e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <load_xdir+0x2e>
 8005226:	7dfb      	ldrb	r3, [r7, #23]
 8005228:	e0a9      	b.n	800537e <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b85      	cmp	r3, #133	; 0x85
 8005232:	d001      	beq.n	8005238 <load_xdir+0x3c>
 8005234:	2302      	movs	r3, #2
 8005236:	e0a2      	b.n	800537e <load_xdir+0x182>
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	2220      	movs	r2, #32
 800523e:	4619      	mov	r1, r3
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7fe fbd7 	bl	80039f4 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3301      	adds	r3, #1
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	015b      	lsls	r3, r3, #5
 8005250:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b5f      	cmp	r3, #95	; 0x5f
 8005256:	d903      	bls.n	8005260 <load_xdir+0x64>
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800525e:	d901      	bls.n	8005264 <load_xdir+0x68>
 8005260:	2302      	movs	r3, #2
 8005262:	e08c      	b.n	800537e <load_xdir+0x182>

	/* Load stream-extension entry */
	res = dir_next(dp, 0);
 8005264:	2100      	movs	r1, #0
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fc21 	bl	8004aae <dir_next>
 800526c:	4603      	mov	r3, r0
 800526e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	2b04      	cmp	r3, #4
 8005274:	d101      	bne.n	800527a <load_xdir+0x7e>
 8005276:	2302      	movs	r3, #2
 8005278:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <load_xdir+0x88>
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	e07c      	b.n	800537e <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f7fe fd06 	bl	8003ca0 <move_window>
 8005294:	4603      	mov	r3, r0
 8005296:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <load_xdir+0xa6>
 800529e:	7dfb      	ldrb	r3, [r7, #23]
 80052a0:	e06d      	b.n	800537e <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2bc0      	cmp	r3, #192	; 0xc0
 80052aa:	d001      	beq.n	80052b0 <load_xdir+0xb4>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e066      	b.n	800537e <load_xdir+0x182>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f103 0020 	add.w	r0, r3, #32
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	2220      	movs	r2, #32
 80052bc:	4619      	mov	r1, r3
 80052be:	f7fe fb99 	bl	80039f4 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3323      	adds	r3, #35	; 0x23
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	332c      	adds	r3, #44	; 0x2c
 80052ca:	4a2f      	ldr	r2, [pc, #188]	; (8005388 <load_xdir+0x18c>)
 80052cc:	fba2 2303 	umull	r2, r3, r2, r3
 80052d0:	08db      	lsrs	r3, r3, #3
 80052d2:	015b      	lsls	r3, r3, #5
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d201      	bcs.n	80052de <load_xdir+0xe2>
 80052da:	2302      	movs	r3, #2
 80052dc:	e04f      	b.n	800537e <load_xdir+0x182>

	/* Load file-name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 80052de:	2340      	movs	r3, #64	; 0x40
 80052e0:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 80052e2:	2100      	movs	r1, #0
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff fbe2 	bl	8004aae <dir_next>
 80052ea:	4603      	mov	r3, r0
 80052ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d101      	bne.n	80052f8 <load_xdir+0xfc>
 80052f4:	2302      	movs	r3, #2
 80052f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <load_xdir+0x106>
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	e03d      	b.n	800537e <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f7fe fcc7 	bl	8003ca0 <move_window>
 8005312:	4603      	mov	r3, r0
 8005314:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <load_xdir+0x124>
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	e02e      	b.n	800537e <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2bc1      	cmp	r3, #193	; 0xc1
 8005328:	d001      	beq.n	800532e <load_xdir+0x132>
 800532a:	2302      	movs	r3, #2
 800532c:	e027      	b.n	800537e <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8005334:	d208      	bcs.n	8005348 <load_xdir+0x14c>
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	18d0      	adds	r0, r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	2220      	movs	r2, #32
 8005342:	4619      	mov	r1, r3
 8005344:	f7fe fb56 	bl	80039f4 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	3320      	adds	r3, #32
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	d3c5      	bcc.n	80052e2 <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800535c:	d80e      	bhi.n	800537c <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fee5 	bl	800512e <xdir_sum>
 8005364:	4603      	mov	r3, r0
 8005366:	461c      	mov	r4, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3302      	adds	r3, #2
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe f97f 	bl	8003670 <ld_word>
 8005372:	4603      	mov	r3, r0
 8005374:	429c      	cmp	r4, r3
 8005376:	d001      	beq.n	800537c <load_xdir+0x180>
 8005378:	2302      	movs	r3, #2
 800537a:	e000      	b.n	800537e <load_xdir+0x182>
	}
	return FR_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}
 8005386:	bf00      	nop
 8005388:	88888889 	.word	0x88888889

0800538c <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	3334      	adds	r3, #52	; 0x34
 800539c:	4618      	mov	r0, r3
 800539e:	f7fe f97e 	bl	800369e <ld_dword>
 80053a2:	4602      	mov	r2, r0
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	3338      	adds	r3, #56	; 0x38
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe f997 	bl	80036e2 <ld_qword>
 80053b4:	4603      	mov	r3, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	e9c2 3404 	strd	r3, r4, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	3321      	adds	r3, #33	; 0x21
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	61da      	str	r2, [r3, #28]
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd90      	pop	{r4, r7, pc}

080053de <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 80053de:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	469b      	mov	fp, r3
 800540a:	f04f 0c00 	mov.w	ip, #0
 800540e:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	ea0b 0301 	and.w	r3, fp, r1
 800541a:	ea0c 0402 	and.w	r4, ip, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->obj.n_frag = 0;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff fab2 	bl	80049a2 <dir_sdi>
 800543e:	4603      	mov	r3, r0
 8005440:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <load_obj_xdir+0x74>
		res = load_xdir(dp);		/* Load the object's entry block */
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff fed7 	bl	80051fc <load_xdir>
 800544e:	4603      	mov	r3, r0
 8005450:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800545e <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800545e:	b590      	push	{r4, r7, lr}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1c9c      	adds	r4, r3, #2
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff fe5b 	bl	800512e <xdir_sum>
 8005478:	4603      	mov	r3, r0
 800547a:	4619      	mov	r1, r3
 800547c:	4620      	mov	r0, r4
 800547e:	f7fe f9ed 	bl	800385c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3301      	adds	r3, #1
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	613b      	str	r3, [r7, #16]

	/* Store the direcotry entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff fa85 	bl	80049a2 <dir_sdi>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800549c:	e026      	b.n	80054ec <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f7fe fbf9 	bl	8003ca0 <move_window>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d11d      	bne.n	80054f4 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	2220      	movs	r2, #32
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe fa97 	bl	80039f4 <mem_cpy>
		dp->obj.fs->wflag = 1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2201      	movs	r2, #1
 80054cc:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <store_xdir+0x9a>
		dirb += SZDIRE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3320      	adds	r3, #32
 80054de:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80054e0:	2100      	movs	r1, #0
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fae3 	bl	8004aae <dir_next>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0d5      	beq.n	800549e <store_xdir+0x40>
 80054f2:	e002      	b.n	80054fa <store_xdir+0x9c>
		if (res != FR_OK) break;
 80054f4:	bf00      	nop
 80054f6:	e000      	b.n	80054fa <store_xdir+0x9c>
		if (--nent == 0) break;
 80054f8:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <store_xdir+0xa8>
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <store_xdir+0xac>
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	e000      	b.n	800550c <store_xdir+0xae>
 800550a:	2302      	movs	r3, #2
}
 800550c:	4618      	mov	r0, r3
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	bd90      	pop	{r4, r7, pc}

08005514 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800551e:	2240      	movs	r2, #64	; 0x40
 8005520:	2100      	movs	r1, #0
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fe fa86 	bl	8003a34 <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2285      	movs	r2, #133	; 0x85
 800552c:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3320      	adds	r3, #32
 8005532:	22c0      	movs	r2, #192	; 0xc0
 8005534:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 8005536:	2340      	movs	r3, #64	; 0x40
 8005538:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 800553a:	2300      	movs	r3, #0
 800553c:	72fb      	strb	r3, [r7, #11]
 800553e:	7afb      	ldrb	r3, [r7, #11]
 8005540:	72bb      	strb	r3, [r7, #10]
 8005542:	2301      	movs	r3, #1
 8005544:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	60fa      	str	r2, [r7, #12]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4413      	add	r3, r2
 8005550:	22c1      	movs	r2, #193	; 0xc1
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	60fa      	str	r2, [r7, #12]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 8005562:	893b      	ldrh	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <create_xdir+0x6c>
 8005568:	7abb      	ldrb	r3, [r7, #10]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	4413      	add	r3, r2
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	813b      	strh	r3, [r7, #8]
 8005574:	893b      	ldrh	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <create_xdir+0x6c>
 800557a:	7abb      	ldrb	r3, [r7, #10]
 800557c:	3301      	adds	r3, #1
 800557e:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 		/* Store it */
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	893a      	ldrh	r2, [r7, #8]
 8005588:	4611      	mov	r1, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe f966 	bl	800385c <st_word>
			i += 2;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3302      	adds	r3, #2
 8005594:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e0      	bne.n	8005562 <create_xdir+0x4e>
		nc1++;
 80055a0:	7afb      	ldrb	r3, [r7, #11]
 80055a2:	3301      	adds	r3, #1
 80055a4:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 80055a6:	7abb      	ldrb	r3, [r7, #10]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1c8      	bne.n	8005546 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3323      	adds	r3, #35	; 0x23
 80055b8:	7aba      	ldrb	r2, [r7, #10]
 80055ba:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3301      	adds	r3, #1
 80055c0:	7afa      	ldrb	r2, [r7, #11]
 80055c2:	3201      	adds	r2, #1
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80055ce:	6838      	ldr	r0, [r7, #0]
 80055d0:	f7ff fddf 	bl	8005192 <xname_sum>
 80055d4:	4603      	mov	r3, r0
 80055d6:	4619      	mov	r1, r3
 80055d8:	4620      	mov	r0, r4
 80055da:	f7fe f93f 	bl	800385c <st_word>
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd90      	pop	{r4, r7, pc}

080055e6 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80055f0:	2304      	movs	r3, #4
 80055f2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80055fa:	23ff      	movs	r3, #255	; 0xff
 80055fc:	757b      	strb	r3, [r7, #21]
 80055fe:	23ff      	movs	r3, #255	; 0xff
 8005600:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8005602:	e09f      	b.n	8005744 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	4619      	mov	r1, r3
 800560a:	6938      	ldr	r0, [r7, #16]
 800560c:	f7fe fb48 	bl	8003ca0 <move_window>
 8005610:	4603      	mov	r3, r0
 8005612:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 809a 	bne.w	8005750 <dir_read+0x16a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 8005624:	7dbb      	ldrb	r3, [r7, #22]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d102      	bne.n	8005630 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800562a:	2304      	movs	r3, #4
 800562c:	75fb      	strb	r3, [r7, #23]
 800562e:	e096      	b.n	800575e <dir_read+0x178>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b04      	cmp	r3, #4
 8005636:	d118      	bne.n	800566a <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (b == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8005638:	7dbb      	ldrb	r3, [r7, #22]
 800563a:	2b85      	cmp	r3, #133	; 0x85
 800563c:	d179      	bne.n	8005732 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fdd8 	bl	80051fc <load_xdir>
 800564c:	4603      	mov	r3, r0
 800564e:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d17e      	bne.n	8005754 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	3304      	adds	r3, #4
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005662:	b2da      	uxtb	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	719a      	strb	r2, [r3, #6]
					}
					break;
 8005668:	e074      	b.n	8005754 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	330b      	adds	r3, #11
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005676:	73fb      	strb	r3, [r7, #15]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	7bfa      	ldrb	r2, [r7, #15]
 800567c:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800567e:	7dbb      	ldrb	r3, [r7, #22]
 8005680:	2be5      	cmp	r3, #229	; 0xe5
 8005682:	d00e      	beq.n	80056a2 <dir_read+0xbc>
 8005684:	7dbb      	ldrb	r3, [r7, #22]
 8005686:	2b2e      	cmp	r3, #46	; 0x2e
 8005688:	d00b      	beq.n	80056a2 <dir_read+0xbc>
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	f023 0320 	bic.w	r3, r3, #32
 8005690:	2b08      	cmp	r3, #8
 8005692:	bf0c      	ite	eq
 8005694:	2301      	moveq	r3, #1
 8005696:	2300      	movne	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	4293      	cmp	r3, r2
 80056a0:	d002      	beq.n	80056a8 <dir_read+0xc2>
				ord = 0xFF;
 80056a2:	23ff      	movs	r3, #255	; 0xff
 80056a4:	757b      	strb	r3, [r7, #21]
 80056a6:	e044      	b.n	8005732 <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {			/* An LFN entry is found */
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b0f      	cmp	r3, #15
 80056ac:	d12f      	bne.n	800570e <dir_read+0x128>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 80056ae:	7dbb      	ldrb	r3, [r7, #22]
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	7b5b      	ldrb	r3, [r3, #13]
 80056be:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 80056c0:	7dbb      	ldrb	r3, [r7, #22]
 80056c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c6:	75bb      	strb	r3, [r7, #22]
 80056c8:	7dbb      	ldrb	r3, [r7, #22]
 80056ca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80056d4:	7dba      	ldrb	r2, [r7, #22]
 80056d6:	7d7b      	ldrb	r3, [r7, #21]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d115      	bne.n	8005708 <dir_read+0x122>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e0:	330d      	adds	r3, #13
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	7d3a      	ldrb	r2, [r7, #20]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d10e      	bne.n	8005708 <dir_read+0x122>
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f7ff fb89 	bl	8004e0c <pick_lfn>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <dir_read+0x122>
 8005700:	7d7b      	ldrb	r3, [r7, #21]
 8005702:	3b01      	subs	r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e000      	b.n	800570a <dir_read+0x124>
 8005708:	23ff      	movs	r3, #255	; 0xff
 800570a:	757b      	strb	r3, [r7, #21]
 800570c:	e011      	b.n	8005732 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800570e:	7d7b      	ldrb	r3, [r7, #21]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <dir_read+0x142>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fce8 	bl	80050ee <sum_sfn>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	7d3b      	ldrb	r3, [r7, #20]
 8005724:	4293      	cmp	r3, r2
 8005726:	d017      	beq.n	8005758 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f04f 32ff 	mov.w	r2, #4294967295
 800572e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8005730:	e012      	b.n	8005758 <dir_read+0x172>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005732:	2100      	movs	r1, #0
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff f9ba 	bl	8004aae <dir_next>
 800573a:	4603      	mov	r3, r0
 800573c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10b      	bne.n	800575c <dir_read+0x176>
	while (dp->sect) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	2b00      	cmp	r3, #0
 800574a:	f47f af5b 	bne.w	8005604 <dir_read+0x1e>
 800574e:	e006      	b.n	800575e <dir_read+0x178>
		if (res != FR_OK) break;
 8005750:	bf00      	nop
 8005752:	e004      	b.n	800575e <dir_read+0x178>
					break;
 8005754:	bf00      	nop
 8005756:	e002      	b.n	800575e <dir_read+0x178>
					break;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <dir_read+0x178>
		if (res != FR_OK) break;
 800575c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <dir_read+0x184>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005782:	2100      	movs	r1, #0
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff f90c 	bl	80049a2 <dir_sdi>
 800578a:	4603      	mov	r3, r0
 800578c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800578e:	7ffb      	ldrb	r3, [r7, #31]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <dir_find+0x24>
 8005794:	7ffb      	ldrb	r3, [r7, #31]
 8005796:	e111      	b.n	80059bc <dir_find+0x248>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b04      	cmp	r3, #4
 800579e:	d163      	bne.n	8005868 <dir_find+0xf4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fcf4 	bl	8005192 <xname_sum>
 80057aa:	4603      	mov	r3, r0
 80057ac:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 80057ae:	e04e      	b.n	800584e <dir_find+0xda>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	3324      	adds	r3, #36	; 0x24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fd ff5a 	bl	8003670 <ld_word>
 80057bc:	4603      	mov	r3, r0
 80057be:	461a      	mov	r2, r3
 80057c0:	893b      	ldrh	r3, [r7, #8]
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d000      	beq.n	80057c8 <dir_find+0x54>
 80057c6:	e042      	b.n	800584e <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80057d0:	76fb      	strb	r3, [r7, #27]
 80057d2:	2340      	movs	r3, #64	; 0x40
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	e028      	b.n	800582e <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <dir_find+0x78>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	3302      	adds	r3, #2
 80057ea:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fd ff3b 	bl	8003670 <ld_word>
 80057fa:	4603      	mov	r3, r0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 ff45 	bl	800768c <ff_wtoupper>
 8005802:	4604      	mov	r4, r0
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f001 ff3b 	bl	800768c <ff_wtoupper>
 8005816:	4603      	mov	r3, r0
 8005818:	429c      	cmp	r4, r3
 800581a:	d10c      	bne.n	8005836 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800581c:	7efb      	ldrb	r3, [r7, #27]
 800581e:	3b01      	subs	r3, #1
 8005820:	76fb      	strb	r3, [r7, #27]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	3302      	adds	r3, #2
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	3301      	adds	r3, #1
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	7efb      	ldrb	r3, [r7, #27]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1d3      	bne.n	80057dc <dir_find+0x68>
 8005834:	e000      	b.n	8005838 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005836:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005838:	7efb      	ldrb	r3, [r7, #27]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d107      	bne.n	800584e <dir_find+0xda>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	4413      	add	r3, r2
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <dir_find+0xee>
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800584e:	2100      	movs	r1, #0
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff fec8 	bl	80055e6 <dir_read>
 8005856:	4603      	mov	r3, r0
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	7ffb      	ldrb	r3, [r7, #31]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0a7      	beq.n	80057b0 <dir_find+0x3c>
 8005860:	e000      	b.n	8005864 <dir_find+0xf0>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005862:	bf00      	nop
		}
		return res;
 8005864:	7ffb      	ldrb	r3, [r7, #31]
 8005866:	e0a9      	b.n	80059bc <dir_find+0x248>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005868:	23ff      	movs	r3, #255	; 0xff
 800586a:	773b      	strb	r3, [r7, #28]
 800586c:	7f3b      	ldrb	r3, [r7, #28]
 800586e:	777b      	strb	r3, [r7, #29]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f04f 32ff 	mov.w	r2, #4294967295
 8005876:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	4619      	mov	r1, r3
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f7fe fa0e 	bl	8003ca0 <move_window>
 8005884:	4603      	mov	r3, r0
 8005886:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8005888:	7ffb      	ldrb	r3, [r7, #31]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 8090 	bne.w	80059b0 <dir_find+0x23c>
		c = dp->dir[DIR_Name];
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005898:	7fbb      	ldrb	r3, [r7, #30]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <dir_find+0x130>
 800589e:	2304      	movs	r3, #4
 80058a0:	77fb      	strb	r3, [r7, #31]
 80058a2:	e08a      	b.n	80059ba <dir_find+0x246>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a8:	330b      	adds	r3, #11
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b0:	72fb      	strb	r3, [r7, #11]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7afa      	ldrb	r2, [r7, #11]
 80058b6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80058b8:	7fbb      	ldrb	r3, [r7, #30]
 80058ba:	2be5      	cmp	r3, #229	; 0xe5
 80058bc:	d007      	beq.n	80058ce <dir_find+0x15a>
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <dir_find+0x168>
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	2b0f      	cmp	r3, #15
 80058cc:	d006      	beq.n	80058dc <dir_find+0x168>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80058ce:	23ff      	movs	r3, #255	; 0xff
 80058d0:	777b      	strb	r3, [r7, #29]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f04f 32ff 	mov.w	r2, #4294967295
 80058d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80058da:	e05e      	b.n	800599a <dir_find+0x226>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80058dc:	7afb      	ldrb	r3, [r7, #11]
 80058de:	2b0f      	cmp	r3, #15
 80058e0:	d136      	bne.n	8005950 <dir_find+0x1dc>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d154      	bne.n	800599a <dir_find+0x226>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80058f0:	7fbb      	ldrb	r3, [r7, #30]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00d      	beq.n	8005916 <dir_find+0x1a2>
						sum = dp->dir[LDIR_Chksum];
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	7b5b      	ldrb	r3, [r3, #13]
 8005900:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005902:	7fbb      	ldrb	r3, [r7, #30]
 8005904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005908:	77bb      	strb	r3, [r7, #30]
 800590a:	7fbb      	ldrb	r3, [r7, #30]
 800590c:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005916:	7fba      	ldrb	r2, [r7, #30]
 8005918:	7f7b      	ldrb	r3, [r7, #29]
 800591a:	429a      	cmp	r2, r3
 800591c:	d115      	bne.n	800594a <dir_find+0x1d6>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	330d      	adds	r3, #13
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	7f3a      	ldrb	r2, [r7, #28]
 8005928:	429a      	cmp	r2, r3
 800592a:	d10e      	bne.n	800594a <dir_find+0x1d6>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	4619      	mov	r1, r3
 8005936:	4610      	mov	r0, r2
 8005938:	f7ff f9fa 	bl	8004d30 <cmp_lfn>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <dir_find+0x1d6>
 8005942:	7f7b      	ldrb	r3, [r7, #29]
 8005944:	3b01      	subs	r3, #1
 8005946:	b2db      	uxtb	r3, r3
 8005948:	e000      	b.n	800594c <dir_find+0x1d8>
 800594a:	23ff      	movs	r3, #255	; 0xff
 800594c:	777b      	strb	r3, [r7, #29]
 800594e:	e024      	b.n	800599a <dir_find+0x226>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005950:	7f7b      	ldrb	r3, [r7, #29]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <dir_find+0x1f6>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fbc7 	bl	80050ee <sum_sfn>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	7f3b      	ldrb	r3, [r7, #28]
 8005966:	4293      	cmp	r3, r2
 8005968:	d024      	beq.n	80059b4 <dir_find+0x240>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <dir_find+0x21a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3340      	adds	r3, #64	; 0x40
 8005980:	220b      	movs	r2, #11
 8005982:	4619      	mov	r1, r3
 8005984:	f7fe f86f 	bl	8003a66 <mem_cmp>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d014      	beq.n	80059b8 <dir_find+0x244>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800598e:	23ff      	movs	r3, #255	; 0xff
 8005990:	777b      	strb	r3, [r7, #29]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800599a:	2100      	movs	r1, #0
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff f886 	bl	8004aae <dir_next>
 80059a2:	4603      	mov	r3, r0
 80059a4:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80059a6:	7ffb      	ldrb	r3, [r7, #31]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f43f af65 	beq.w	8005878 <dir_find+0x104>
 80059ae:	e004      	b.n	80059ba <dir_find+0x246>
		if (res != FR_OK) break;
 80059b0:	bf00      	nop
 80059b2:	e002      	b.n	80059ba <dir_find+0x246>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <dir_find+0x246>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80059b8:	bf00      	nop

	return res;
 80059ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3724      	adds	r7, #36	; 0x24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd90      	pop	{r4, r7, pc}

080059c4 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80059c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80059c8:	b0a0      	sub	sp, #128	; 0x80
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	66fb      	str	r3, [r7, #108]	; 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80059da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <dir_register+0x22>
 80059e2:	2306      	movs	r3, #6
 80059e4:	e19e      	b.n	8005d24 <dir_register+0x360>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80059e6:	2300      	movs	r3, #0
 80059e8:	677b      	str	r3, [r7, #116]	; 0x74
 80059ea:	e002      	b.n	80059f2 <dir_register+0x2e>
 80059ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ee:	3301      	adds	r3, #1
 80059f0:	677b      	str	r3, [r7, #116]	; 0x74
 80059f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f4      	bne.n	80059ec <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	f040 80b0 	bne.w	8005b6c <dir_register+0x1a8>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0e:	330e      	adds	r3, #14
 8005a10:	4aaa      	ldr	r2, [pc, #680]	; (8005cbc <dir_register+0x2f8>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	08db      	lsrs	r3, r3, #3
 8005a18:	3302      	adds	r3, #2
 8005a1a:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate directory entries */
 8005a1c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff f8ea 	bl	8004bf8 <dir_alloc>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8005a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <dir_register+0x74>
 8005a32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005a36:	e175      	b.n	8005d24 <dir_register+0x360>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a3e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005a42:	3b01      	subs	r3, #1
 8005a44:	015b      	lsls	r3, r3, #5
 8005a46:	1ad2      	subs	r2, r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	79db      	ldrb	r3, [r3, #7]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d07f      	beq.n	8005b58 <dir_register+0x194>
			dp->obj.stat &= ~4;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	79db      	ldrb	r3, [r3, #7]
 8005a5c:	f023 0304 	bic.w	r3, r3, #4
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fe fcd5 	bl	8004418 <fill_first_frag>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005a74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <dir_register+0xbe>
 8005a7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005a80:	e150      	b.n	8005d24 <dir_register+0x360>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f7fe fcf2 	bl	8004476 <fill_last_frag>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005a98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <dir_register+0xe2>
 8005aa0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005aa4:	e13e      	b.n	8005d24 <dir_register+0x360>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d054      	beq.n	8005b58 <dir_register+0x194>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	f107 0308 	add.w	r3, r7, #8
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fc91 	bl	80053de <load_obj_xdir>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 8005ac2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <dir_register+0x10c>
 8005aca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005ace:	e129      	b.n	8005d24 <dir_register+0x360>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8005ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad8:	895b      	ldrh	r3, [r3, #10]
 8005ada:	025b      	lsls	r3, r3, #9
 8005adc:	469b      	mov	fp, r3
 8005ade:	f04f 0c00 	mov.w	ip, #0
 8005ae2:	eb1b 0301 	adds.w	r3, fp, r1
 8005ae6:	eb4c 0402 	adc.w	r4, ip, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	e9c2 3404 	strd	r3, r4, [r2, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8005af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f103 0410 	add.w	r4, r3, #16
 8005afe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005b02:	461a      	mov	r2, r3
 8005b04:	4623      	mov	r3, r4
 8005b06:	4608      	mov	r0, r1
 8005b08:	f7fd feed 	bl	80038e6 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8005b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f103 0410 	add.w	r4, r3, #16
 8005b1a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4623      	mov	r3, r4
 8005b22:	4608      	mov	r0, r1
 8005b24:	f7fd fedf 	bl	80038e6 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;			/* Update the allocation status */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	79da      	ldrb	r2, [r3, #7]
 8005b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	3321      	adds	r3, #33	; 0x21
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 8005b3a:	f107 0308 	add.w	r3, r7, #8
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fc8d 	bl	800545e <store_xdir>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 8005b4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <dir_register+0x194>
 8005b52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005b56:	e0e5      	b.n	8005d24 <dir_register+0x360>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8005b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4619      	mov	r1, r3
 8005b62:	4610      	mov	r0, r2
 8005b64:	f7ff fcd6 	bl	8005514 <create_xdir>
		return FR_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e0db      	b.n	8005d24 <dir_register+0x360>
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8005b72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005b76:	220c      	movs	r2, #12
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fd ff3b 	bl	80039f4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005b7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d033      	beq.n	8005bf2 <dir_register+0x22e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2240      	movs	r2, #64	; 0x40
 8005b8e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8005b92:	2301      	movs	r3, #1
 8005b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b96:	e016      	b.n	8005bc6 <dir_register+0x202>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ba8:	f7ff f9fe 	bl	8004fa8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff fde1 	bl	8005774 <dir_find>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8005bb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <dir_register+0x20a>
		for (n = 1; n < 100; n++) {
 8005bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bc8:	2b63      	cmp	r3, #99	; 0x63
 8005bca:	d9e5      	bls.n	8005b98 <dir_register+0x1d4>
 8005bcc:	e000      	b.n	8005bd0 <dir_register+0x20c>
			if (res != FR_OK) break;
 8005bce:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd2:	2b64      	cmp	r3, #100	; 0x64
 8005bd4:	d101      	bne.n	8005bda <dir_register+0x216>
 8005bd6:	2307      	movs	r3, #7
 8005bd8:	e0a4      	b.n	8005d24 <dir_register+0x360>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005bda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d002      	beq.n	8005be8 <dir_register+0x224>
 8005be2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005be6:	e09d      	b.n	8005d24 <dir_register+0x360>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005be8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005bf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <dir_register+0x24a>
 8005bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c00:	330c      	adds	r3, #12
 8005c02:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <dir_register+0x2fc>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	089b      	lsrs	r3, r3, #2
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	e000      	b.n	8005c10 <dir_register+0x24c>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005c12:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fe ffef 	bl	8004bf8 <dir_alloc>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005c20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d14e      	bne.n	8005cc6 <dir_register+0x302>
 8005c28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	673b      	str	r3, [r7, #112]	; 0x70
 8005c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d048      	beq.n	8005cc6 <dir_register+0x302>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3a:	015b      	lsls	r3, r3, #5
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fe feae 	bl	80049a2 <dir_sdi>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8005c4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d138      	bne.n	8005cc6 <dir_register+0x302>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3340      	adds	r3, #64	; 0x40
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fa48 	bl	80050ee <sum_sfn>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c6c:	f7fe f818 	bl	8003ca0 <move_window>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8005c76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d122      	bne.n	8005cc4 <dir_register+0x300>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c80:	68d8      	ldr	r0, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005c8e:	f7ff f923 	bl	8004ed8 <put_lfn>
				fs->wflag = 1;
 8005c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c94:	2201      	movs	r2, #1
 8005c96:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005c98:	2100      	movs	r1, #0
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fe ff07 	bl	8004aae <dir_next>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8005ca6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <dir_register+0x302>
 8005cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	673b      	str	r3, [r7, #112]	; 0x70
 8005cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1d4      	bne.n	8005c64 <dir_register+0x2a0>
 8005cba:	e004      	b.n	8005cc6 <dir_register+0x302>
 8005cbc:	88888889 	.word	0x88888889
 8005cc0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8005cc4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005cc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d128      	bne.n	8005d20 <dir_register+0x35c>
		res = move_window(fs, dp->sect);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cd6:	f7fd ffe3 	bl	8003ca0 <move_window>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8005ce0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d11b      	bne.n	8005d20 <dir_register+0x35c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cec:	2220      	movs	r2, #32
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fd fe9f 	bl	8003a34 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3340      	adds	r3, #64	; 0x40
 8005cfe:	220b      	movs	r2, #11
 8005d00:	4619      	mov	r1, r3
 8005d02:	f7fd fe77 	bl	80039f4 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	330c      	adds	r3, #12
 8005d12:	f002 0218 	and.w	r2, r2, #24
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005d20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3780      	adds	r7, #128	; 0x80
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005d2e:	bf00      	nop

08005d30 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8005d4c:	f107 0308 	add.w	r3, r7, #8
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fd fee7 	bl	8003b24 <tchar2uni>
 8005d56:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d101      	bne.n	8005d64 <create_name+0x34>
 8005d60:	2306      	movs	r3, #6
 8005d62:	e1af      	b.n	80060c4 <create_name+0x394>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6a:	d309      	bcc.n	8005d80 <create_name+0x50>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	0c19      	lsrs	r1, r3, #16
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	617a      	str	r2, [r7, #20]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	b28a      	uxth	r2, r1
 8005d7e:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 8005d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d86:	2b1f      	cmp	r3, #31
 8005d88:	d920      	bls.n	8005dcc <create_name+0x9c>
 8005d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d8c:	2b2f      	cmp	r3, #47	; 0x2f
 8005d8e:	d01d      	beq.n	8005dcc <create_name+0x9c>
 8005d90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d92:	2b5c      	cmp	r3, #92	; 0x5c
 8005d94:	d01a      	beq.n	8005dcc <create_name+0x9c>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d98:	2b7f      	cmp	r3, #127	; 0x7f
 8005d9a:	d809      	bhi.n	8005db0 <create_name+0x80>
 8005d9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d9e:	4619      	mov	r1, r3
 8005da0:	48a2      	ldr	r0, [pc, #648]	; (800602c <create_name+0x2fc>)
 8005da2:	f7fd fe86 	bl	8003ab2 <chk_chr>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <create_name+0x80>
 8005dac:	2306      	movs	r3, #6
 8005dae:	e189      	b.n	80060c4 <create_name+0x394>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2bfe      	cmp	r3, #254	; 0xfe
 8005db4:	d901      	bls.n	8005dba <create_name+0x8a>
 8005db6:	2306      	movs	r3, #6
 8005db8:	e184      	b.n	80060c4 <create_name+0x394>
		lfn[di++] = wc;					/* Store the Unicode character */
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	617a      	str	r2, [r7, #20]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005dc8:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8005dca:	e7bf      	b.n	8005d4c <create_name+0x1c>
	}
	if (wc < ' ') {				/* End of path? */
 8005dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dce:	2b1f      	cmp	r3, #31
 8005dd0:	d803      	bhi.n	8005dda <create_name+0xaa>
		cf = NS_LAST;			/* Set last segment flag */
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005dd8:	e00e      	b.n	8005df8 <create_name+0xc8>
	} else {
		cf = 0;					/* Next segment follows */
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8005de0:	e002      	b.n	8005de8 <create_name+0xb8>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60bb      	str	r3, [r7, #8]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b2f      	cmp	r3, #47	; 0x2f
 8005dee:	d0f8      	beq.n	8005de2 <create_name+0xb2>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b5c      	cmp	r3, #92	; 0x5c
 8005df6:	d0f4      	beq.n	8005de2 <create_name+0xb2>
	}
	*path = p;					/* Return pointer to the next segment */
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	601a      	str	r2, [r3, #0]
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005dfe:	e011      	b.n	8005e24 <create_name+0xf4>
		wc = lfn[di - 1];
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e06:	3b01      	subs	r3, #1
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8005e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d002      	beq.n	8005e1e <create_name+0xee>
 8005e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e1c:	d106      	bne.n	8005e2c <create_name+0xfc>
		di--;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1ea      	bne.n	8005e00 <create_name+0xd0>
 8005e2a:	e000      	b.n	8005e2e <create_name+0xfe>
		if (wc != ' ' && wc != '.') break;
 8005e2c:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	2200      	movs	r2, #0
 8005e38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <create_name+0x114>
 8005e40:	2306      	movs	r3, #6
 8005e42:	e13f      	b.n	80060c4 <create_name+0x394>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8005e44:	2300      	movs	r3, #0
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	e002      	b.n	8005e50 <create_name+0x120>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d0f5      	beq.n	8005e4a <create_name+0x11a>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <create_name+0x142>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e70:	d109      	bne.n	8005e86 <create_name+0x156>
 8005e72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e76:	f043 0303 	orr.w	r3, r3, #3
 8005e7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8005e7e:	e002      	b.n	8005e86 <create_name+0x156>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <create_name+0x170>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e92:	3b01      	subs	r3, #1
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4413      	add	r3, r2
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e9e:	d1ef      	bne.n	8005e80 <create_name+0x150>

	mem_set(dp->fn, ' ', 11);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3340      	adds	r3, #64	; 0x40
 8005ea4:	220b      	movs	r2, #11
 8005ea6:	2120      	movs	r1, #32
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fd fdc3 	bl	8003a34 <mem_set>
	i = b = 0; ni = 8;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	623b      	str	r3, [r7, #32]
 8005eb8:	2308      	movs	r3, #8
 8005eba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	61ba      	str	r2, [r7, #24]
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8005ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80aa 	beq.w	8006028 <create_name+0x2f8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8005ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d006      	beq.n	8005ee8 <create_name+0x1b8>
 8005eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005edc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ede:	d10a      	bne.n	8005ef6 <create_name+0x1c6>
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d006      	beq.n	8005ef6 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN;
 8005ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005eec:	f043 0303 	orr.w	r3, r3, #3
 8005ef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 8005ef4:	e097      	b.n	8006026 <create_name+0x2f6>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8005ef6:	6a3a      	ldr	r2, [r7, #32]
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d203      	bcs.n	8005f06 <create_name+0x1d6>
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d123      	bne.n	8005f4e <create_name+0x21e>
			if (ni == 11) {				/* Name extension overflow? */
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	2b0b      	cmp	r3, #11
 8005f0a:	d106      	bne.n	8005f1a <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN;
 8005f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f10:	f043 0303 	orr.w	r3, r3, #3
 8005f14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8005f18:	e08d      	b.n	8006036 <create_name+0x306>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d005      	beq.n	8005f2e <create_name+0x1fe>
 8005f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f26:	f043 0303 	orr.w	r3, r3, #3
 8005f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d87e      	bhi.n	8006034 <create_name+0x304>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	230b      	movs	r3, #11
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 8005f4c:	e06b      	b.n	8006026 <create_name+0x2f6>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8005f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f50:	2b7f      	cmp	r3, #127	; 0x7f
 8005f52:	d911      	bls.n	8005f78 <create_name+0x248>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8005f54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f58:	f043 0302 	orr.w	r3, r3, #2
 8005f5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
 8005f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fb92 	bl	800768c <ff_wtoupper>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fb32 	bl	80075d8 <ff_uni2oem>
 8005f74:	4603      	mov	r3, r0
 8005f76:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8005f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f7a:	2bff      	cmp	r3, #255	; 0xff
 8005f7c:	d91a      	bls.n	8005fb4 <create_name+0x284>
			if (i >= ni - 1) {			/* Field overflow? */
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d308      	bcc.n	8005f9a <create_name+0x26a>
				cf |= NS_LOSS | NS_LFN;
 8005f88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f8c:	f043 0303 	orr.w	r3, r3, #3
 8005f90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	623b      	str	r3, [r7, #32]
 8005f98:	e045      	b.n	8006026 <create_name+0x2f6>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8005f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	b299      	uxth	r1, r3
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	623a      	str	r2, [r7, #32]
 8005fa6:	b2c9      	uxtb	r1, r1
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	460a      	mov	r2, r1
 8005fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb2:	e02e      	b.n	8006012 <create_name+0x2e2>
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8005fb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <create_name+0x29a>
 8005fba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	481c      	ldr	r0, [pc, #112]	; (8006030 <create_name+0x300>)
 8005fc0:	f7fd fd77 	bl	8003ab2 <chk_chr>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <create_name+0x2ac>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005fca:	235f      	movs	r3, #95	; 0x5f
 8005fcc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005fce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fd2:	f043 0303 	orr.w	r3, r3, #3
 8005fd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005fda:	e01a      	b.n	8006012 <create_name+0x2e2>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8005fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d908      	bls.n	8005ff4 <create_name+0x2c4>
 8005fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fe4:	2b5a      	cmp	r3, #90	; 0x5a
 8005fe6:	d805      	bhi.n	8005ff4 <create_name+0x2c4>
					b |= 2;
 8005fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fec:	f043 0302 	orr.w	r3, r3, #2
 8005ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8005ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ff6:	2b60      	cmp	r3, #96	; 0x60
 8005ff8:	d90b      	bls.n	8006012 <create_name+0x2e2>
 8005ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ffc:	2b7a      	cmp	r3, #122	; 0x7a
 8005ffe:	d808      	bhi.n	8006012 <create_name+0x2e2>
					b |= 1; wc -= 0x20;
 8006000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800600c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800600e:	3b20      	subs	r3, #32
 8006010:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	623a      	str	r2, [r7, #32]
 8006018:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800601a:	b2d1      	uxtb	r1, r2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	4413      	add	r3, r2
 8006020:	460a      	mov	r2, r1
 8006022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
 8006026:	e749      	b.n	8005ebc <create_name+0x18c>
		if (wc == 0) break;				/* Break on end of the LFN */
 8006028:	bf00      	nop
 800602a:	e004      	b.n	8006036 <create_name+0x306>
 800602c:	08007840 	.word	0x08007840
 8006030:	0800784c 	.word	0x0800784c
			if (si > di) break;						/* No name extension? */
 8006034:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800603c:	2be5      	cmp	r3, #229	; 0xe5
 800603e:	d103      	bne.n	8006048 <create_name+0x318>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2205      	movs	r2, #5
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	2b08      	cmp	r3, #8
 800604c:	d104      	bne.n	8006058 <create_name+0x328>
 800604e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8006058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800605c:	f003 030c 	and.w	r3, r3, #12
 8006060:	2b0c      	cmp	r3, #12
 8006062:	d005      	beq.n	8006070 <create_name+0x340>
 8006064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	2b03      	cmp	r3, #3
 800606e:	d105      	bne.n	800607c <create_name+0x34c>
 8006070:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006074:	f043 0302 	orr.w	r3, r3, #2
 8006078:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800607c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d117      	bne.n	80060b8 <create_name+0x388>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8006088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <create_name+0x370>
 8006094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006098:	f043 0310 	orr.w	r3, r3, #16
 800609c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 80060a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <create_name+0x388>
 80060ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80060b0:	f043 0308 	orr.w	r3, r3, #8
 80060b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80060be:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 80060c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3728      	adds	r7, #40	; 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80060cc:	b590      	push	{r4, r7, lr}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80060dc:	e002      	b.n	80060e4 <follow_path+0x18>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	3301      	adds	r3, #1
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b2f      	cmp	r3, #47	; 0x2f
 80060ea:	d0f8      	beq.n	80060de <follow_path+0x12>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b5c      	cmp	r3, #92	; 0x5c
 80060f2:	d0f4      	beq.n	80060de <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	61da      	str	r2, [r3, #28]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b1f      	cmp	r3, #31
 8006106:	d80a      	bhi.n	800611e <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2280      	movs	r2, #128	; 0x80
 800610c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8006110:	2100      	movs	r1, #0
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fe fc45 	bl	80049a2 <dir_sdi>
 8006118:	4603      	mov	r3, r0
 800611a:	75fb      	strb	r3, [r7, #23]
 800611c:	e061      	b.n	80061e2 <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800611e:	463b      	mov	r3, r7
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fe04 	bl	8005d30 <create_name>
 8006128:	4603      	mov	r3, r0
 800612a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d152      	bne.n	80061d8 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fb1e 	bl	8005774 <dir_find>
 8006138:	4603      	mov	r3, r0
 800613a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006142:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d145      	bne.n	80061dc <follow_path+0x110>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d140      	bne.n	80061dc <follow_path+0x110>
 800615a:	2305      	movs	r3, #5
 800615c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800615e:	e03d      	b.n	80061dc <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d13a      	bne.n	80061e0 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	799b      	ldrb	r3, [r3, #6]
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006176:	2305      	movs	r3, #5
 8006178:	75fb      	strb	r3, [r7, #23]
 800617a:	e032      	b.n	80061e2 <follow_path+0x116>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b04      	cmp	r3, #4
 8006182:	d119      	bne.n	80061b8 <follow_path+0xec>
				dp->obj.c_scl = dp->obj.sclust;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f103 0410 	add.w	r4, r3, #16
 8006192:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	79d2      	ldrb	r2, [r2, #7]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4619      	mov	r1, r3
 80061b0:	6938      	ldr	r0, [r7, #16]
 80061b2:	f7ff f8eb 	bl	800538c <init_alloc_info>
 80061b6:	e7b2      	b.n	800611e <follow_path+0x52>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c6:	4413      	add	r3, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	6938      	ldr	r0, [r7, #16]
 80061cc:	f7fe fd70 	bl	8004cb0 <ld_clust>
 80061d0:	4602      	mov	r2, r0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80061d6:	e7a2      	b.n	800611e <follow_path+0x52>
			if (res != FR_OK) break;
 80061d8:	bf00      	nop
 80061da:	e002      	b.n	80061e2 <follow_path+0x116>
				break;
 80061dc:	bf00      	nop
 80061de:	e000      	b.n	80061e2 <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80061e0:	bf00      	nop
			}
		}
	}

	return res;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd90      	pop	{r4, r7, pc}

080061ec <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b089      	sub	sp, #36	; 0x24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 80061f4:	f04f 33ff 	mov.w	r3, #4294967295
 80061f8:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <get_ldnumber+0x22>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	e02d      	b.n	800626a <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	61fa      	str	r2, [r7, #28]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	73fb      	strb	r3, [r7, #15]
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	2b1f      	cmp	r3, #31
 800621c:	d902      	bls.n	8006224 <get_ldnumber+0x38>
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	2b3a      	cmp	r3, #58	; 0x3a
 8006222:	d1f4      	bne.n	800620e <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	2b3a      	cmp	r3, #58	; 0x3a
 8006228:	d11c      	bne.n	8006264 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800622a:	2301      	movs	r3, #1
 800622c:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b2f      	cmp	r3, #47	; 0x2f
 8006234:	d90c      	bls.n	8006250 <get_ldnumber+0x64>
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b39      	cmp	r3, #57	; 0x39
 800623c:	d808      	bhi.n	8006250 <get_ldnumber+0x64>
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	3302      	adds	r3, #2
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	429a      	cmp	r2, r3
 8006246:	d103      	bne.n	8006250 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	3b30      	subs	r3, #48	; 0x30
 800624e:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	dc04      	bgt.n	8006260 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	e002      	b.n	800626a <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8006268:	697b      	ldr	r3, [r7, #20]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3724      	adds	r7, #36	; 0x24
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <check_fs>:

static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VBR, 2:Valid BS but not FAT, 3:Invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	70da      	strb	r2, [r3, #3]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f04f 32ff 	mov.w	r2, #4294967295
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fd fd06 	bl	8003ca0 <move_window>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <check_fs+0x2a>
 800629a:	2304      	movs	r3, #4
 800629c:	e044      	b.n	8006328 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	333c      	adds	r3, #60	; 0x3c
 80062a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fd f9e2 	bl	8003670 <ld_word>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <check_fs+0x48>
 80062b8:	2303      	movs	r3, #3
 80062ba:	e035      	b.n	8006328 <check_fs+0xb4>

	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	333c      	adds	r3, #60	; 0x3c
 80062c0:	220b      	movs	r2, #11
 80062c2:	491b      	ldr	r1, [pc, #108]	; (8006330 <check_fs+0xbc>)
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fd fbce 	bl	8003a66 <mem_cmp>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <check_fs+0x60>
 80062d0:	2301      	movs	r3, #1
 80062d2:	e029      	b.n	8006328 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062da:	2be9      	cmp	r3, #233	; 0xe9
 80062dc:	d009      	beq.n	80062f2 <check_fs+0x7e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e4:	2beb      	cmp	r3, #235	; 0xeb
 80062e6:	d004      	beq.n	80062f2 <check_fs+0x7e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ee:	2be8      	cmp	r3, #232	; 0xe8
 80062f0:	d119      	bne.n	8006326 <check_fs+0xb2>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	333c      	adds	r3, #60	; 0x3c
 80062f6:	3336      	adds	r3, #54	; 0x36
 80062f8:	2203      	movs	r2, #3
 80062fa:	490e      	ldr	r1, [pc, #56]	; (8006334 <check_fs+0xc0>)
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fd fbb2 	bl	8003a66 <mem_cmp>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <check_fs+0x98>
 8006308:	2300      	movs	r3, #0
 800630a:	e00d      	b.n	8006328 <check_fs+0xb4>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	333c      	adds	r3, #60	; 0x3c
 8006310:	3352      	adds	r3, #82	; 0x52
 8006312:	2205      	movs	r2, #5
 8006314:	4908      	ldr	r1, [pc, #32]	; (8006338 <check_fs+0xc4>)
 8006316:	4618      	mov	r0, r3
 8006318:	f7fd fba5 	bl	8003a66 <mem_cmp>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <check_fs+0xb2>
 8006322:	2300      	movs	r3, #0
 8006324:	e000      	b.n	8006328 <check_fs+0xb4>
	}
	return 2;	/* Valid BS but not FAT */
 8006326:	2302      	movs	r3, #2
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08007854 	.word	0x08007854
 8006334:	08007860 	.word	0x08007860
 8006338:	08007864 	.word	0x08007864

0800633c <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:auto, 1..:forced */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
 8006346:	2100      	movs	r1, #0
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff ff93 	bl	8006274 <check_fs>
 800634e:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d007      	beq.n	8006366 <find_volume+0x2a>
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d802      	bhi.n	8006362 <find_volume+0x26>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <find_volume+0x2a>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	e048      	b.n	80063f8 <find_volume+0xbc>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	e015      	b.n	8006398 <find_volume+0x5c>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800637a:	4413      	add	r3, r2
 800637c:	4618      	mov	r0, r3
 800637e:	f7fd f98e 	bl	800369e <ld_dword>
 8006382:	4602      	mov	r2, r0
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	f107 0120 	add.w	r1, r7, #32
 800638c:	440b      	add	r3, r1
 800638e:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	3301      	adds	r3, #1
 8006396:	61fb      	str	r3, [r7, #28]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	2b03      	cmp	r3, #3
 800639c:	d9e6      	bls.n	800636c <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <find_volume+0x6e>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	e000      	b.n	80063ac <find_volume+0x70>
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	f107 0220 	add.w	r2, r7, #32
 80063b6:	4413      	add	r3, r2
 80063b8:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00c      	beq.n	80063da <find_volume+0x9e>
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	f107 0220 	add.w	r2, r7, #32
 80063c8:	4413      	add	r3, r2
 80063ca:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff ff4f 	bl	8006274 <check_fs>
 80063d6:	4603      	mov	r3, r0
 80063d8:	e000      	b.n	80063dc <find_volume+0xa0>
 80063da:	2303      	movs	r3, #3
 80063dc:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d108      	bne.n	80063f6 <find_volume+0xba>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d905      	bls.n	80063f6 <find_volume+0xba>
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	3301      	adds	r3, #1
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d9db      	bls.n	80063ae <find_volume+0x72>
	return fmt;
 80063f6:	69bb      	ldr	r3, [r7, #24]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8006400:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006404:	b096      	sub	sp, #88	; 0x58
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	4613      	mov	r3, r2
 800640e:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fee8 	bl	80061ec <get_ldnumber>
 800641c:	63b8      	str	r0, [r7, #56]	; 0x38
	if (vol < 0) return FR_INVALID_DRIVE;
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	da01      	bge.n	8006428 <mount_volume+0x28>
 8006424:	230b      	movs	r3, #11
 8006426:	e320      	b.n	8006a6a <mount_volume+0x66a>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8006428:	4aaf      	ldr	r2, [pc, #700]	; (80066e8 <mount_volume+0x2e8>)
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <mount_volume+0x3c>
 8006438:	230c      	movs	r3, #12
 800643a:	e316      	b.n	8006a6a <mount_volume+0x66a>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006440:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01a      	beq.n	8006488 <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	4618      	mov	r0, r3
 8006458:	f7fc fe7a 	bl	8003150 <disk_status>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <mount_volume+0x84>
 8006474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <mount_volume+0x84>
				return FR_WRITE_PROTECTED;
 8006480:	230a      	movs	r3, #10
 8006482:	e2f2      	b.n	8006a6a <mount_volume+0x66a>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8006484:	2300      	movs	r3, #0
 8006486:	e2f0      	b.n	8006a6a <mount_volume+0x66a>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find a FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	b2da      	uxtb	r2, r3
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8006496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	4618      	mov	r0, r3
 800649c:	f7fc fd7e 	bl	8002f9c <disk_initialize>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80064a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <mount_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80064b2:	2303      	movs	r3, #3
 80064b4:	e2d9      	b.n	8006a6a <mount_volume+0x66a>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <mount_volume+0xcc>
 80064bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <mount_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80064c8:	230a      	movs	r3, #10
 80064ca:	e2ce      	b.n	8006a6a <mount_volume+0x66a>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
 80064cc:	2100      	movs	r1, #0
 80064ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064d0:	f7ff ff34 	bl	800633c <find_volume>
 80064d4:	64b8      	str	r0, [r7, #72]	; 0x48
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80064d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d101      	bne.n	80064e0 <mount_volume+0xe0>
 80064dc:	2301      	movs	r3, #1
 80064de:	e2c4      	b.n	8006a6a <mount_volume+0x66a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80064e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d901      	bls.n	80064ea <mount_volume+0xea>
 80064e6:	230d      	movs	r3, #13
 80064e8:	e2bf      	b.n	8006a6a <mount_volume+0x66a>
	bsect = fs->winsect;					/* Volume location */
 80064ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 80064f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	f040 813b 	bne.w	800676e <mount_volume+0x36e>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80064f8:	230b      	movs	r3, #11
 80064fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064fc:	e002      	b.n	8006504 <mount_volume+0x104>
 80064fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006500:	3301      	adds	r3, #1
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006506:	2b3f      	cmp	r3, #63	; 0x3f
 8006508:	d806      	bhi.n	8006518 <mount_volume+0x118>
 800650a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800650c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650e:	4413      	add	r3, r2
 8006510:	333c      	adds	r3, #60	; 0x3c
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f2      	beq.n	80064fe <mount_volume+0xfe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8006518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651a:	2b3f      	cmp	r3, #63	; 0x3f
 800651c:	d801      	bhi.n	8006522 <mount_volume+0x122>
 800651e:	230d      	movs	r3, #13
 8006520:	e2a3      	b.n	8006a6a <mount_volume+0x66a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 8006522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006524:	333c      	adds	r3, #60	; 0x3c
 8006526:	3368      	adds	r3, #104	; 0x68
 8006528:	4618      	mov	r0, r3
 800652a:	f7fd f8a1 	bl	8003670 <ld_word>
 800652e:	4603      	mov	r3, r0
 8006530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006534:	d001      	beq.n	800653a <mount_volume+0x13a>
 8006536:	230d      	movs	r3, #13
 8006538:	e297      	b.n	8006a6a <mount_volume+0x66a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800653a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8006540:	2b09      	cmp	r3, #9
 8006542:	d001      	beq.n	8006548 <mount_volume+0x148>
			return FR_NO_FILESYSTEM;
 8006544:	230d      	movs	r3, #13
 8006546:	e290      	b.n	8006a6a <mount_volume+0x66a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	333c      	adds	r3, #60	; 0x3c
 800654c:	3348      	adds	r3, #72	; 0x48
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd f8c7 	bl	80036e2 <ld_qword>
 8006554:	460a      	mov	r2, r1
 8006556:	4601      	mov	r1, r0
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	469b      	mov	fp, r3
 800655c:	f04f 0c00 	mov.w	ip, #0
 8006560:	eb1b 0301 	adds.w	r3, fp, r1
 8006564:	eb4c 0402 	adc.w	r4, ip, r2
 8006568:	e9c7 3406 	strd	r3, r4, [r7, #24]
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800656c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006570:	2c01      	cmp	r4, #1
 8006572:	bf08      	it	eq
 8006574:	2b00      	cmpeq	r3, #0
 8006576:	d301      	bcc.n	800657c <mount_volume+0x17c>
 8006578:	230d      	movs	r3, #13
 800657a:	e276      	b.n	8006a6a <mount_volume+0x66a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	333c      	adds	r3, #60	; 0x3c
 8006580:	3354      	adds	r3, #84	; 0x54
 8006582:	4618      	mov	r0, r3
 8006584:	f7fd f88b 	bl	800369e <ld_dword>
 8006588:	4602      	mov	r2, r0
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8006594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006596:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659a:	789b      	ldrb	r3, [r3, #2]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d001      	beq.n	80065a4 <mount_volume+0x1a4>
 80065a0:	230d      	movs	r3, #13
 80065a2:	e262      	b.n	8006a6a <mount_volume+0x66a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80065aa:	461a      	mov	r2, r3
 80065ac:	2301      	movs	r3, #1
 80065ae:	4093      	lsls	r3, r2
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80065b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b8:	895b      	ldrh	r3, [r3, #10]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <mount_volume+0x1c2>
 80065be:	230d      	movs	r3, #13
 80065c0:	e253      	b.n	8006a6a <mount_volume+0x66a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80065c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c4:	333c      	adds	r3, #60	; 0x3c
 80065c6:	335c      	adds	r3, #92	; 0x5c
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fd f868 	bl	800369e <ld_dword>
 80065ce:	6238      	str	r0, [r7, #32]
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	4a46      	ldr	r2, [pc, #280]	; (80066ec <mount_volume+0x2ec>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d901      	bls.n	80065dc <mount_volume+0x1dc>
 80065d8:	230d      	movs	r3, #13
 80065da:	e246      	b.n	8006a6a <mount_volume+0x66a>
		fs->n_fatent = nclst + 2;
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	1c9a      	adds	r2, r3, #2
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e2:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80065ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ec:	333c      	adds	r3, #60	; 0x3c
 80065ee:	3358      	adds	r3, #88	; 0x58
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fd f854 	bl	800369e <ld_dword>
 80065f6:	4602      	mov	r2, r0
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	441a      	add	r2, r3
 80065fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8006600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006602:	333c      	adds	r3, #60	; 0x3c
 8006604:	3350      	adds	r3, #80	; 0x50
 8006606:	4618      	mov	r0, r3
 8006608:	f7fd f849 	bl	800369e <ld_dword>
 800660c:	4602      	mov	r2, r0
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	441a      	add	r2, r3
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8006616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	4619      	mov	r1, r3
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006622:	895b      	ldrh	r3, [r3, #10]
 8006624:	4618      	mov	r0, r3
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	fb03 f300 	mul.w	r3, r3, r0
 800662c:	469b      	mov	fp, r3
 800662e:	f04f 0c00 	mov.w	ip, #0
 8006632:	eb1b 0301 	adds.w	r3, fp, r1
 8006636:	eb4c 0402 	adc.w	r4, ip, r2
 800663a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800663e:	42a2      	cmp	r2, r4
 8006640:	bf08      	it	eq
 8006642:	4299      	cmpeq	r1, r3
 8006644:	d201      	bcs.n	800664a <mount_volume+0x24a>
 8006646:	230d      	movs	r3, #13
 8006648:	e20f      	b.n	8006a6a <mount_volume+0x66a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	333c      	adds	r3, #60	; 0x3c
 800664e:	3360      	adds	r3, #96	; 0x60
 8006650:	4618      	mov	r0, r3
 8006652:	f7fd f824 	bl	800369e <ld_dword>
 8006656:	4602      	mov	r2, r0
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006662:	647b      	str	r3, [r7, #68]	; 0x44
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 8006664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d11c      	bne.n	80066a4 <mount_volume+0x2a4>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	895b      	ldrh	r3, [r3, #10]
 800666e:	461a      	mov	r2, r3
 8006670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006672:	4293      	cmp	r3, r2
 8006674:	d301      	bcc.n	800667a <mount_volume+0x27a>
 8006676:	230d      	movs	r3, #13
 8006678:	e1f7      	b.n	8006a6a <mount_volume+0x66a>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	4619      	mov	r1, r3
 8006680:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006682:	f7fd fba9 	bl	8003dd8 <clst2sect>
 8006686:	4602      	mov	r2, r0
 8006688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668a:	4413      	add	r3, r2
 800668c:	4619      	mov	r1, r3
 800668e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006690:	f7fd fb06 	bl	8003ca0 <move_window>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <mount_volume+0x29e>
 800669a:	2301      	movs	r3, #1
 800669c:	e1e5      	b.n	8006a6a <mount_volume+0x66a>
				so++;
 800669e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a0:	3301      	adds	r3, #1
 80066a2:	647b      	str	r3, [r7, #68]	; 0x44
			}
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 80066a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a8:	4413      	add	r3, r2
 80066aa:	333c      	adds	r3, #60	; 0x3c
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b81      	cmp	r3, #129	; 0x81
 80066b0:	d005      	beq.n	80066be <mount_volume+0x2be>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 80066b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b4:	3320      	adds	r3, #32
 80066b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ba:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (i == 0) {
 80066bc:	e7d2      	b.n	8006664 <mount_volume+0x264>
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 80066be:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 80066c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80066c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c8:	3314      	adds	r3, #20
 80066ca:	4413      	add	r3, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fc ffe6 	bl	800369e <ld_dword>
 80066d2:	6438      	str	r0, [r7, #64]	; 0x40
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 80066d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d904      	bls.n	80066e4 <mount_volume+0x2e4>
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d305      	bcc.n	80066f0 <mount_volume+0x2f0>
 80066e4:	230d      	movs	r3, #13
 80066e6:	e1c0      	b.n	8006a6a <mount_volume+0x66a>
 80066e8:	20000040 	.word	0x20000040
 80066ec:	7ffffffd 	.word	0x7ffffffd
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f6:	895b      	ldrh	r3, [r3, #10]
 80066f8:	4619      	mov	r1, r3
 80066fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fc:	3b02      	subs	r3, #2
 80066fe:	fb03 f301 	mul.w	r3, r3, r1
 8006702:	441a      	add	r2, r3
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	635a      	str	r2, [r3, #52]	; 0x34
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800670c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670e:	09db      	lsrs	r3, r3, #7
 8006710:	4413      	add	r3, r2
 8006712:	4619      	mov	r1, r3
 8006714:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006716:	f7fd fac3 	bl	8003ca0 <move_window>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <mount_volume+0x324>
 8006720:	2301      	movs	r3, #1
 8006722:	e1a2      	b.n	8006a6a <mount_volume+0x66a>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 8006724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006726:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800672a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f7fc ffb2 	bl	800369e <ld_dword>
 800673a:	6178      	str	r0, [r7, #20]
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d008      	beq.n	8006756 <mount_volume+0x356>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 8006744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006746:	3301      	adds	r3, #1
 8006748:	643b      	str	r3, [r7, #64]	; 0x40
 800674a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	429a      	cmp	r2, r3
 8006750:	d0da      	beq.n	8006708 <mount_volume+0x308>
 8006752:	230d      	movs	r3, #13
 8006754:	e189      	b.n	8006a6a <mount_volume+0x66a>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8006756:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	619a      	str	r2, [r3, #24]
 8006760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006762:	699a      	ldr	r2, [r3, #24]
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8006768:	2304      	movs	r3, #4
 800676a:	64bb      	str	r3, [r7, #72]	; 0x48
 800676c:	e168      	b.n	8006a40 <mount_volume+0x640>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800676e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006770:	333c      	adds	r3, #60	; 0x3c
 8006772:	330b      	adds	r3, #11
 8006774:	4618      	mov	r0, r3
 8006776:	f7fc ff7b 	bl	8003670 <ld_word>
 800677a:	4603      	mov	r3, r0
 800677c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006780:	d001      	beq.n	8006786 <mount_volume+0x386>
 8006782:	230d      	movs	r3, #13
 8006784:	e171      	b.n	8006a6a <mount_volume+0x66a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006788:	333c      	adds	r3, #60	; 0x3c
 800678a:	3316      	adds	r3, #22
 800678c:	4618      	mov	r0, r3
 800678e:	f7fc ff6f 	bl	8003670 <ld_word>
 8006792:	4603      	mov	r3, r0
 8006794:	653b      	str	r3, [r7, #80]	; 0x50
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <mount_volume+0x3aa>
 800679c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679e:	333c      	adds	r3, #60	; 0x3c
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fc ff7b 	bl	800369e <ld_dword>
 80067a8:	6538      	str	r0, [r7, #80]	; 0x50
		fs->fsize = fasize;
 80067aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067ae:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	789b      	ldrb	r3, [r3, #2]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d005      	beq.n	80067ce <mount_volume+0x3ce>
 80067c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c4:	789b      	ldrb	r3, [r3, #2]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d001      	beq.n	80067ce <mount_volume+0x3ce>
 80067ca:	230d      	movs	r3, #13
 80067cc:	e14d      	b.n	8006a6a <mount_volume+0x66a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d0:	789b      	ldrb	r3, [r3, #2]
 80067d2:	461a      	mov	r2, r3
 80067d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	653b      	str	r3, [r7, #80]	; 0x50

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80067dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067de:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80067e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ea:	895b      	ldrh	r3, [r3, #10]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <mount_volume+0x402>
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	895b      	ldrh	r3, [r3, #10]
 80067f4:	461a      	mov	r2, r3
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	895b      	ldrh	r3, [r3, #10]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <mount_volume+0x406>
 8006802:	230d      	movs	r3, #13
 8006804:	e131      	b.n	8006a6a <mount_volume+0x66a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006808:	333c      	adds	r3, #60	; 0x3c
 800680a:	3311      	adds	r3, #17
 800680c:	4618      	mov	r0, r3
 800680e:	f7fc ff2f 	bl	8003670 <ld_word>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	891b      	ldrh	r3, [r3, #8]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <mount_volume+0x42c>
 8006828:	230d      	movs	r3, #13
 800682a:	e11e      	b.n	8006a6a <mount_volume+0x66a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682e:	333c      	adds	r3, #60	; 0x3c
 8006830:	3313      	adds	r3, #19
 8006832:	4618      	mov	r0, r3
 8006834:	f7fc ff1c 	bl	8003670 <ld_word>
 8006838:	4603      	mov	r3, r0
 800683a:	657b      	str	r3, [r7, #84]	; 0x54
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800683c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <mount_volume+0x450>
 8006842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006844:	333c      	adds	r3, #60	; 0x3c
 8006846:	3320      	adds	r3, #32
 8006848:	4618      	mov	r0, r3
 800684a:	f7fc ff28 	bl	800369e <ld_dword>
 800684e:	6578      	str	r0, [r7, #84]	; 0x54

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	333c      	adds	r3, #60	; 0x3c
 8006854:	330e      	adds	r3, #14
 8006856:	4618      	mov	r0, r3
 8006858:	f7fc ff0a 	bl	8003670 <ld_word>
 800685c:	4603      	mov	r3, r0
 800685e:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006860:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <mount_volume+0x46a>
 8006866:	230d      	movs	r3, #13
 8006868:	e0ff      	b.n	8006a6a <mount_volume+0x66a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800686a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800686c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686e:	4413      	add	r3, r2
 8006870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006872:	8912      	ldrh	r2, [r2, #8]
 8006874:	0912      	lsrs	r2, r2, #4
 8006876:	b292      	uxth	r2, r2
 8006878:	4413      	add	r3, r2
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800687c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	429a      	cmp	r2, r3
 8006882:	d201      	bcs.n	8006888 <mount_volume+0x488>
 8006884:	230d      	movs	r3, #13
 8006886:	e0f0      	b.n	8006a6a <mount_volume+0x66a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006890:	8952      	ldrh	r2, [r2, #10]
 8006892:	fbb3 f3f2 	udiv	r3, r3, r2
 8006896:	623b      	str	r3, [r7, #32]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <mount_volume+0x4a2>
 800689e:	230d      	movs	r3, #13
 80068a0:	e0e3      	b.n	8006a6a <mount_volume+0x66a>
		fmt = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	4a72      	ldr	r2, [pc, #456]	; (8006a74 <mount_volume+0x674>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d801      	bhi.n	80068b2 <mount_volume+0x4b2>
 80068ae:	2303      	movs	r3, #3
 80068b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d801      	bhi.n	80068c0 <mount_volume+0x4c0>
 80068bc:	2302      	movs	r3, #2
 80068be:	64bb      	str	r3, [r7, #72]	; 0x48
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d801      	bhi.n	80068ce <mount_volume+0x4ce>
 80068ca:	2301      	movs	r3, #1
 80068cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (fmt == 0) return FR_NO_FILESYSTEM;
 80068ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <mount_volume+0x4d8>
 80068d4:	230d      	movs	r3, #13
 80068d6:	e0c8      	b.n	8006a6a <mount_volume+0x66a>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	1c9a      	adds	r2, r3, #2
 80068dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068de:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80068e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80068e6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	441a      	add	r2, r3
 80068ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80068f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	441a      	add	r2, r3
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80068fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d11e      	bne.n	800693e <mount_volume+0x53e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006902:	333c      	adds	r3, #60	; 0x3c
 8006904:	332a      	adds	r3, #42	; 0x2a
 8006906:	4618      	mov	r0, r3
 8006908:	f7fc feb2 	bl	8003670 <ld_word>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <mount_volume+0x516>
 8006912:	230d      	movs	r3, #13
 8006914:	e0a9      	b.n	8006a6a <mount_volume+0x66a>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	891b      	ldrh	r3, [r3, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <mount_volume+0x522>
 800691e:	230d      	movs	r3, #13
 8006920:	e0a3      	b.n	8006a6a <mount_volume+0x66a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	333c      	adds	r3, #60	; 0x3c
 8006926:	332c      	adds	r3, #44	; 0x2c
 8006928:	4618      	mov	r0, r3
 800692a:	f7fc feb8 	bl	800369e <ld_dword>
 800692e:	4602      	mov	r2, r0
 8006930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006932:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800693c:	e01e      	b.n	800697c <mount_volume+0x57c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800693e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006940:	891b      	ldrh	r3, [r3, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <mount_volume+0x54a>
 8006946:	230d      	movs	r3, #13
 8006948:	e08f      	b.n	8006a6a <mount_volume+0x66a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800694e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006950:	441a      	add	r2, r3
 8006952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006954:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006958:	2b02      	cmp	r3, #2
 800695a:	d103      	bne.n	8006964 <mount_volume+0x564>
 800695c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	e00a      	b.n	800697a <mount_volume+0x57a>
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	4613      	mov	r3, r2
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	4413      	add	r3, r2
 800696e:	085a      	lsrs	r2, r3, #1
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800697a:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006982:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006986:	0a5b      	lsrs	r3, r3, #9
 8006988:	429a      	cmp	r2, r3
 800698a:	d201      	bcs.n	8006990 <mount_volume+0x590>
 800698c:	230d      	movs	r3, #13
 800698e:	e06c      	b.n	8006a6a <mount_volume+0x66a>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	619a      	str	r2, [r3, #24]
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80069a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a2:	2280      	movs	r2, #128	; 0x80
 80069a4:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80069a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d149      	bne.n	8006a40 <mount_volume+0x640>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	333c      	adds	r3, #60	; 0x3c
 80069b0:	3330      	adds	r3, #48	; 0x30
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fc fe5c 	bl	8003670 <ld_word>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d140      	bne.n	8006a40 <mount_volume+0x640>
			&& move_window(fs, bsect + 1) == FR_OK)
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	3301      	adds	r3, #1
 80069c2:	4619      	mov	r1, r3
 80069c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80069c6:	f7fd f96b 	bl	8003ca0 <move_window>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d137      	bne.n	8006a40 <mount_volume+0x640>
		{
			fs->fsi_flag = 0;
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	2200      	movs	r2, #0
 80069d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	333c      	adds	r3, #60	; 0x3c
 80069da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fc fe46 	bl	8003670 <ld_word>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d127      	bne.n	8006a40 <mount_volume+0x640>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	333c      	adds	r3, #60	; 0x3c
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fc fe52 	bl	800369e <ld_dword>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4b1e      	ldr	r3, [pc, #120]	; (8006a78 <mount_volume+0x678>)
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d11e      	bne.n	8006a40 <mount_volume+0x640>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a04:	333c      	adds	r3, #60	; 0x3c
 8006a06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fc fe47 	bl	800369e <ld_dword>
 8006a10:	4602      	mov	r2, r0
 8006a12:	4b1a      	ldr	r3, [pc, #104]	; (8006a7c <mount_volume+0x67c>)
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d113      	bne.n	8006a40 <mount_volume+0x640>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1a:	333c      	adds	r3, #60	; 0x3c
 8006a1c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fc fe3c 	bl	800369e <ld_dword>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	333c      	adds	r3, #60	; 0x3c
 8006a30:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fc fe32 	bl	800369e <ld_dword>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 8006a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <mount_volume+0x680>)
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <mount_volume+0x680>)
 8006a52:	801a      	strh	r2, [r3, #0]
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <mount_volume+0x680>)
 8006a56:	881a      	ldrh	r2, [r3, #0]
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <mount_volume+0x684>)
 8006a60:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <mount_volume+0x688>)
 8006a66:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3758      	adds	r7, #88	; 0x58
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006a74:	0ffffff5 	.word	0x0ffffff5
 8006a78:	41615252 	.word	0x41615252
 8006a7c:	61417272 	.word	0x61417272
 8006a80:	20000044 	.word	0x20000044
 8006a84:	200002a8 	.word	0x200002a8
 8006a88:	20000048 	.word	0x20000048

08006a8c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006a96:	2309      	movs	r3, #9
 8006a98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01c      	beq.n	8006ada <validate+0x4e>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d018      	beq.n	8006ada <validate+0x4e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d013      	beq.n	8006ada <validate+0x4e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	889a      	ldrh	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	88db      	ldrh	r3, [r3, #6]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d10c      	bne.n	8006ada <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fc fb42 	bl	8003150 <disk_status>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <validate+0x4e>
			res = FR_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <validate+0x5a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	e000      	b.n	8006ae8 <validate+0x5c>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	6013      	str	r3, [r2, #0]
	return res;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006b0a:	f107 0310 	add.w	r3, r7, #16
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff fb6c 	bl	80061ec <get_ldnumber>
 8006b14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	da01      	bge.n	8006b20 <f_mount+0x28>
 8006b1c:	230b      	movs	r3, #11
 8006b1e:	e025      	b.n	8006b6c <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006b20:	4a14      	ldr	r2, [pc, #80]	; (8006b74 <f_mount+0x7c>)
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	490b      	ldr	r1, [pc, #44]	; (8006b74 <f_mount+0x7c>)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <f_mount+0x5e>
 8006b52:	2300      	movs	r3, #0
 8006b54:	e00a      	b.n	8006b6c <f_mount+0x74>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006b56:	f107 010c 	add.w	r1, r7, #12
 8006b5a:	f107 0308 	add.w	r3, r7, #8
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fc4d 	bl	8006400 <mount_volume>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000040 	.word	0x20000040

08006b78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006b78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006b7c:	b0a2      	sub	sp, #136	; 0x88
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	4613      	mov	r3, r2
 8006b86:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <f_open+0x1a>
 8006b8e:	2309      	movs	r3, #9
 8006b90:	e218      	b.n	8006fc4 <f_open+0x44c>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b98:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8006b9a:	79fa      	ldrb	r2, [r7, #7]
 8006b9c:	f107 0114 	add.w	r1, r7, #20
 8006ba0:	f107 0308 	add.w	r3, r7, #8
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fc2b 	bl	8006400 <mount_volume>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 8006bb0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 81fc 	bne.w	8006fb2 <f_open+0x43a>
		dj.obj.fs = fs;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	f107 0318 	add.w	r3, r7, #24
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fa80 	bl	80060cc <follow_path>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8006bd2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d107      	bne.n	8006bea <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006bda:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006bde:	b25b      	sxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da02      	bge.n	8006bea <f_open+0x72>
				res = FR_INVALID_NAME;
 8006be4:	2306      	movs	r3, #6
 8006be6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	f003 031c 	and.w	r3, r3, #28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80c0 	beq.w	8006d76 <f_open+0x1fe>
			if (res != FR_OK) {					/* No file, create new */
 8006bf6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d010      	beq.n	8006c20 <f_open+0xa8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006bfe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d107      	bne.n	8006c16 <f_open+0x9e>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8006c06:	f107 0318 	add.w	r3, r7, #24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe feda 	bl	80059c4 <dir_register>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	f043 0308 	orr.w	r3, r3, #8
 8006c1c:	71fb      	strb	r3, [r7, #7]
 8006c1e:	e010      	b.n	8006c42 <f_open+0xca>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006c20:	7fbb      	ldrb	r3, [r7, #30]
 8006c22:	f003 0311 	and.w	r3, r3, #17
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <f_open+0xba>
					res = FR_DENIED;
 8006c2a:	2307      	movs	r3, #7
 8006c2c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006c30:	e007      	b.n	8006c42 <f_open+0xca>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <f_open+0xca>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006c42:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f040 80af 	bne.w	8006daa <f_open+0x232>
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80a9 	beq.w	8006daa <f_open+0x232>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d149      	bne.n	8006cf4 <f_open+0x17c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fb8d 	bl	800538c <init_alloc_info>
					/* Set directory entry block initial state */
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	3302      	adds	r3, #2
 8006c78:	221e      	movs	r2, #30
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fc fed9 	bl	8003a34 <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	3326      	adds	r3, #38	; 0x26
 8006c88:	221a      	movs	r2, #26
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fc fed1 	bl	8003a34 <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	3304      	adds	r3, #4
 8006c98:	2220      	movs	r2, #32
 8006c9a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	49b3      	ldr	r1, [pc, #716]	; (8006f70 <f_open+0x3f8>)
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fc fdf3 	bl	8003890 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	3321      	adds	r3, #33	; 0x21
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8006cb4:	f107 0318 	add.w	r3, r7, #24
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe fbd0 	bl	800545e <store_xdir>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 8006cc4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d16e      	bne.n	8006daa <f_open+0x232>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d06a      	beq.n	8006daa <f_open+0x232>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f7fd fbfb 	bl	80044d8 <remove_chain>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	3a01      	subs	r2, #1
 8006cf0:	615a      	str	r2, [r3, #20]
 8006cf2:	e05a      	b.n	8006daa <f_open+0x232>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fd ffd8 	bl	8004cb0 <ld_clust>
 8006d00:	6778      	str	r0, [r7, #116]	; 0x74
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8006d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d04:	330e      	adds	r3, #14
 8006d06:	499a      	ldr	r1, [pc, #616]	; (8006f70 <f_open+0x3f8>)
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fc fdc1 	bl	8003890 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d10:	330b      	adds	r3, #11
 8006d12:	2220      	movs	r2, #32
 8006d14:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fd ffe6 	bl	8004cee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d24:	331c      	adds	r3, #28
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fc fdb1 	bl	8003890 <st_dword>
					fs->wflag = 1;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2201      	movs	r2, #1
 8006d32:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d037      	beq.n	8006daa <f_open+0x232>
						sc = fs->winsect;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	673b      	str	r3, [r7, #112]	; 0x70
						res = remove_chain(&dj.obj, cl, 0);
 8006d40:	f107 0318 	add.w	r3, r7, #24
 8006d44:	2200      	movs	r2, #0
 8006d46:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fd fbc5 	bl	80044d8 <remove_chain>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8006d54:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d126      	bne.n	8006daa <f_open+0x232>
							res = move_window(fs, sc);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fc ff9d 	bl	8003ca0 <move_window>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006d70:	3a01      	subs	r2, #1
 8006d72:	615a      	str	r2, [r3, #20]
 8006d74:	e019      	b.n	8006daa <f_open+0x232>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8006d76:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d115      	bne.n	8006daa <f_open+0x232>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006d7e:	7fbb      	ldrb	r3, [r7, #30]
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <f_open+0x218>
					res = FR_NO_FILE;
 8006d88:	2304      	movs	r3, #4
 8006d8a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006d8e:	e00c      	b.n	8006daa <f_open+0x232>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d007      	beq.n	8006daa <f_open+0x232>
 8006d9a:	7fbb      	ldrb	r3, [r7, #30]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <f_open+0x232>
						res = FR_DENIED;
 8006da4:	2307      	movs	r3, #7
 8006da6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 8006daa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10f      	bne.n	8006dd2 <f_open+0x25a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <f_open+0x24c>
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8006dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	64da      	str	r2, [r3, #76]	; 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006dd2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f040 80eb 	bne.w	8006fb2 <f_open+0x43a>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d114      	bne.n	8006e0e <f_open+0x296>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8006de4:	6a3a      	ldr	r2, [r7, #32]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8006dea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006df2:	7ffa      	ldrb	r2, [r7, #31]
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8006dfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4611      	mov	r1, r2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fac0 	bl	800538c <init_alloc_info>
 8006e0c:	e013      	b.n	8006e36 <f_open+0x2be>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e12:	4611      	mov	r1, r2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fd ff4b 	bl	8004cb0 <ld_clust>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e22:	331c      	adds	r3, #28
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fc fc3a 	bl	800369e <ld_dword>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f04f 0400 	mov.w	r4, #0
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	88da      	ldrh	r2, [r3, #6]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	79fa      	ldrb	r2, [r7, #7]
 8006e48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	f04f 0400 	mov.w	r4, #0
 8006e64:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3350      	adds	r3, #80	; 0x50
 8006e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fc fdde 	bl	8003a34 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 8097 	beq.w	8006fb2 <f_open+0x43a>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f103 0410 	add.w	r4, r3, #16
 8006e8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006e8e:	4323      	orrs	r3, r4
 8006e90:	f000 808f 	beq.w	8006fb2 <f_open+0x43a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f103 0410 	add.w	r4, r3, #16
 8006e9a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	895b      	ldrh	r3, [r3, #10]
 8006ea8:	025b      	lsls	r3, r3, #9
 8006eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f103 0410 	add.w	r4, r3, #16
 8006eba:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006ebe:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8006ec2:	e024      	b.n	8006f0e <f_open+0x396>
					clst = get_fat(&fp->obj, clst);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fc ffa2 	bl	8003e14 <get_fat>
 8006ed0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 8006ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d802      	bhi.n	8006ee2 <f_open+0x36a>
 8006edc:	2302      	movs	r3, #2
 8006ede:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d102      	bne.n	8006ef2 <f_open+0x37a>
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef4:	469b      	mov	fp, r3
 8006ef6:	f04f 0c00 	mov.w	ip, #0
 8006efa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006efe:	460b      	mov	r3, r1
 8006f00:	4614      	mov	r4, r2
 8006f02:	ebb3 030b 	subs.w	r3, r3, fp
 8006f06:	eb64 040c 	sbc.w	r4, r4, ip
 8006f0a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8006f0e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <f_open+0x3b2>
 8006f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f18:	4619      	mov	r1, r3
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006f22:	42a2      	cmp	r2, r4
 8006f24:	bf08      	it	eq
 8006f26:	4299      	cmpeq	r1, r3
 8006f28:	d3cc      	bcc.n	8006ec4 <f_open+0x34c>
				}
				fp->clust = clst;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f30:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006f32:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d13b      	bne.n	8006fb2 <f_open+0x43a>
 8006f3a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006f3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	ea03 0b01 	and.w	fp, r3, r1
 8006f4a:	ea04 0c02 	and.w	ip, r4, r2
 8006f4e:	ea5b 030c 	orrs.w	r3, fp, ip
 8006f52:	d02e      	beq.n	8006fb2 <f_open+0x43a>
					sc = clst2sect(fs, clst);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fc ff3c 	bl	8003dd8 <clst2sect>
 8006f60:	6738      	str	r0, [r7, #112]	; 0x70
					if (sc == 0) {
 8006f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d105      	bne.n	8006f74 <f_open+0x3fc>
						res = FR_INT_ERR;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006f6e:	e020      	b.n	8006fb2 <f_open+0x43a>
 8006f70:	4e210000 	.word	0x4e210000
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006f74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	f04f 0400 	mov.w	r4, #0
 8006f80:	0a4b      	lsrs	r3, r1, #9
 8006f82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006f86:	0a54      	lsrs	r4, r2, #9
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f8c:	441a      	add	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	645a      	str	r2, [r3, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	7858      	ldrb	r0, [r3, #1]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f7fc f8e9 	bl	8003178 <disk_read>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <f_open+0x43a>
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006fb2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <f_open+0x448>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006fc0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3788      	adds	r7, #136	; 0x88
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006fce:	bf00      	nop

08006fd0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006fd0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006fd4:	b08c      	sub	sp, #48	; 0x30
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f107 0210 	add.w	r2, r7, #16
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff fd4a 	bl	8006a8c <validate>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007002:	2b00      	cmp	r3, #0
 8007004:	d108      	bne.n	8007018 <f_write+0x48>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800700c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <f_write+0x4e>
 8007018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800701c:	e18d      	b.n	800733a <f_write+0x36a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <f_write+0x60>
 800702c:	2307      	movs	r3, #7
 800702e:	e184      	b.n	800733a <f_write+0x36a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b04      	cmp	r3, #4
 8007036:	f000 8170 	beq.w	800731a <f_write+0x34a>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8007040:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007044:	461a      	mov	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	441a      	add	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8007050:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007054:	429a      	cmp	r2, r3
 8007056:	f080 8160 	bcs.w	800731a <f_write+0x34a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8007060:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007064:	43db      	mvns	r3, r3
 8007066:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007068:	e157      	b.n	800731a <f_write+0x34a>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 8007070:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	ea0b 0301 	and.w	r3, fp, r1
 800707c:	ea0c 0402 	and.w	r4, ip, r2
 8007080:	4323      	orrs	r3, r4
 8007082:	f040 80f4 	bne.w	800726e <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	f04f 0400 	mov.w	r4, #0
 8007094:	0a4b      	lsrs	r3, r1, #9
 8007096:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800709a:	0a54      	lsrs	r4, r2, #9
 800709c:	461a      	mov	r2, r3
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	895b      	ldrh	r3, [r3, #10]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	4013      	ands	r3, r2
 80070a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d13c      	bne.n	8007128 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80070b4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80070b8:	4323      	orrs	r3, r4
 80070ba:	d10c      	bne.n	80070d6 <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10e      	bne.n	80070e6 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2100      	movs	r1, #0
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fd fae5 	bl	800469c <create_chain>
 80070d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80070d4:	e007      	b.n	80070e6 <f_write+0x116>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	4619      	mov	r1, r3
 80070de:	4610      	mov	r0, r2
 80070e0:	f7fd fadc 	bl	800469c <create_chain>
 80070e4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 811b 	beq.w	8007324 <f_write+0x354>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d105      	bne.n	8007100 <f_write+0x130>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80070fc:	2302      	movs	r3, #2
 80070fe:	e11c      	b.n	800733a <f_write+0x36a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d105      	bne.n	8007114 <f_write+0x144>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007110:	2301      	movs	r3, #1
 8007112:	e112      	b.n	800733a <f_write+0x36a>
				fp->clust = clst;			/* Update current cluster */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007118:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <f_write+0x158>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007126:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800712e:	b25b      	sxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	da1b      	bge.n	800716c <f_write+0x19c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	7858      	ldrb	r0, [r3, #1]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007142:	2301      	movs	r3, #1
 8007144:	f7fc f880 	bl	8003248 <disk_write>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <f_write+0x18a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007156:	2301      	movs	r3, #1
 8007158:	e0ef      	b.n	800733a <f_write+0x36a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007164:	b2da      	uxtb	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7fc fe2f 	bl	8003dd8 <clst2sect>
 800717a:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d105      	bne.n	800718e <f_write+0x1be>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2202      	movs	r2, #2
 8007186:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800718a:	2302      	movs	r3, #2
 800718c:	e0d5      	b.n	800733a <f_write+0x36a>
			sect += csect;
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	4413      	add	r3, r2
 8007194:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	0a5b      	lsrs	r3, r3, #9
 800719a:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d03f      	beq.n	8007222 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	4413      	add	r3, r2
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	8952      	ldrh	r2, [r2, #10]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d905      	bls.n	80071bc <f_write+0x1ec>
					cc = fs->csize - csect;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	895b      	ldrh	r3, [r3, #10]
 80071b4:	461a      	mov	r2, r3
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	7858      	ldrb	r0, [r3, #1]
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	69f9      	ldr	r1, [r7, #28]
 80071c6:	f7fc f83f 	bl	8003248 <disk_write>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <f_write+0x20c>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80071d8:	2301      	movs	r3, #1
 80071da:	e0ae      	b.n	800733a <f_write+0x36a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d917      	bls.n	800721a <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	025b      	lsls	r3, r3, #9
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007202:	4619      	mov	r1, r3
 8007204:	f7fc fbf6 	bl	80039f4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800720e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007212:	b2da      	uxtb	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	025b      	lsls	r3, r3, #9
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007220:	e04e      	b.n	80072c0 <f_write+0x2f0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	429a      	cmp	r2, r3
 800722a:	d01d      	beq.n	8007268 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f103 0410 	add.w	r4, r3, #16
 8007238:	e9d4 3400 	ldrd	r3, r4, [r4]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800723c:	42a2      	cmp	r2, r4
 800723e:	bf08      	it	eq
 8007240:	4299      	cmpeq	r1, r3
 8007242:	d211      	bcs.n	8007268 <f_write+0x298>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	7858      	ldrb	r0, [r3, #1]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800724e:	2301      	movs	r3, #1
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	f7fb ff91 	bl	8003178 <disk_read>
 8007256:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007264:	2301      	movs	r3, #1
 8007266:	e068      	b.n	800733a <f_write+0x36a>
			}
#endif
			fp->sect = sect;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8007274:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	429a      	cmp	r2, r3
 8007288:	d901      	bls.n	800728e <f_write+0x2be>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800729a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	4413      	add	r3, r2
 80072a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a6:	69f9      	ldr	r1, [r7, #28]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fc fba3 	bl	80039f4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	441a      	add	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	4413      	add	r3, r2
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	469b      	mov	fp, r3
 80072e6:	f04f 0c00 	mov.w	ip, #0
 80072ea:	eb1b 0301 	adds.w	r3, fp, r1
 80072ee:	eb4c 0402 	adc.w	r4, ip, r2
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f103 0410 	add.w	r4, r3, #16
 80072fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8007308:	4294      	cmp	r4, r2
 800730a:	bf08      	it	eq
 800730c:	428b      	cmpeq	r3, r1
 800730e:	d201      	bcs.n	8007314 <f_write+0x344>
 8007310:	460b      	mov	r3, r1
 8007312:	4614      	mov	r4, r2
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	e9c2 3404 	strd	r3, r4, [r2, #16]
	for ( ;  btw;							/* Repeat until all data written */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f47f aea4 	bne.w	800706a <f_write+0x9a>
 8007322:	e000      	b.n	8007326 <f_write+0x356>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007324:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800732c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007330:	b2da      	uxtb	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3730      	adds	r7, #48	; 0x30
 800733e:	46bd      	mov	sp, r7
 8007340:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08007344 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007344:	b590      	push	{r4, r7, lr}
 8007346:	b09b      	sub	sp, #108	; 0x6c
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007352:	4611      	mov	r1, r2
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fb99 	bl	8006a8c <validate>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007360:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 810e 	bne.w	8007586 <f_sync+0x242>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8106 	beq.w	8007586 <f_sync+0x242>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007380:	b25b      	sxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	da17      	bge.n	80073b6 <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007388:	7858      	ldrb	r0, [r3, #1]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007394:	2301      	movs	r3, #1
 8007396:	f7fb ff57 	bl	8003248 <disk_write>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <f_sync+0x60>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e0f2      	b.n	800758a <f_sync+0x246>
				fp->flag &= (BYTE)~FA_DIRTY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80073b6:	4b77      	ldr	r3, [pc, #476]	; (8007594 <f_sync+0x250>)
 80073b8:	663b      	str	r3, [r7, #96]	; 0x60
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80073ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b04      	cmp	r3, #4
 80073c0:	f040 8094 	bne.w	80074ec <f_sync+0x1a8>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fd f826 	bl	8004418 <fill_first_frag>
 80073cc:	4603      	mov	r3, r0
 80073ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80073d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <f_sync+0xac>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	f04f 32ff 	mov.w	r2, #4294967295
 80073e4:	4619      	mov	r1, r3
 80073e6:	f7fd f846 	bl	8004476 <fill_last_frag>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 80073f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 80c6 	bne.w	8007586 <f_sync+0x242>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	f107 0308 	add.w	r3, r7, #8
 8007400:	4611      	mov	r1, r2
 8007402:	4618      	mov	r0, r3
 8007404:	f7fd ffeb 	bl	80053de <load_obj_xdir>
 8007408:	4603      	mov	r3, r0
 800740a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800740e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007412:	2b00      	cmp	r3, #0
 8007414:	f040 80b7 	bne.w	8007586 <f_sync+0x242>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8007418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	3304      	adds	r3, #4
 800741e:	781a      	ldrb	r2, [r3, #0]
 8007420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	3304      	adds	r3, #4
 8007426:	f042 0220 	orr.w	r2, r2, #32
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	79da      	ldrb	r2, [r3, #7]
 8007432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	3321      	adds	r3, #33	; 0x21
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 8007440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f7fc fa1e 	bl	8003890 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 8007454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f103 0410 	add.w	r4, r3, #16
 8007462:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007466:	461a      	mov	r2, r3
 8007468:	4623      	mov	r3, r4
 800746a:	4608      	mov	r0, r1
 800746c:	f7fc fa3b 	bl	80038e6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 8007470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f103 0410 	add.w	r4, r3, #16
 800747e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007482:	461a      	mov	r2, r3
 8007484:	4623      	mov	r3, r4
 8007486:	4608      	mov	r0, r1
 8007488:	f7fc fa2d 	bl	80038e6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800748c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	330c      	adds	r3, #12
 8007492:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007494:	4618      	mov	r0, r3
 8007496:	f7fc f9fb 	bl	8003890 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800749a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	3315      	adds	r3, #21
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80074a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	3310      	adds	r3, #16
 80074aa:	2100      	movs	r1, #0
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fc f9ef 	bl	8003890 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80074b2:	f107 0308 	add.w	r3, r7, #8
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fd ffd1 	bl	800545e <store_xdir>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80074c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d15d      	bne.n	8007586 <f_sync+0x242>
							res = sync_fs(fs);
 80074ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fc fc15 	bl	8003cfc <sync_fs>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80074ea:	e04c      	b.n	8007586 <f_sync+0x242>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80074ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f7fc fbd3 	bl	8003ca0 <move_window>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8007500:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007504:	2b00      	cmp	r3, #0
 8007506:	d13e      	bne.n	8007586 <f_sync+0x242>
					dir = fp->dir_ptr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750c:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800750e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007510:	330b      	adds	r3, #11
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007516:	330b      	adds	r3, #11
 8007518:	f042 0220 	orr.w	r2, r2, #32
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	461a      	mov	r2, r3
 800752a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800752c:	f7fd fbdf 	bl	8004cee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007532:	f103 021c 	add.w	r2, r3, #28
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f103 0410 	add.w	r4, r3, #16
 800753c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f7fc f9a4 	bl	8003890 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800754a:	3316      	adds	r3, #22
 800754c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800754e:	4618      	mov	r0, r3
 8007550:	f7fc f99e 	bl	8003890 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007556:	3312      	adds	r3, #18
 8007558:	2100      	movs	r1, #0
 800755a:	4618      	mov	r0, r3
 800755c:	f7fc f97e 	bl	800385c <st_word>
					fs->wflag = 1;
 8007560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007562:	2201      	movs	r2, #1
 8007564:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007568:	4618      	mov	r0, r3
 800756a:	f7fc fbc7 	bl	8003cfc <sync_fs>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800757a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800757e:	b2da      	uxtb	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007586:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800758a:	4618      	mov	r0, r3
 800758c:	376c      	adds	r7, #108	; 0x6c
 800758e:	46bd      	mov	sp, r7
 8007590:	bd90      	pop	{r4, r7, pc}
 8007592:	bf00      	nop
 8007594:	4e210000 	.word	0x4e210000

08007598 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff fecf 	bl	8007344 <f_sync>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10e      	bne.n	80075ce <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f107 0208 	add.w	r2, r7, #8
 80075b6:	4611      	mov	r1, r2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fa67 	bl	8006a8c <validate>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <ff_uni2oem>:
#if FF_CODE_PAGE >= 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80075d8:	b480      	push	{r7}
 80075da:	b08b      	sub	sp, #44	; 0x2c
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	807b      	strh	r3, [r7, #2]
	const WCHAR *p;
	WCHAR c = 0, uc;
 80075e4:	2300      	movs	r3, #0
 80075e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	UINT i = 0, n, li, hi;
 80075e8:	2300      	movs	r3, #0
 80075ea:	623b      	str	r3, [r7, #32]


	if (uni < 0x80) {	/* ASCII? */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b7f      	cmp	r3, #127	; 0x7f
 80075f0:	d802      	bhi.n	80075f8 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80075f6:	e041      	b.n	800767c <ff_uni2oem+0xa4>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fe:	d23d      	bcs.n	800767c <ff_uni2oem+0xa4>
 8007600:	887b      	ldrh	r3, [r7, #2]
 8007602:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 8007606:	d139      	bne.n	800767c <ff_uni2oem+0xa4>
			uc = (WCHAR)uni;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	827b      	strh	r3, [r7, #18]
			p = CVTBL(uni2oem, FF_CODE_PAGE);
 800760c:	4b1e      	ldr	r3, [pc, #120]	; (8007688 <ff_uni2oem+0xb0>)
 800760e:	60fb      	str	r3, [r7, #12]
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
 8007610:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8007614:	617b      	str	r3, [r7, #20]
			li = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	61bb      	str	r3, [r7, #24]
			for (n = 16; n; n--) {
 800761a:	2310      	movs	r3, #16
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	e01e      	b.n	800765e <ff_uni2oem+0x86>
				i = li + (hi - li) / 2;
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	4413      	add	r3, r2
 800762c:	623b      	str	r3, [r7, #32]
				if (uc == p[i * 2]) break;
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	8a7a      	ldrh	r2, [r7, #18]
 800763a:	429a      	cmp	r2, r3
 800763c:	d013      	beq.n	8007666 <ff_uni2oem+0x8e>
				if (uc > p[i * 2]) {
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	8a7a      	ldrh	r2, [r7, #18]
 800764a:	429a      	cmp	r2, r3
 800764c:	d902      	bls.n	8007654 <ff_uni2oem+0x7c>
					li = i;
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	e001      	b.n	8007658 <ff_uni2oem+0x80>
				} else {
					hi = i;
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	617b      	str	r3, [r7, #20]
			for (n = 16; n; n--) {
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	3b01      	subs	r3, #1
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1dd      	bne.n	8007620 <ff_uni2oem+0x48>
 8007664:	e000      	b.n	8007668 <ff_uni2oem+0x90>
				if (uc == p[i * 2]) break;
 8007666:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d006      	beq.n	800767c <ff_uni2oem+0xa4>
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	3302      	adds	r3, #2
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}

	return c;
 800767c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800767e:	4618      	mov	r0, r3
 8007680:	372c      	adds	r7, #44	; 0x2c
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr
 8007688:	08007894 	.word	0x08007894

0800768c <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800769a:	d27d      	bcs.n	8007798 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 80076a0:	8a7b      	ldrh	r3, [r7, #18]
 80076a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a6:	d201      	bcs.n	80076ac <ff_wtoupper+0x20>
 80076a8:	4b3e      	ldr	r3, [pc, #248]	; (80077a4 <ff_wtoupper+0x118>)
 80076aa:	e000      	b.n	80076ae <ff_wtoupper+0x22>
 80076ac:	4b3e      	ldr	r3, [pc, #248]	; (80077a8 <ff_wtoupper+0x11c>)
 80076ae:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	1c9a      	adds	r2, r3, #2
 80076b4:	617a      	str	r2, [r7, #20]
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 80076ba:	8a3b      	ldrh	r3, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d069      	beq.n	8007794 <ff_wtoupper+0x108>
 80076c0:	8a7a      	ldrh	r2, [r7, #18]
 80076c2:	8a3b      	ldrh	r3, [r7, #16]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d365      	bcc.n	8007794 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	1c9a      	adds	r2, r3, #2
 80076cc:	617a      	str	r2, [r7, #20]
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	81fb      	strh	r3, [r7, #14]
 80076d2:	89fb      	ldrh	r3, [r7, #14]
 80076d4:	0a1b      	lsrs	r3, r3, #8
 80076d6:	81bb      	strh	r3, [r7, #12]
 80076d8:	89fb      	ldrh	r3, [r7, #14]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 80076de:	8a7a      	ldrh	r2, [r7, #18]
 80076e0:	8a39      	ldrh	r1, [r7, #16]
 80076e2:	89fb      	ldrh	r3, [r7, #14]
 80076e4:	440b      	add	r3, r1
 80076e6:	429a      	cmp	r2, r3
 80076e8:	da4a      	bge.n	8007780 <ff_wtoupper+0xf4>
				switch (cmd) {
 80076ea:	89bb      	ldrh	r3, [r7, #12]
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d850      	bhi.n	8007792 <ff_wtoupper+0x106>
 80076f0:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <ff_wtoupper+0x6c>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	0800772f 	.word	0x0800772f
 8007700:	08007745 	.word	0x08007745
 8007704:	0800774d 	.word	0x0800774d
 8007708:	08007755 	.word	0x08007755
 800770c:	0800775d 	.word	0x0800775d
 8007710:	08007765 	.word	0x08007765
 8007714:	0800776d 	.word	0x0800776d
 8007718:	08007775 	.word	0x08007775
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 800771c:	8a7a      	ldrh	r2, [r7, #18]
 800771e:	8a3b      	ldrh	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	4413      	add	r3, r2
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	827b      	strh	r3, [r7, #18]
 800772c:	e027      	b.n	800777e <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 800772e:	8a7a      	ldrh	r2, [r7, #18]
 8007730:	8a3b      	ldrh	r3, [r7, #16]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	b29b      	uxth	r3, r3
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	b29b      	uxth	r3, r3
 800773c:	8a7a      	ldrh	r2, [r7, #18]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	827b      	strh	r3, [r7, #18]
 8007742:	e01c      	b.n	800777e <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 8007744:	8a7b      	ldrh	r3, [r7, #18]
 8007746:	3b10      	subs	r3, #16
 8007748:	827b      	strh	r3, [r7, #18]
 800774a:	e018      	b.n	800777e <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 800774c:	8a7b      	ldrh	r3, [r7, #18]
 800774e:	3b20      	subs	r3, #32
 8007750:	827b      	strh	r3, [r7, #18]
 8007752:	e014      	b.n	800777e <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8007754:	8a7b      	ldrh	r3, [r7, #18]
 8007756:	3b30      	subs	r3, #48	; 0x30
 8007758:	827b      	strh	r3, [r7, #18]
 800775a:	e010      	b.n	800777e <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 800775c:	8a7b      	ldrh	r3, [r7, #18]
 800775e:	3b1a      	subs	r3, #26
 8007760:	827b      	strh	r3, [r7, #18]
 8007762:	e00c      	b.n	800777e <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 8007764:	8a7b      	ldrh	r3, [r7, #18]
 8007766:	3308      	adds	r3, #8
 8007768:	827b      	strh	r3, [r7, #18]
 800776a:	e008      	b.n	800777e <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 800776c:	8a7b      	ldrh	r3, [r7, #18]
 800776e:	3b50      	subs	r3, #80	; 0x50
 8007770:	827b      	strh	r3, [r7, #18]
 8007772:	e004      	b.n	800777e <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8007774:	8a7b      	ldrh	r3, [r7, #18]
 8007776:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800777a:	827b      	strh	r3, [r7, #18]
 800777c:	bf00      	nop
				}
				break;
 800777e:	e008      	b.n	8007792 <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8007780:	89bb      	ldrh	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d194      	bne.n	80076b0 <ff_wtoupper+0x24>
 8007786:	89fb      	ldrh	r3, [r7, #14]
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4413      	add	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8007790:	e78e      	b.n	80076b0 <ff_wtoupper+0x24>
				break;
 8007792:	bf00      	nop
		}
		uni = uc;
 8007794:	8a7b      	ldrh	r3, [r7, #18]
 8007796:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8007798:	687b      	ldr	r3, [r7, #4]
}
 800779a:	4618      	mov	r0, r3
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr
 80077a4:	0800ec0c 	.word	0x0800ec0c
 80077a8:	0800ee00 	.word	0x0800ee00

080077ac <__libc_init_array>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	2500      	movs	r5, #0
 80077b0:	4e0c      	ldr	r6, [pc, #48]	; (80077e4 <__libc_init_array+0x38>)
 80077b2:	4c0d      	ldr	r4, [pc, #52]	; (80077e8 <__libc_init_array+0x3c>)
 80077b4:	1ba4      	subs	r4, r4, r6
 80077b6:	10a4      	asrs	r4, r4, #2
 80077b8:	42a5      	cmp	r5, r4
 80077ba:	d109      	bne.n	80077d0 <__libc_init_array+0x24>
 80077bc:	f000 f822 	bl	8007804 <_init>
 80077c0:	2500      	movs	r5, #0
 80077c2:	4e0a      	ldr	r6, [pc, #40]	; (80077ec <__libc_init_array+0x40>)
 80077c4:	4c0a      	ldr	r4, [pc, #40]	; (80077f0 <__libc_init_array+0x44>)
 80077c6:	1ba4      	subs	r4, r4, r6
 80077c8:	10a4      	asrs	r4, r4, #2
 80077ca:	42a5      	cmp	r5, r4
 80077cc:	d105      	bne.n	80077da <__libc_init_array+0x2e>
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077d4:	4798      	blx	r3
 80077d6:	3501      	adds	r5, #1
 80077d8:	e7ee      	b.n	80077b8 <__libc_init_array+0xc>
 80077da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077de:	4798      	blx	r3
 80077e0:	3501      	adds	r5, #1
 80077e2:	e7f2      	b.n	80077ca <__libc_init_array+0x1e>
 80077e4:	0800eebc 	.word	0x0800eebc
 80077e8:	0800eebc 	.word	0x0800eebc
 80077ec:	0800eebc 	.word	0x0800eebc
 80077f0:	0800eec0 	.word	0x0800eec0

080077f4 <memset>:
 80077f4:	4603      	mov	r3, r0
 80077f6:	4402      	add	r2, r0
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d100      	bne.n	80077fe <memset+0xa>
 80077fc:	4770      	bx	lr
 80077fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007802:	e7f9      	b.n	80077f8 <memset+0x4>

08007804 <_init>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	bf00      	nop
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr

08007810 <_fini>:
 8007810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007812:	bf00      	nop
 8007814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007816:	bc08      	pop	{r3}
 8007818:	469e      	mov	lr, r3
 800781a:	4770      	bx	lr
