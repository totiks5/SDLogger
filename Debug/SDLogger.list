
SDLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000076d4  08007d54  08007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f428  0800f428  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800f428  0800f428  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f428  0800f428  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f428  0800f428  0001f428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f42c  0800f42c  0001f42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800f430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000070  0800f4a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  0800f4a0  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127aa  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025de  00000000  00000000  00032843  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  00034e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00035f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195a1  00000000  00000000  00036fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e4f8  00000000  00000000  00050541  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000908b5  00000000  00000000  0005ea39  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef2ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c28  00000000  00000000  000ef36c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d3c 	.word	0x08007d3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08007d3c 	.word	0x08007d3c

0800014c <main>:
  */

char    buff[] = "Hello";

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	f5ad 6dd6 	sub.w	sp, sp, #1712	; 0x6b0
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fbec 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f86e 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f980 	bl	8000460 <MX_GPIO_Init>
  MX_DMA_Init();
 8000160:	f000 f958 	bl	8000414 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f92c 	bl	80003c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000168:	f000 f8de 	bl	8000328 <MX_TIM2_Init>
  MX_SPI1_Init();
 800016c:	f000 f8a6 	bl	80002bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  char buff2[512];
  char name[20];

  sprintf(name, "file %d.txt", 2);
 8000170:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000174:	2202      	movs	r2, #2
 8000176:	492c      	ldr	r1, [pc, #176]	; (8000228 <main+0xdc>)
 8000178:	4618      	mov	r0, r3
 800017a:	f007 f9c5 	bl	8007508 <siprintf>
  sprintf(buff2, "%s", name);
 800017e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8000182:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8000186:	4611      	mov	r1, r2
 8000188:	4618      	mov	r0, r3
 800018a:	f007 f9dd 	bl	8007548 <strcpy>

  HAL_TIM_Base_Start_IT( &htim2 );
 800018e:	4827      	ldr	r0, [pc, #156]	; (800022c <main+0xe0>)
 8000190:	f001 ff6a 	bl	8002068 <HAL_TIM_Base_Start_IT>

  HAL_Delay(10);
 8000194:	200a      	movs	r0, #10
 8000196:	f000 fc2d 	bl	80009f4 <HAL_Delay>

  FATFS FATFS_Obj;
  FIL file;
  UINT nRead, nWritten;

	 result = f_mount(&FATFS_Obj, "0", 1);
 800019a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800019e:	2201      	movs	r2, #1
 80001a0:	4923      	ldr	r1, [pc, #140]	; (8000230 <main+0xe4>)
 80001a2:	4618      	mov	r0, r3
 80001a4:	f006 fb24 	bl	80067f0 <f_mount>
 80001a8:	4603      	mov	r3, r0
 80001aa:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af
	 if (result != FR_OK)
 80001ae:	f897 36af 	ldrb.w	r3, [r7, #1711]	; 0x6af
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d003      	beq.n	80001be <main+0x72>
	 {
		 uint8_t dermo = 0;
 80001b6:	2300      	movs	r3, #0
 80001b8:	f887 36ae 	strb.w	r3, [r7, #1710]	; 0x6ae
 80001bc:	e009      	b.n	80001d2 <main+0x86>
			// printf("Ошибка монтирования диска %d\r\n", result);
	 }else{
		 result = f_mount(&FATFS_Obj, "0", 1);
 80001be:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80001c2:	2201      	movs	r2, #1
 80001c4:	491a      	ldr	r1, [pc, #104]	; (8000230 <main+0xe4>)
 80001c6:	4618      	mov	r0, r3
 80001c8:	f006 fb12 	bl	80067f0 <f_mount>
 80001cc:	4603      	mov	r3, r0
 80001ce:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af
	 }

	 // создаем файл write.txt
	 result = f_open(&file, name, FA_CREATE_ALWAYS | FA_WRITE);
 80001d2:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 80001d6:	f107 0308 	add.w	r3, r7, #8
 80001da:	220a      	movs	r2, #10
 80001dc:	4618      	mov	r0, r3
 80001de:	f006 fb47 	bl	8006870 <f_open>
 80001e2:	4603      	mov	r3, r0
 80001e4:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af
	 if (result == FR_OK)
 80001e8:	f897 36af 	ldrb.w	r3, [r7, #1711]	; 0x6af
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d110      	bne.n	8000212 <main+0xc6>
	 {
		 result = f_write(&file, &buff2, sizeof(buff2), &nWritten);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	f207 41ac 	addw	r1, r7, #1196	; 0x4ac
 80001f6:	f107 0008 	add.w	r0, r7, #8
 80001fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001fe:	f006 fd63 	bl	8006cc8 <f_write>
 8000202:	4603      	mov	r3, r0
 8000204:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af
		 f_close(&file);
 8000208:	f107 0308 	add.w	r3, r7, #8
 800020c:	4618      	mov	r0, r3
 800020e:	f007 f83f 	bl	8007290 <f_close>
	 }

	 if(result == FR_OK){
 8000212:	f897 36af 	ldrb.w	r3, [r7, #1711]	; 0x6af
 8000216:	2b00      	cmp	r3, #0
 8000218:	d105      	bne.n	8000226 <main+0xda>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <main+0xe8>)
 8000222:	f000 ffd1 	bl	80011c8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000226:	e7fe      	b.n	8000226 <main+0xda>
 8000228:	08007d54 	.word	0x08007d54
 800022c:	20000630 	.word	0x20000630
 8000230:	08007d60 	.word	0x08007d60
 8000234:	40011000 	.word	0x40011000

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f007 f956 	bl	80074f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	2310      	movs	r3, #16
 8000264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800026a:	2300      	movs	r3, #0
 800026c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800026e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	4618      	mov	r0, r3
 800027a:	f000 ffbd 	bl	80011f8 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000284:	f000 f964 	bl	8000550 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028c:	2302      	movs	r3, #2
 800028e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2101      	movs	r1, #1
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fa28 	bl	80016f8 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ae:	f000 f94f 	bl	8000550 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3740      	adds	r7, #64	; 0x40
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_SPI1_Init+0x64>)
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <MX_SPI1_Init+0x68>)
 80002c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <MX_SPI1_Init+0x64>)
 80002c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_SPI1_Init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_SPI1_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_SPI1_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_SPI1_Init+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_SPI1_Init+0x64>)
 80002e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_SPI1_Init+0x64>)
 80002f0:	2218      	movs	r2, #24
 80002f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <MX_SPI1_Init+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_SPI1_Init+0x64>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <MX_SPI1_Init+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_SPI1_Init+0x64>)
 8000308:	220a      	movs	r2, #10
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_SPI1_Init+0x64>)
 800030e:	f001 fb8f 	bl	8001a30 <HAL_SPI_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000318:	f000 f91a 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200005d8 	.word	0x200005d8
 8000324:	40013000 	.word	0x40013000

08000328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_TIM2_Init+0x94>)
 8000346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_TIM2_Init+0x94>)
 800034e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000352:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000354:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_TIM2_Init+0x94>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_TIM2_Init+0x94>)
 800035c:	2201      	movs	r2, #1
 800035e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_TIM2_Init+0x94>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_TIM2_Init+0x94>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <MX_TIM2_Init+0x94>)
 800036e:	f001 fe2b 	bl	8001fc8 <HAL_TIM_Base_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000378:	f000 f8ea 	bl	8000550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000380:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	4619      	mov	r1, r3
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <MX_TIM2_Init+0x94>)
 800038a:	f001 ffc7 	bl	800231c <HAL_TIM_ConfigClockSource>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000394:	f000 f8dc 	bl	8000550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000398:	2300      	movs	r3, #0
 800039a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_TIM2_Init+0x94>)
 80003a6:	f002 f98d 	bl	80026c4 <HAL_TIMEx_MasterConfigSynchronization>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003b0:	f000 f8ce 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3718      	adds	r7, #24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000630 	.word	0x20000630

080003c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_USART1_UART_Init+0x50>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f8:	f002 f9d4 	bl	80027a4 <HAL_UART_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000402:	f000 f8a5 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000598 	.word	0x20000598
 8000410:	40013800 	.word	0x40013800

08000414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_DMA_Init+0x48>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a0f      	ldr	r2, [pc, #60]	; (800045c <MX_DMA_Init+0x48>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <MX_DMA_Init+0x48>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	200e      	movs	r0, #14
 8000438:	f000 fbd5 	bl	8000be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800043c:	200e      	movs	r0, #14
 800043e:	f000 fbee 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	200f      	movs	r0, #15
 8000448:	f000 fbcd 	bl	8000be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800044c:	200f      	movs	r0, #15
 800044e:	f000 fbe6 	bl	8000c1e <HAL_NVIC_EnableIRQ>

}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0308 	add.w	r3, r7, #8
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000474:	4b21      	ldr	r3, [pc, #132]	; (80004fc <MX_GPIO_Init+0x9c>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a20      	ldr	r2, [pc, #128]	; (80004fc <MX_GPIO_Init+0x9c>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <MX_GPIO_Init+0x9c>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0310 	and.w	r3, r3, #16
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <MX_GPIO_Init+0x9c>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <MX_GPIO_Init+0x9c>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <MX_GPIO_Init+0x9c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004aa:	4815      	ldr	r0, [pc, #84]	; (8000500 <MX_GPIO_Init+0xa0>)
 80004ac:	f000 fe8c 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2110      	movs	r1, #16
 80004b4:	4813      	ldr	r0, [pc, #76]	; (8000504 <MX_GPIO_Init+0xa4>)
 80004b6:	f000 fe87 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	4619      	mov	r1, r3
 80004d2:	480b      	ldr	r0, [pc, #44]	; (8000500 <MX_GPIO_Init+0xa0>)
 80004d4:	f000 fd1e 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80004d8:	2310      	movs	r3, #16
 80004da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2302      	movs	r3, #2
 80004e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80004e8:	f107 0308 	add.w	r3, r7, #8
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_GPIO_Init+0xa4>)
 80004f0:	f000 fd10 	bl	8000f14 <HAL_GPIO_Init>

}
 80004f4:	bf00      	nop
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	40011000 	.word	0x40011000
 8000504:	40010800 	.word	0x40010800

08000508 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d108      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x22>
		tim_counter++;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	b29b      	uxth	r3, r3
 800051e:	3301      	adds	r3, #1
 8000520:	b29a      	uxth	r2, r3
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000524:	801a      	strh	r2, [r3, #0]
		//TODO: Поправити таймер для періоду 1мс
		disk_timerproc();
 8000526:	f002 fefb 	bl	8003320 <disk_timerproc>
	}

}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000630 	.word	0x20000630
 8000538:	2000008c 	.word	0x2000008c

0800053c <Get_SPI_HandleTypeDef>:

SPI_HandleTypeDef* Get_SPI_HandleTypeDef(){
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	return &hspi1;
 8000540:	4b02      	ldr	r3, [pc, #8]	; (800054c <Get_SPI_HandleTypeDef+0x10>)
}
 8000542:	4618      	mov	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	200005d8 	.word	0x200005d8

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <HAL_MspInit+0x5c>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <HAL_MspInit+0x5c>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_MspInit+0x5c>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x5c>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_MspInit+0x5c>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x5c>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_MspInit+0x60>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_MspInit+0x60>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010000 	.word	0x40010000

080005c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <HAL_SPI_MspInit+0x88>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d12f      	bne.n	8000640 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_SPI_MspInit+0x8c>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a19      	ldr	r2, [pc, #100]	; (800064c <HAL_SPI_MspInit+0x8c>)
 80005e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_SPI_MspInit+0x8c>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_SPI_MspInit+0x8c>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <HAL_SPI_MspInit+0x8c>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_SPI_MspInit+0x8c>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000618:	2303      	movs	r3, #3
 800061a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <HAL_SPI_MspInit+0x90>)
 8000624:	f000 fc76 	bl	8000f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <HAL_SPI_MspInit+0x90>)
 800063c:	f000 fc6a 	bl	8000f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40013000 	.word	0x40013000
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800

08000654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000664:	d113      	bne.n	800068e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <HAL_TIM_Base_MspInit+0x44>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <HAL_TIM_Base_MspInit+0x44>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_TIM_Base_MspInit+0x44>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	201c      	movs	r0, #28
 8000684:	f000 faaf 	bl	8000be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000688:	201c      	movs	r0, #28
 800068a:	f000 fac8 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a42      	ldr	r2, [pc, #264]	; (80007c0 <HAL_UART_MspInit+0x124>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d17d      	bne.n	80007b8 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006bc:	4b41      	ldr	r3, [pc, #260]	; (80007c4 <HAL_UART_MspInit+0x128>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a40      	ldr	r2, [pc, #256]	; (80007c4 <HAL_UART_MspInit+0x128>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b3e      	ldr	r3, [pc, #248]	; (80007c4 <HAL_UART_MspInit+0x128>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <HAL_UART_MspInit+0x128>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a3a      	ldr	r2, [pc, #232]	; (80007c4 <HAL_UART_MspInit+0x128>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <HAL_UART_MspInit+0x128>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4831      	ldr	r0, [pc, #196]	; (80007c8 <HAL_UART_MspInit+0x12c>)
 8000702:	f000 fc07 	bl	8000f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	482b      	ldr	r0, [pc, #172]	; (80007c8 <HAL_UART_MspInit+0x12c>)
 800071c:	f000 fbfa 	bl	8000f14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <HAL_UART_MspInit+0x130>)
 8000722:	4a2b      	ldr	r2, [pc, #172]	; (80007d0 <HAL_UART_MspInit+0x134>)
 8000724:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <HAL_UART_MspInit+0x130>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <HAL_UART_MspInit+0x130>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <HAL_UART_MspInit+0x130>)
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <HAL_UART_MspInit+0x130>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <HAL_UART_MspInit+0x130>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <HAL_UART_MspInit+0x130>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <HAL_UART_MspInit+0x130>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000750:	481e      	ldr	r0, [pc, #120]	; (80007cc <HAL_UART_MspInit+0x130>)
 8000752:	f000 fa7f 	bl	8000c54 <HAL_DMA_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800075c:	f7ff fef8 	bl	8000550 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <HAL_UART_MspInit+0x130>)
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <HAL_UART_MspInit+0x130>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_UART_MspInit+0x138>)
 800076e:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <HAL_UART_MspInit+0x13c>)
 8000770:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_UART_MspInit+0x138>)
 8000774:	2210      	movs	r2, #16
 8000776:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <HAL_UART_MspInit+0x138>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_MspInit+0x138>)
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <HAL_UART_MspInit+0x138>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_UART_MspInit+0x138>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_UART_MspInit+0x138>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_UART_MspInit+0x138>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <HAL_UART_MspInit+0x138>)
 800079e:	f000 fa59 	bl	8000c54 <HAL_DMA_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80007a8:	f7ff fed2 	bl	8000550 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <HAL_UART_MspInit+0x138>)
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_UART_MspInit+0x138>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40013800 	.word	0x40013800
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800
 80007cc:	20000554 	.word	0x20000554
 80007d0:	40020058 	.word	0x40020058
 80007d4:	20000510 	.word	0x20000510
 80007d8:	40020044 	.word	0x40020044

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <HardFault_Handler+0x4>

080007ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <MemManage_Handler+0x4>

080007f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <BusFault_Handler+0x4>

080007fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <UsageFault_Handler+0x4>

08000800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f8c8 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <DMA1_Channel4_IRQHandler+0x10>)
 8000836:	f000 fa67 	bl	8000d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000510 	.word	0x20000510

08000844 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <DMA1_Channel5_IRQHandler+0x10>)
 800084a:	f000 fa5d 	bl	8000d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000554 	.word	0x20000554

08000858 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <TIM2_IRQHandler+0x10>)
 800085e:	f001 fc55 	bl	800210c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000630 	.word	0x20000630

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f006 fe02 	bl	80074a4 <__errno>
 80008a0:	4602      	mov	r2, r0
 80008a2:	230c      	movs	r3, #12
 80008a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20005000 	.word	0x20005000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	20000090 	.word	0x20000090
 80008d4:	20000680 	.word	0x20000680

080008d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008e6:	e003      	b.n	80008f0 <LoopCopyDataInit>

080008e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008ee:	3104      	adds	r1, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008f0:	480a      	ldr	r0, [pc, #40]	; (800091c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008f8:	d3f6      	bcc.n	80008e8 <CopyDataInit>
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008fc:	e002      	b.n	8000904 <LoopFillZerobss>

080008fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000900:	f842 3b04 	str.w	r3, [r2], #4

08000904 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000906:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000908:	d3f9      	bcc.n	80008fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090a:	f7ff ffe5 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090e:	f006 fdcf 	bl	80074b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fc1b 	bl	800014c <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r3, =_sidata
 8000918:	0800f430 	.word	0x0800f430
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000920:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000924:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000928:	20000680 	.word	0x20000680

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f945 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	2000      	movs	r0, #0
 8000948:	f000 f808 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff fe06 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f95d 	bl	8000c3a <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f000 f925 	bl	8000be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_IncTick+0x20>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000678 	.word	0x20000678

080009e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000678 	.word	0x20000678

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff fff0 	bl	80009e0 <HAL_GetTick>
 8000a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d005      	beq.n	8000a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_Delay+0x40>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1a:	bf00      	nop
 8000a1c:	f7ff ffe0 	bl	80009e0 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f7      	bhi.n	8000a1c <HAL_Delay+0x28>
  {
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000008 	.word	0x20000008

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db0b      	blt.n	8000ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 021f 	and.w	r2, r3, #31
 8000ab4:	4906      	ldr	r1, [pc, #24]	; (8000ad0 <__NVIC_EnableIRQ+0x34>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	2001      	movs	r0, #1
 8000abe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b9c:	d301      	bcc.n	8000ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00f      	b.n	8000bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <SysTick_Config+0x40>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000baa:	210f      	movs	r1, #15
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f7ff ff90 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SysTick_Config+0x40>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <SysTick_Config+0x40>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff2d 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff42 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff90 	bl	8000b28 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5f 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff35 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffa2 	bl	8000b8c <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e043      	b.n	8000cf2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_DMA_Init+0xa8>)
 8000c72:	4413      	add	r3, r2
 8000c74:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <HAL_DMA_Init+0xac>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	009a      	lsls	r2, r3, #2
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <HAL_DMA_Init+0xb0>)
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ca2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	bffdfff8 	.word	0xbffdfff8
 8000d00:	cccccccd 	.word	0xcccccccd
 8000d04:	40020000 	.word	0x40020000

08000d08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	2204      	movs	r2, #4
 8000d26:	409a      	lsls	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d04f      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0xc8>
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d04a      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d107      	bne.n	8000d58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 0204 	bic.w	r2, r2, #4
 8000d56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a66      	ldr	r2, [pc, #408]	; (8000ef8 <HAL_DMA_IRQHandler+0x1f0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d029      	beq.n	8000db6 <HAL_DMA_IRQHandler+0xae>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a65      	ldr	r2, [pc, #404]	; (8000efc <HAL_DMA_IRQHandler+0x1f4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d022      	beq.n	8000db2 <HAL_DMA_IRQHandler+0xaa>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a63      	ldr	r2, [pc, #396]	; (8000f00 <HAL_DMA_IRQHandler+0x1f8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d01a      	beq.n	8000dac <HAL_DMA_IRQHandler+0xa4>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a62      	ldr	r2, [pc, #392]	; (8000f04 <HAL_DMA_IRQHandler+0x1fc>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d012      	beq.n	8000da6 <HAL_DMA_IRQHandler+0x9e>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a60      	ldr	r2, [pc, #384]	; (8000f08 <HAL_DMA_IRQHandler+0x200>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d00a      	beq.n	8000da0 <HAL_DMA_IRQHandler+0x98>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a5f      	ldr	r2, [pc, #380]	; (8000f0c <HAL_DMA_IRQHandler+0x204>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d102      	bne.n	8000d9a <HAL_DMA_IRQHandler+0x92>
 8000d94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d98:	e00e      	b.n	8000db8 <HAL_DMA_IRQHandler+0xb0>
 8000d9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d9e:	e00b      	b.n	8000db8 <HAL_DMA_IRQHandler+0xb0>
 8000da0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000da4:	e008      	b.n	8000db8 <HAL_DMA_IRQHandler+0xb0>
 8000da6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000daa:	e005      	b.n	8000db8 <HAL_DMA_IRQHandler+0xb0>
 8000dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db0:	e002      	b.n	8000db8 <HAL_DMA_IRQHandler+0xb0>
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	e000      	b.n	8000db8 <HAL_DMA_IRQHandler+0xb0>
 8000db6:	2304      	movs	r3, #4
 8000db8:	4a55      	ldr	r2, [pc, #340]	; (8000f10 <HAL_DMA_IRQHandler+0x208>)
 8000dba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 8094 	beq.w	8000eee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000dce:	e08e      	b.n	8000eee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d056      	beq.n	8000e8e <HAL_DMA_IRQHandler+0x186>
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d051      	beq.n	8000e8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10b      	bne.n	8000e10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 020a 	bic.w	r2, r2, #10
 8000e06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a38      	ldr	r2, [pc, #224]	; (8000ef8 <HAL_DMA_IRQHandler+0x1f0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d029      	beq.n	8000e6e <HAL_DMA_IRQHandler+0x166>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a37      	ldr	r2, [pc, #220]	; (8000efc <HAL_DMA_IRQHandler+0x1f4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d022      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x162>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a35      	ldr	r2, [pc, #212]	; (8000f00 <HAL_DMA_IRQHandler+0x1f8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d01a      	beq.n	8000e64 <HAL_DMA_IRQHandler+0x15c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a34      	ldr	r2, [pc, #208]	; (8000f04 <HAL_DMA_IRQHandler+0x1fc>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d012      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x156>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a32      	ldr	r2, [pc, #200]	; (8000f08 <HAL_DMA_IRQHandler+0x200>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00a      	beq.n	8000e58 <HAL_DMA_IRQHandler+0x150>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <HAL_DMA_IRQHandler+0x204>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d102      	bne.n	8000e52 <HAL_DMA_IRQHandler+0x14a>
 8000e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e50:	e00e      	b.n	8000e70 <HAL_DMA_IRQHandler+0x168>
 8000e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e56:	e00b      	b.n	8000e70 <HAL_DMA_IRQHandler+0x168>
 8000e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5c:	e008      	b.n	8000e70 <HAL_DMA_IRQHandler+0x168>
 8000e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e62:	e005      	b.n	8000e70 <HAL_DMA_IRQHandler+0x168>
 8000e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e68:	e002      	b.n	8000e70 <HAL_DMA_IRQHandler+0x168>
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	e000      	b.n	8000e70 <HAL_DMA_IRQHandler+0x168>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <HAL_DMA_IRQHandler+0x208>)
 8000e72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d034      	beq.n	8000eee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e8c:	e02f      	b.n	8000eee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	2208      	movs	r2, #8
 8000e94:	409a      	lsls	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d028      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x1e8>
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d023      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 020e 	bic.w	r2, r2, #14
 8000eb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d004      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	4798      	blx	r3
    }
  }
  return;
 8000eee:	bf00      	nop
 8000ef0:	bf00      	nop
}
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40020008 	.word	0x40020008
 8000efc:	4002001c 	.word	0x4002001c
 8000f00:	40020030 	.word	0x40020030
 8000f04:	40020044 	.word	0x40020044
 8000f08:	40020058 	.word	0x40020058
 8000f0c:	4002006c 	.word	0x4002006c
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b08b      	sub	sp, #44	; 0x2c
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	e127      	b.n	8001178 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f040 8116 	bne.w	8001172 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b12      	cmp	r3, #18
 8000f4c:	d034      	beq.n	8000fb8 <HAL_GPIO_Init+0xa4>
 8000f4e:	2b12      	cmp	r3, #18
 8000f50:	d80d      	bhi.n	8000f6e <HAL_GPIO_Init+0x5a>
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d02b      	beq.n	8000fae <HAL_GPIO_Init+0x9a>
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d804      	bhi.n	8000f64 <HAL_GPIO_Init+0x50>
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d031      	beq.n	8000fc2 <HAL_GPIO_Init+0xae>
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d01c      	beq.n	8000f9c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f62:	e048      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d043      	beq.n	8000ff0 <HAL_GPIO_Init+0xdc>
 8000f68:	2b11      	cmp	r3, #17
 8000f6a:	d01b      	beq.n	8000fa4 <HAL_GPIO_Init+0x90>
          break;
 8000f6c:	e043      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f6e:	4a89      	ldr	r2, [pc, #548]	; (8001194 <HAL_GPIO_Init+0x280>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d026      	beq.n	8000fc2 <HAL_GPIO_Init+0xae>
 8000f74:	4a87      	ldr	r2, [pc, #540]	; (8001194 <HAL_GPIO_Init+0x280>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d806      	bhi.n	8000f88 <HAL_GPIO_Init+0x74>
 8000f7a:	4a87      	ldr	r2, [pc, #540]	; (8001198 <HAL_GPIO_Init+0x284>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d020      	beq.n	8000fc2 <HAL_GPIO_Init+0xae>
 8000f80:	4a86      	ldr	r2, [pc, #536]	; (800119c <HAL_GPIO_Init+0x288>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d01d      	beq.n	8000fc2 <HAL_GPIO_Init+0xae>
          break;
 8000f86:	e036      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f88:	4a85      	ldr	r2, [pc, #532]	; (80011a0 <HAL_GPIO_Init+0x28c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0xae>
 8000f8e:	4a85      	ldr	r2, [pc, #532]	; (80011a4 <HAL_GPIO_Init+0x290>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d016      	beq.n	8000fc2 <HAL_GPIO_Init+0xae>
 8000f94:	4a84      	ldr	r2, [pc, #528]	; (80011a8 <HAL_GPIO_Init+0x294>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0xae>
          break;
 8000f9a:	e02c      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	623b      	str	r3, [r7, #32]
          break;
 8000fa2:	e028      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	623b      	str	r3, [r7, #32]
          break;
 8000fac:	e023      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	623b      	str	r3, [r7, #32]
          break;
 8000fb6:	e01e      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	623b      	str	r3, [r7, #32]
          break;
 8000fc0:	e019      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d102      	bne.n	8000fd0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e012      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d105      	bne.n	8000fe4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	611a      	str	r2, [r3, #16]
          break;
 8000fe2:	e008      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	615a      	str	r2, [r3, #20]
          break;
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
          break;
 8000ff4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2bff      	cmp	r3, #255	; 0xff
 8000ffa:	d801      	bhi.n	8001000 <HAL_GPIO_Init+0xec>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	e001      	b.n	8001004 <HAL_GPIO_Init+0xf0>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3304      	adds	r3, #4
 8001004:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2bff      	cmp	r3, #255	; 0xff
 800100a:	d802      	bhi.n	8001012 <HAL_GPIO_Init+0xfe>
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x104>
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	3b08      	subs	r3, #8
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	210f      	movs	r1, #15
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	401a      	ands	r2, r3
 800102a:	6a39      	ldr	r1, [r7, #32]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	431a      	orrs	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 8096 	beq.w	8001172 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001046:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_GPIO_Init+0x298>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a58      	ldr	r2, [pc, #352]	; (80011ac <HAL_GPIO_Init+0x298>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b56      	ldr	r3, [pc, #344]	; (80011ac <HAL_GPIO_Init+0x298>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800105e:	4a54      	ldr	r2, [pc, #336]	; (80011b0 <HAL_GPIO_Init+0x29c>)
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4013      	ands	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_GPIO_Init+0x2a0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x19e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4a      	ldr	r2, [pc, #296]	; (80011b8 <HAL_GPIO_Init+0x2a4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x19a>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_GPIO_Init+0x2a8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x196>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2ac>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x192>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x1a0>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x1a0>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x1a0>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x1a0>
 80010b2:	2300      	movs	r3, #0
 80010b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010c4:	493a      	ldr	r1, [pc, #232]	; (80011b0 <HAL_GPIO_Init+0x29c>)
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4938      	ldr	r1, [pc, #224]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
 80010ea:	e006      	b.n	80010fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	4933      	ldr	r1, [pc, #204]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 80010f6:	4013      	ands	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	492e      	ldr	r1, [pc, #184]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
 8001112:	e006      	b.n	8001122 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	43db      	mvns	r3, r3
 800111c:	4929      	ldr	r1, [pc, #164]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 800111e:	4013      	ands	r3, r2
 8001120:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	4924      	ldr	r1, [pc, #144]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
 800113a:	e006      	b.n	800114a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	43db      	mvns	r3, r3
 8001144:	491f      	ldr	r1, [pc, #124]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 8001146:	4013      	ands	r3, r2
 8001148:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	491a      	ldr	r1, [pc, #104]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	60cb      	str	r3, [r1, #12]
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	43db      	mvns	r3, r3
 800116c:	4915      	ldr	r1, [pc, #84]	; (80011c4 <HAL_GPIO_Init+0x2b0>)
 800116e:	4013      	ands	r3, r2
 8001170:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	fa22 f303 	lsr.w	r3, r2, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	f47f aed0 	bne.w	8000f28 <HAL_GPIO_Init+0x14>
  }
}
 8001188:	bf00      	nop
 800118a:	372c      	adds	r7, #44	; 0x2c
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	10210000 	.word	0x10210000
 8001198:	10110000 	.word	0x10110000
 800119c:	10120000 	.word	0x10120000
 80011a0:	10310000 	.word	0x10310000
 80011a4:	10320000 	.word	0x10320000
 80011a8:	10220000 	.word	0x10220000
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	40011000 	.word	0x40011000
 80011c0:	40011400 	.word	0x40011400
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	611a      	str	r2, [r3, #16]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e26c      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8087 	beq.w	8001326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001218:	4b92      	ldr	r3, [pc, #584]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b04      	cmp	r3, #4
 8001222:	d00c      	beq.n	800123e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001224:	4b8f      	ldr	r3, [pc, #572]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d112      	bne.n	8001256 <HAL_RCC_OscConfig+0x5e>
 8001230:	4b8c      	ldr	r3, [pc, #560]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d10b      	bne.n	8001256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123e:	4b89      	ldr	r3, [pc, #548]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d06c      	beq.n	8001324 <HAL_RCC_OscConfig+0x12c>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d168      	bne.n	8001324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e246      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x76>
 8001260:	4b80      	ldr	r3, [pc, #512]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a7f      	ldr	r2, [pc, #508]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e02e      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x98>
 8001276:	4b7b      	ldr	r3, [pc, #492]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a7a      	ldr	r2, [pc, #488]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800127c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b78      	ldr	r3, [pc, #480]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a77      	ldr	r2, [pc, #476]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01d      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0xbc>
 800129a:	4b72      	ldr	r3, [pc, #456]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a71      	ldr	r2, [pc, #452]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6e      	ldr	r2, [pc, #440]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 80012b4:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6a      	ldr	r2, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b68      	ldr	r3, [pc, #416]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a67      	ldr	r2, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fb84 	bl	80009e0 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fb80 	bl	80009e0 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e1fa      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xe4>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fb70 	bl	80009e0 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fb6c 	bl	80009e0 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e1e6      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	4b53      	ldr	r3, [pc, #332]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x10c>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d063      	beq.n	80013fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001332:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800133e:	4b49      	ldr	r3, [pc, #292]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11c      	bne.n	8001384 <HAL_RCC_OscConfig+0x18c>
 800134a:	4b46      	ldr	r3, [pc, #280]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x176>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e1ba      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4939      	ldr	r1, [pc, #228]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	e03a      	b.n	80013fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d020      	beq.n	80013ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fb25 	bl	80009e0 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fb21 	bl	80009e0 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e19b      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4927      	ldr	r1, [pc, #156]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb04 	bl	80009e0 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fb00 	bl	80009e0 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e17a      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d03a      	beq.n	800147c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d019      	beq.n	8001442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <HAL_RCC_OscConfig+0x274>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001414:	f7ff fae4 	bl	80009e0 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff fae0 	bl	80009e0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e15a      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f000 fada 	bl	80019f4 <RCC_Delay>
 8001440:	e01c      	b.n	800147c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_RCC_OscConfig+0x274>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff faca 	bl	80009e0 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144e:	e00f      	b.n	8001470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fac6 	bl	80009e0 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d908      	bls.n	8001470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e140      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	42420000 	.word	0x42420000
 800146c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	4b9e      	ldr	r3, [pc, #632]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e9      	bne.n	8001450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a6 	beq.w	80015d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b97      	ldr	r3, [pc, #604]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10d      	bne.n	80014b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b94      	ldr	r3, [pc, #592]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a93      	ldr	r2, [pc, #588]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b91      	ldr	r3, [pc, #580]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b8e      	ldr	r3, [pc, #568]	; (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d118      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c2:	4b8b      	ldr	r3, [pc, #556]	; (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a8a      	ldr	r2, [pc, #552]	; (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fa87 	bl	80009e0 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d6:	f7ff fa83 	bl	80009e0 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b64      	cmp	r3, #100	; 0x64
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0fd      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x312>
 80014fc:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4a7a      	ldr	r2, [pc, #488]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6213      	str	r3, [r2, #32]
 8001508:	e02d      	b.n	8001566 <HAL_RCC_OscConfig+0x36e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x334>
 8001512:	4b76      	ldr	r3, [pc, #472]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a75      	ldr	r2, [pc, #468]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	4b73      	ldr	r3, [pc, #460]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a72      	ldr	r2, [pc, #456]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	e01c      	b.n	8001566 <HAL_RCC_OscConfig+0x36e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b05      	cmp	r3, #5
 8001532:	d10c      	bne.n	800154e <HAL_RCC_OscConfig+0x356>
 8001534:	4b6d      	ldr	r3, [pc, #436]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a6c      	ldr	r2, [pc, #432]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a69      	ldr	r2, [pc, #420]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	e00b      	b.n	8001566 <HAL_RCC_OscConfig+0x36e>
 800154e:	4b67      	ldr	r3, [pc, #412]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a66      	ldr	r2, [pc, #408]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	4b64      	ldr	r3, [pc, #400]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a63      	ldr	r2, [pc, #396]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d015      	beq.n	800159a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fa37 	bl	80009e0 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fa33 	bl	80009e0 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0ab      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	4b57      	ldr	r3, [pc, #348]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ee      	beq.n	8001576 <HAL_RCC_OscConfig+0x37e>
 8001598:	e014      	b.n	80015c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fa21 	bl	80009e0 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fa1d 	bl	80009e0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e095      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ee      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d105      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ca:	4b48      	ldr	r3, [pc, #288]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a47      	ldr	r2, [pc, #284]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8081 	beq.w	80016e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d061      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d146      	bne.n	8001682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f4:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_RCC_OscConfig+0x4fc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff f9f1 	bl	80009e0 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff f9ed 	bl	80009e0 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e067      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d108      	bne.n	800163c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800162a:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	492d      	ldr	r1, [pc, #180]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a19      	ldr	r1, [r3, #32]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	430b      	orrs	r3, r1
 800164e:	4927      	ldr	r1, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x4fc>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff f9c1 	bl	80009e0 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff f9bd 	bl	80009e0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e037      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x46a>
 8001680:	e02f      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_RCC_OscConfig+0x4fc>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff f9aa 	bl	80009e0 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff f9a6 	bl	80009e0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e020      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x498>
 80016ae:	e018      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e013      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40007000 	.word	0x40007000
 80016f4:	42420060 	.word	0x42420060

080016f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0d0      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d910      	bls.n	800173c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 0207 	bic.w	r2, r3, #7
 8001722:	4965      	ldr	r1, [pc, #404]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0b8      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001754:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800175e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	494d      	ldr	r1, [pc, #308]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d040      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d115      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e07f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e073      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e06b      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b39      	ldr	r3, [pc, #228]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4936      	ldr	r1, [pc, #216]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff f8fa 	bl	80009e0 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff f8f6 	bl	80009e0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e053      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d210      	bcs.n	8001848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 0207 	bic.w	r2, r3, #7
 800182e:	4922      	ldr	r1, [pc, #136]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e032      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4916      	ldr	r1, [pc, #88]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	490e      	ldr	r1, [pc, #56]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001886:	f000 f821 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 800188a:	4601      	mov	r1, r0
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	fa21 f303 	lsr.w	r3, r1, r3
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_RCC_ClockConfig+0x1cc>)
 80018a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_ClockConfig+0x1d0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f858 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08007da4 	.word	0x08007da4
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004

080018cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018cc:	b490      	push	{r4, r7}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018d2:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018d4:	1d3c      	adds	r4, r7, #4
 80018d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d002      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x40>
 8001906:	2b08      	cmp	r3, #8
 8001908:	d003      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x46>
 800190a:	e02d      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800190e:	623b      	str	r3, [r7, #32]
      break;
 8001910:	e02d      	b.n	800196e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	0c9b      	lsrs	r3, r3, #18
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800191e:	4413      	add	r3, r2
 8001920:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001924:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c5b      	lsrs	r3, r3, #17
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800193e:	4413      	add	r3, r2
 8001940:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001944:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800194a:	fb02 f203 	mul.w	r2, r2, r3
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	e004      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_RCC_GetSysClockFreq+0xc0>)
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	623b      	str	r3, [r7, #32]
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800196a:	623b      	str	r3, [r7, #32]
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	6a3b      	ldr	r3, [r7, #32]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bc90      	pop	{r4, r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	08007d64 	.word	0x08007d64
 8001980:	08007d74 	.word	0x08007d74
 8001984:	40021000 	.word	0x40021000
 8001988:	007a1200 	.word	0x007a1200
 800198c:	003d0900 	.word	0x003d0900

08001990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001994:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000000 	.word	0x20000000

080019a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019a8:	f7ff fff2 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019ac:	4601      	mov	r1, r0
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	08007db4 	.word	0x08007db4

080019cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d0:	f7ff ffde 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019d4:	4601      	mov	r1, r0
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0adb      	lsrs	r3, r3, #11
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	08007db4 	.word	0x08007db4

080019f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <RCC_Delay+0x34>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <RCC_Delay+0x38>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0a5b      	lsrs	r3, r3, #9
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a10:	bf00      	nop
  }
  while (Delay --);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1e5a      	subs	r2, r3, #1
 8001a16:	60fa      	str	r2, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f9      	bne.n	8001a10 <RCC_Delay+0x1c>
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	10624dd3 	.word	0x10624dd3

08001a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e076      	b.n	8001b30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a52:	d009      	beq.n	8001a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
 8001a5a:	e005      	b.n	8001a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7fe fd9c 	bl	80005c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aec:	ea42 0103 	orr.w	r1, r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	0c1a      	lsrs	r2, r3, #16
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f002 0204 	and.w	r2, r2, #4
 8001b0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	; 0x30
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b46:	2301      	movs	r3, #1
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_SPI_TransmitReceive+0x26>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e18a      	b.n	8001e74 <HAL_SPI_TransmitReceive+0x33c>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b66:	f7fe ff3b 	bl	80009e0 <HAL_GetTick>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d00f      	beq.n	8001ba8 <HAL_SPI_TransmitReceive+0x70>
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b8e:	d107      	bne.n	8001ba0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d103      	bne.n	8001ba0 <HAL_SPI_TransmitReceive+0x68>
 8001b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d003      	beq.n	8001ba8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ba6:	e15b      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_SPI_TransmitReceive+0x82>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_SPI_TransmitReceive+0x82>
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bc0:	e14e      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d003      	beq.n	8001bd6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	887a      	ldrh	r2, [r7, #2]
 8001be6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	887a      	ldrh	r2, [r7, #2]
 8001bfe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	d007      	beq.n	8001c2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c32:	d178      	bne.n	8001d26 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_SPI_TransmitReceive+0x10a>
 8001c3c:	8b7b      	ldrh	r3, [r7, #26]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d166      	bne.n	8001d10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	881a      	ldrh	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	1c9a      	adds	r2, r3, #2
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c66:	e053      	b.n	8001d10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d11b      	bne.n	8001cae <HAL_SPI_TransmitReceive+0x176>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d016      	beq.n	8001cae <HAL_SPI_TransmitReceive+0x176>
 8001c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d113      	bne.n	8001cae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	881a      	ldrh	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	1c9a      	adds	r2, r3, #2
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d119      	bne.n	8001cf0 <HAL_SPI_TransmitReceive+0x1b8>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d014      	beq.n	8001cf0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd8:	1c9a      	adds	r2, r3, #2
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cec:	2301      	movs	r3, #1
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001cf0:	f7fe fe76 	bl	80009e0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d807      	bhi.n	8001d10 <HAL_SPI_TransmitReceive+0x1d8>
 8001d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d06:	d003      	beq.n	8001d10 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d0e:	e0a7      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1a6      	bne.n	8001c68 <HAL_SPI_TransmitReceive+0x130>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1a1      	bne.n	8001c68 <HAL_SPI_TransmitReceive+0x130>
 8001d24:	e07c      	b.n	8001e20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_SPI_TransmitReceive+0x1fc>
 8001d2e:	8b7b      	ldrh	r3, [r7, #26]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d16b      	bne.n	8001e0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d5a:	e057      	b.n	8001e0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d11c      	bne.n	8001da4 <HAL_SPI_TransmitReceive+0x26c>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d017      	beq.n	8001da4 <HAL_SPI_TransmitReceive+0x26c>
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d114      	bne.n	8001da4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	330c      	adds	r3, #12
 8001d84:	7812      	ldrb	r2, [r2, #0]
 8001d86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d119      	bne.n	8001de6 <HAL_SPI_TransmitReceive+0x2ae>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d014      	beq.n	8001de6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001de2:	2301      	movs	r3, #1
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001de6:	f7fe fdfb 	bl	80009e0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d803      	bhi.n	8001dfe <HAL_SPI_TransmitReceive+0x2c6>
 8001df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d102      	bne.n	8001e04 <HAL_SPI_TransmitReceive+0x2cc>
 8001dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d103      	bne.n	8001e0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e0a:	e029      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1a2      	bne.n	8001d5c <HAL_SPI_TransmitReceive+0x224>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d19d      	bne.n	8001d5c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f8b1 	bl	8001f8c <SPI_EndRxTxTransaction>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e3c:	e010      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10b      	bne.n	8001e5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	e000      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3730      	adds	r7, #48	; 0x30
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e8c:	f7fe fda8 	bl	80009e0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e9c:	f7fe fda0 	bl	80009e0 <HAL_GetTick>
 8001ea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	015b      	lsls	r3, r3, #5
 8001ea8:	0d1b      	lsrs	r3, r3, #20
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	fb02 f303 	mul.w	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eb2:	e054      	b.n	8001f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eba:	d050      	beq.n	8001f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ebc:	f7fe fd90 	bl	80009e0 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d902      	bls.n	8001ed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d13d      	bne.n	8001f4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eea:	d111      	bne.n	8001f10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef4:	d004      	beq.n	8001f00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efe:	d107      	bne.n	8001f10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f18:	d10f      	bne.n	8001f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e017      	b.n	8001f7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4013      	ands	r3, r2
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d19b      	bne.n	8001eb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff ff6a 	bl	8001e7c <SPI_WaitFlagStateUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f043 0220 	orr.w	r2, r3, #32
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e000      	b.n	8001fc0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e041      	b.n	800205e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fb30 	bl	8000654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3304      	adds	r3, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f000 fa64 	bl	80024d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e03a      	b.n	80020f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_TIM_Base_Start_IT+0x98>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00e      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x58>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d009      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x58>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <HAL_TIM_Base_Start_IT+0x9c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x58>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_TIM_Base_Start_IT+0xa0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d111      	bne.n	80020e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d010      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	e007      	b.n	80020f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	40012c00 	.word	0x40012c00
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800

0800210c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b02      	cmp	r3, #2
 8002120:	d122      	bne.n	8002168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b02      	cmp	r3, #2
 800212e:	d11b      	bne.n	8002168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0202 	mvn.w	r2, #2
 8002138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f9a4 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f997 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f9a6 	bl	80024ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b04      	cmp	r3, #4
 8002174:	d122      	bne.n	80021bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b04      	cmp	r3, #4
 8002182:	d11b      	bne.n	80021bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0204 	mvn.w	r2, #4
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2202      	movs	r2, #2
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f97a 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f96d 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f97c 	bl	80024ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d122      	bne.n	8002210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d11b      	bne.n	8002210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0208 	mvn.w	r2, #8
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2204      	movs	r2, #4
 80021e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f950 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f943 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f952 	bl	80024ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b10      	cmp	r3, #16
 800221c:	d122      	bne.n	8002264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b10      	cmp	r3, #16
 800222a:	d11b      	bne.n	8002264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0210 	mvn.w	r2, #16
 8002234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2208      	movs	r2, #8
 800223a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f926 	bl	800249c <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f919 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f928 	bl	80024ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0201 	mvn.w	r2, #1
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe f93c 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	2b80      	cmp	r3, #128	; 0x80
 800229c:	d10e      	bne.n	80022bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d107      	bne.n	80022bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa6b 	bl	8002792 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d10e      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d107      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8ec 	bl	80024c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d10e      	bne.n	8002314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b20      	cmp	r3, #32
 8002302:	d107      	bne.n	8002314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0220 	mvn.w	r2, #32
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fa36 	bl	8002780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_TIM_ConfigClockSource+0x18>
 8002330:	2302      	movs	r3, #2
 8002332:	e0a6      	b.n	8002482 <HAL_TIM_ConfigClockSource+0x166>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002352:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800235a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	d067      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x120>
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d80b      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x6c>
 8002370:	2b10      	cmp	r3, #16
 8002372:	d073      	beq.n	800245c <HAL_TIM_ConfigClockSource+0x140>
 8002374:	2b10      	cmp	r3, #16
 8002376:	d802      	bhi.n	800237e <HAL_TIM_ConfigClockSource+0x62>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d06f      	beq.n	800245c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800237c:	e078      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800237e:	2b20      	cmp	r3, #32
 8002380:	d06c      	beq.n	800245c <HAL_TIM_ConfigClockSource+0x140>
 8002382:	2b30      	cmp	r3, #48	; 0x30
 8002384:	d06a      	beq.n	800245c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002386:	e073      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d00d      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0x8c>
 800238c:	2b70      	cmp	r3, #112	; 0x70
 800238e:	d804      	bhi.n	800239a <HAL_TIM_ConfigClockSource+0x7e>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d033      	beq.n	80023fc <HAL_TIM_ConfigClockSource+0xe0>
 8002394:	2b60      	cmp	r3, #96	; 0x60
 8002396:	d041      	beq.n	800241c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002398:	e06a      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800239a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239e:	d066      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x152>
 80023a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a4:	d017      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80023a6:	e063      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6899      	ldr	r1, [r3, #8]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f000 f965 	bl	8002686 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	609a      	str	r2, [r3, #8]
      break;
 80023d4:	e04c      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f000 f94e 	bl	8002686 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023f8:	609a      	str	r2, [r3, #8]
      break;
 80023fa:	e039      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	461a      	mov	r2, r3
 800240a:	f000 f8c5 	bl	8002598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2150      	movs	r1, #80	; 0x50
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f91c 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 800241a:	e029      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	461a      	mov	r2, r3
 800242a:	f000 f8e3 	bl	80025f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2160      	movs	r1, #96	; 0x60
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f90c 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 800243a:	e019      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	461a      	mov	r2, r3
 800244a:	f000 f8a5 	bl	8002598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2140      	movs	r1, #64	; 0x40
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f8fc 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 800245a:	e009      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f000 f8f3 	bl	8002652 <TIM_ITRx_SetConfig>
        break;
 800246c:	e000      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800246e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
	...

080024d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a29      	ldr	r2, [pc, #164]	; (800258c <TIM_Base_SetConfig+0xb8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00b      	beq.n	8002504 <TIM_Base_SetConfig+0x30>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f2:	d007      	beq.n	8002504 <TIM_Base_SetConfig+0x30>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a26      	ldr	r2, [pc, #152]	; (8002590 <TIM_Base_SetConfig+0xbc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <TIM_Base_SetConfig+0x30>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a25      	ldr	r2, [pc, #148]	; (8002594 <TIM_Base_SetConfig+0xc0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d108      	bne.n	8002516 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1c      	ldr	r2, [pc, #112]	; (800258c <TIM_Base_SetConfig+0xb8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00b      	beq.n	8002536 <TIM_Base_SetConfig+0x62>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d007      	beq.n	8002536 <TIM_Base_SetConfig+0x62>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a19      	ldr	r2, [pc, #100]	; (8002590 <TIM_Base_SetConfig+0xbc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d003      	beq.n	8002536 <TIM_Base_SetConfig+0x62>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a18      	ldr	r2, [pc, #96]	; (8002594 <TIM_Base_SetConfig+0xc0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d108      	bne.n	8002548 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <TIM_Base_SetConfig+0xb8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d103      	bne.n	800257c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	615a      	str	r2, [r3, #20]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40012c00 	.word	0x40012c00
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800

08002598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f023 0201 	bic.w	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f023 030a 	bic.w	r3, r3, #10
 80025d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	621a      	str	r2, [r3, #32]
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f023 0210 	bic.w	r2, r3, #16
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800261e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	031b      	lsls	r3, r3, #12
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002630:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	621a      	str	r2, [r3, #32]
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	f043 0307 	orr.w	r3, r3, #7
 8002674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002686:	b480      	push	{r7}
 8002688:	b087      	sub	sp, #28
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	021a      	lsls	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	609a      	str	r2, [r3, #8]
}
 80026ba:	bf00      	nop
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d8:	2302      	movs	r3, #2
 80026da:	e046      	b.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00e      	beq.n	800273e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d009      	beq.n	800273e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d004      	beq.n	800273e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a10      	ldr	r2, [pc, #64]	; (800277c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10c      	bne.n	8002758 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	4313      	orrs	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800

08002780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e03f      	b.n	8002836 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fd ff66 	bl	800069c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	; 0x24
 80027d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f829 	bl	8002840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800280c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800281c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800287a:	f023 030c 	bic.w	r3, r3, #12
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	430b      	orrs	r3, r1
 8002886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2c      	ldr	r2, [pc, #176]	; (8002954 <UART_SetConfig+0x114>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d103      	bne.n	80028b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028a8:	f7ff f890 	bl	80019cc <HAL_RCC_GetPCLK2Freq>
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	e002      	b.n	80028b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028b0:	f7ff f878 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 80028b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009a      	lsls	r2, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	4a22      	ldr	r2, [pc, #136]	; (8002958 <UART_SetConfig+0x118>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	0119      	lsls	r1, r3, #4
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <UART_SetConfig+0x118>)
 80028ee:	fba3 0302 	umull	r0, r3, r3, r2
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2064      	movs	r0, #100	; 0x64
 80028f6:	fb00 f303 	mul.w	r3, r0, r3
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	3332      	adds	r3, #50	; 0x32
 8002900:	4a15      	ldr	r2, [pc, #84]	; (8002958 <UART_SetConfig+0x118>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290c:	4419      	add	r1, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fbb2 f2f3 	udiv	r2, r2, r3
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <UART_SetConfig+0x118>)
 8002926:	fba3 0302 	umull	r0, r3, r3, r2
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2064      	movs	r0, #100	; 0x64
 800292e:	fb00 f303 	mul.w	r3, r0, r3
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	3332      	adds	r3, #50	; 0x32
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <UART_SetConfig+0x118>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	f003 020f 	and.w	r2, r3, #15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	440a      	add	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40013800 	.word	0x40013800
 8002958:	51eb851f 	.word	0x51eb851f

0800295c <CS_HIGH>:
 */

#include "user_diskio.h"


void CS_HIGH(){
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002960:	2201      	movs	r2, #1
 8002962:	2110      	movs	r1, #16
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <CS_HIGH+0x14>)
 8002966:	f7fe fc2f 	bl	80011c8 <HAL_GPIO_WritePin>
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40010800 	.word	0x40010800

08002974 <CS_LOW>:

void CS_LOW(){
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002978:	2200      	movs	r2, #0
 800297a:	2110      	movs	r1, #16
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <CS_LOW+0x14>)
 800297e:	f7fe fc23 	bl	80011c8 <HAL_GPIO_WritePin>
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40010800 	.word	0x40010800

0800298c <FCLK_FAST>:

void SPIxENABLE(){

}

void FCLK_FAST(){
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

	//HAL_SPI_DeInit( Get_SPI_HandleTypeDef() );

	Get_SPI_HandleTypeDef()->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002990:	f7fd fdd4 	bl	800053c <Get_SPI_HandleTypeDef>
 8002994:	4602      	mov	r2, r0
 8002996:	2310      	movs	r3, #16
 8002998:	61d3      	str	r3, [r2, #28]

	if (HAL_SPI_Init( Get_SPI_HandleTypeDef() ) != HAL_OK)
 800299a:	f7fd fdcf 	bl	800053c <Get_SPI_HandleTypeDef>
 800299e:	4603      	mov	r3, r0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f845 	bl	8001a30 <HAL_SPI_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <FCLK_FAST+0x24>
	{
		Error_Handler();
 80029ac:	f7fd fdd0 	bl	8000550 <Error_Handler>
	}
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <FCLK_SLOW>:

void FCLK_SLOW(){
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	//HAL_SPI_DeInit( Get_SPI_HandleTypeDef() );

	Get_SPI_HandleTypeDef()->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80029b8:	f7fd fdc0 	bl	800053c <Get_SPI_HandleTypeDef>
 80029bc:	4602      	mov	r2, r0
 80029be:	2330      	movs	r3, #48	; 0x30
 80029c0:	61d3      	str	r3, [r2, #28]

	if (HAL_SPI_Init( Get_SPI_HandleTypeDef() ) != HAL_OK)
 80029c2:	f7fd fdbb 	bl	800053c <Get_SPI_HandleTypeDef>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f831 	bl	8001a30 <HAL_SPI_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <FCLK_SLOW+0x24>
	{
		Error_Handler();
 80029d4:	f7fd fdbc 	bl	8000550 <Error_Handler>
	}

}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}

080029dc <xchg_spi>:
/* Exchange a byte */

BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
	BYTE received_byte=0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(Get_SPI_HandleTypeDef(), &dat, &received_byte, 1, 50); //50
 80029ea:	f7fd fda7 	bl	800053c <Get_SPI_HandleTypeDef>
 80029ee:	f107 020f 	add.w	r2, r7, #15
 80029f2:	1df9      	adds	r1, r7, #7
 80029f4:	2332      	movs	r3, #50	; 0x32
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2301      	movs	r3, #1
 80029fa:	f7ff f89d 	bl	8001b38 <HAL_SPI_TransmitReceive>
	return received_byte;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <init_spi>:

/* Initialize MMC interface */
void init_spi (void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
//	SPIxENABLE();		/* Enable SPI function */
//	CS_HIGH();			/* Set CS# high */
//
//	for (Timer1 = 10; Timer1; ) ;	/* 10ms */
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e00a      	b.n	8002a3a <rcvr_spi_multi+0x26>
			*(buff+i) = xchg_spi(0xFF);
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	18d4      	adds	r4, r2, r3
 8002a2a:	20ff      	movs	r0, #255	; 0xff
 8002a2c:	f7ff ffd6 	bl	80029dc <xchg_spi>
 8002a30:	4603      	mov	r3, r0
 8002a32:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3301      	adds	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d3f0      	bcc.n	8002a24 <rcvr_spi_multi+0x10>
		}
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}

08002a4a <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e009      	b.n	8002a6e <xmit_spi_multi+0x24>
			xchg_spi(*(buff+i));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ffba 	bl	80029dc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3f1      	bcc.n	8002a5a <xmit_spi_multi+0x10>
		}
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	BYTE d;


	Timer2 = wt;
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <wait_ready+0x3c>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
	do {
		d = xchg_spi(0xFF);
 8002a8e:	20ff      	movs	r0, #255	; 0xff
 8002a90:	f7ff ffa4 	bl	80029dc <xchg_spi>
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && Timer2);	/* Wait for card goes ready or timeout */
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2bff      	cmp	r3, #255	; 0xff
 8002a9c:	d003      	beq.n	8002aa6 <wait_ready+0x26>
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <wait_ready+0x3c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f3      	bne.n	8002a8e <wait_ready+0xe>

	return (d == 0xFF) ? 1 : 0;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2bff      	cmp	r3, #255	; 0xff
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000098 	.word	0x20000098

08002ac0 <deselect>:
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002ac4:	f7ff ff4a 	bl	800295c <CS_HIGH>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002ac8:	20ff      	movs	r0, #255	; 0xff
 8002aca:	f7ff ff87 	bl	80029dc <xchg_spi>

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <Select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int Select (void)	/* 1:OK, 0:Timeout */
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002ad6:	f7ff ff4d 	bl	8002974 <CS_LOW>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002ada:	20ff      	movs	r0, #255	; 0xff
 8002adc:	f7ff ff7e 	bl	80029dc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002ae0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ae4:	f7ff ffcc 	bl	8002a80 <wait_ready>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <Select+0x20>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e002      	b.n	8002af8 <Select+0x26>

	deselect();
 8002af2:	f7ff ffe5 	bl	8002ac0 <deselect>
	return 0;	/* Timeout */
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}

08002afc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	BYTE token;


	Timer1 = 200;
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <rcvr_datablock+0x50>)
 8002b08:	22c8      	movs	r2, #200	; 0xc8
 8002b0a:	601a      	str	r2, [r3, #0]
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002b0c:	20ff      	movs	r0, #255	; 0xff
 8002b0e:	f7ff ff65 	bl	80029dc <xchg_spi>
 8002b12:	4603      	mov	r3, r0
 8002b14:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1);
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2bff      	cmp	r3, #255	; 0xff
 8002b1a:	d103      	bne.n	8002b24 <rcvr_datablock+0x28>
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <rcvr_datablock+0x50>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f3      	bne.n	8002b0c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2bfe      	cmp	r3, #254	; 0xfe
 8002b28:	d001      	beq.n	8002b2e <rcvr_datablock+0x32>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e00a      	b.n	8002b44 <rcvr_datablock+0x48>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002b2e:	6839      	ldr	r1, [r7, #0]
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff6f 	bl	8002a14 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002b36:	20ff      	movs	r0, #255	; 0xff
 8002b38:	f7ff ff50 	bl	80029dc <xchg_spi>
 8002b3c:	20ff      	movs	r0, #255	; 0xff
 8002b3e:	f7ff ff4d 	bl	80029dc <xchg_spi>

	return 1;						/* Function succeeded */
 8002b42:	2301      	movs	r3, #1
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000094 	.word	0x20000094

08002b50 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b60:	f7ff ff8e 	bl	8002a80 <wait_ready>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <xmit_datablock+0x1e>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e01e      	b.n	8002bac <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff33 	bl	80029dc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	2bfd      	cmp	r3, #253	; 0xfd
 8002b7a:	d016      	beq.n	8002baa <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff62 	bl	8002a4a <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002b86:	20ff      	movs	r0, #255	; 0xff
 8002b88:	f7ff ff28 	bl	80029dc <xchg_spi>
 8002b8c:	20ff      	movs	r0, #255	; 0xff
 8002b8e:	f7ff ff25 	bl	80029dc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002b92:	20ff      	movs	r0, #255	; 0xff
 8002b94:	f7ff ff22 	bl	80029dc <xchg_spi>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d001      	beq.n	8002baa <xmit_datablock+0x5a>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e000      	b.n	8002bac <xmit_datablock+0x5c>
	}
	return 1;
 8002baa:	2301      	movs	r3, #1
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	da0e      	bge.n	8002be6 <send_cmd+0x32>
		cmd &= 0x7F;
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bce:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2037      	movs	r0, #55	; 0x37
 8002bd4:	f7ff ffee 	bl	8002bb4 <send_cmd>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002bdc:	7bbb      	ldrb	r3, [r7, #14]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d901      	bls.n	8002be6 <send_cmd+0x32>
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	e051      	b.n	8002c8a <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	d008      	beq.n	8002bfe <send_cmd+0x4a>
		deselect();
 8002bec:	f7ff ff68 	bl	8002ac0 <deselect>
		if (!Select()) return 0xFF;
 8002bf0:	f7ff ff6f 	bl	8002ad2 <Select>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <send_cmd+0x4a>
 8002bfa:	23ff      	movs	r3, #255	; 0xff
 8002bfc:	e045      	b.n	8002c8a <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fee8 	bl	80029dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	0e1b      	lsrs	r3, r3, #24
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fee2 	bl	80029dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	0c1b      	lsrs	r3, r3, #16
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fedc 	bl	80029dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fed6 	bl	80029dc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fed1 	bl	80029dc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <send_cmd+0x94>
 8002c44:	2395      	movs	r3, #149	; 0x95
 8002c46:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d101      	bne.n	8002c52 <send_cmd+0x9e>
 8002c4e:	2387      	movs	r3, #135	; 0x87
 8002c50:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fec1 	bl	80029dc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	d102      	bne.n	8002c66 <send_cmd+0xb2>
 8002c60:	20ff      	movs	r0, #255	; 0xff
 8002c62:	f7ff febb 	bl	80029dc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002c66:	230a      	movs	r3, #10
 8002c68:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002c6a:	20ff      	movs	r0, #255	; 0xff
 8002c6c:	f7ff feb6 	bl	80029dc <xchg_spi>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da05      	bge.n	8002c88 <send_cmd+0xd4>
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <send_cmd+0xb6>

	return res;							/* Return received response */
 8002c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <disk_initialize+0x14>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0c4      	b.n	8002e32 <disk_initialize+0x19e>
	init_spi();							/* Initialize SPI */
 8002ca8:	f7ff feae 	bl	8002a08 <init_spi>

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002cac:	4b63      	ldr	r3, [pc, #396]	; (8002e3c <disk_initialize+0x1a8>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <disk_initialize+0x2e>
 8002cba:	4b60      	ldr	r3, [pc, #384]	; (8002e3c <disk_initialize+0x1a8>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e0b7      	b.n	8002e32 <disk_initialize+0x19e>

	FCLK_SLOW();
 8002cc2:	f7ff fe77 	bl	80029b4 <FCLK_SLOW>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002cc6:	230a      	movs	r3, #10
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	e005      	b.n	8002cd8 <disk_initialize+0x44>
 8002ccc:	20ff      	movs	r0, #255	; 0xff
 8002cce:	f7ff fe85 	bl	80029dc <xchg_spi>
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f6      	bne.n	8002ccc <disk_initialize+0x38>

	ty = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7ff ff65 	bl	8002bb4 <send_cmd>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 8087 	bne.w	8002e00 <disk_initialize+0x16c>
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
 8002cf2:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <disk_initialize+0x1ac>)
 8002cf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cf8:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002cfa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002cfe:	2008      	movs	r0, #8
 8002d00:	f7ff ff58 	bl	8002bb4 <send_cmd>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d14f      	bne.n	8002daa <disk_initialize+0x116>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	e00d      	b.n	8002d2c <disk_initialize+0x98>
 8002d10:	7bfc      	ldrb	r4, [r7, #15]
 8002d12:	20ff      	movs	r0, #255	; 0xff
 8002d14:	f7ff fe62 	bl	80029dc <xchg_spi>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f107 0310 	add.w	r3, r7, #16
 8002d20:	4423      	add	r3, r4
 8002d22:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d9ee      	bls.n	8002d10 <disk_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002d32:	7abb      	ldrb	r3, [r7, #10]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d163      	bne.n	8002e00 <disk_initialize+0x16c>
 8002d38:	7afb      	ldrb	r3, [r7, #11]
 8002d3a:	2baa      	cmp	r3, #170	; 0xaa
 8002d3c:	d160      	bne.n	8002e00 <disk_initialize+0x16c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002d3e:	bf00      	nop
 8002d40:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <disk_initialize+0x1ac>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <disk_initialize+0xc4>
 8002d48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d4c:	20a9      	movs	r0, #169	; 0xa9
 8002d4e:	f7ff ff31 	bl	8002bb4 <send_cmd>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f3      	bne.n	8002d40 <disk_initialize+0xac>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <disk_initialize+0x1ac>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d04f      	beq.n	8002e00 <disk_initialize+0x16c>
 8002d60:	2100      	movs	r1, #0
 8002d62:	203a      	movs	r0, #58	; 0x3a
 8002d64:	f7ff ff26 	bl	8002bb4 <send_cmd>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d148      	bne.n	8002e00 <disk_initialize+0x16c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e00d      	b.n	8002d90 <disk_initialize+0xfc>
 8002d74:	7bfc      	ldrb	r4, [r7, #15]
 8002d76:	20ff      	movs	r0, #255	; 0xff
 8002d78:	f7ff fe30 	bl	80029dc <xchg_spi>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	4423      	add	r3, r4
 8002d86:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d9ee      	bls.n	8002d74 <disk_initialize+0xe0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002d96:	7a3b      	ldrb	r3, [r7, #8]
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <disk_initialize+0x110>
 8002da0:	230c      	movs	r3, #12
 8002da2:	e000      	b.n	8002da6 <disk_initialize+0x112>
 8002da4:	2304      	movs	r3, #4
 8002da6:	737b      	strb	r3, [r7, #13]
 8002da8:	e02a      	b.n	8002e00 <disk_initialize+0x16c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002daa:	2100      	movs	r1, #0
 8002dac:	20a9      	movs	r0, #169	; 0xa9
 8002dae:	f7ff ff01 	bl	8002bb4 <send_cmd>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d804      	bhi.n	8002dc2 <disk_initialize+0x12e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002db8:	2302      	movs	r3, #2
 8002dba:	737b      	strb	r3, [r7, #13]
 8002dbc:	23a9      	movs	r3, #169	; 0xa9
 8002dbe:	73bb      	strb	r3, [r7, #14]
 8002dc0:	e003      	b.n	8002dca <disk_initialize+0x136>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	737b      	strb	r3, [r7, #13]
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002dca:	bf00      	nop
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <disk_initialize+0x1ac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <disk_initialize+0x150>
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff feeb 	bl	8002bb4 <send_cmd>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f3      	bne.n	8002dcc <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <disk_initialize+0x1ac>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <disk_initialize+0x168>
 8002dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002df0:	2010      	movs	r0, #16
 8002df2:	f7ff fedf 	bl	8002bb4 <send_cmd>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <disk_initialize+0x16c>
				ty = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002e00:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <disk_initialize+0x1b0>)
 8002e02:	7b7b      	ldrb	r3, [r7, #13]
 8002e04:	7013      	strb	r3, [r2, #0]
	deselect();
 8002e06:	f7ff fe5b 	bl	8002ac0 <deselect>

	if (ty) {			/* OK */
 8002e0a:	7b7b      	ldrb	r3, [r7, #13]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <disk_initialize+0x192>
		FCLK_FAST();			/* Set fast clock */
 8002e10:	f7ff fdbc 	bl	800298c <FCLK_FAST>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <disk_initialize+0x1a8>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <disk_initialize+0x1a8>)
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	e002      	b.n	8002e2c <disk_initialize+0x198>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <disk_initialize+0x1a8>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <disk_initialize+0x1a8>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000009 	.word	0x20000009
 8002e40:	20000094 	.word	0x20000094
 8002e44:	2000009c 	.word	0x2000009c

08002e48 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <disk_status+0x14>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e002      	b.n	8002e62 <disk_status+0x1a>

	return Stat;	/* Return disk status */
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <disk_status+0x24>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	20000009 	.word	0x20000009

08002e70 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	LBA_t sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	73fb      	strb	r3, [r7, #15]
	DWORD sect = (DWORD)sector;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	617b      	str	r3, [r7, #20]


	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <disk_read+0x20>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <disk_read+0x24>
 8002e90:	2304      	movs	r3, #4
 8002e92:	e04d      	b.n	8002f30 <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002e94:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <disk_read+0xc8>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <disk_read+0x36>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e044      	b.n	8002f30 <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002ea6:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <disk_read+0xcc>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <disk_read+0x48>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	025b      	lsls	r3, r3, #9
 8002eb6:	617b      	str	r3, [r7, #20]

	if (count == 1) {	/* Single sector read */
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d111      	bne.n	8002ee2 <disk_read+0x72>
		if ((send_cmd(CMD17, sect) == 0)	/* READ_SINGLE_BLOCK */
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	2011      	movs	r0, #17
 8002ec2:	f7ff fe77 	bl	8002bb4 <send_cmd>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d129      	bne.n	8002f20 <disk_read+0xb0>
			&& rcvr_datablock(buff, 512)) {
 8002ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ed0:	68b8      	ldr	r0, [r7, #8]
 8002ed2:	f7ff fe13 	bl	8002afc <rcvr_datablock>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d021      	beq.n	8002f20 <disk_read+0xb0>
			count = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	e01e      	b.n	8002f20 <disk_read+0xb0>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sect) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	2012      	movs	r0, #18
 8002ee6:	f7ff fe65 	bl	8002bb4 <send_cmd>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d117      	bne.n	8002f20 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ef4:	68b8      	ldr	r0, [r7, #8]
 8002ef6:	f7ff fe01 	bl	8002afc <rcvr_datablock>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <disk_read+0xa6>
				buff += 512;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f06:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ed      	bne.n	8002ef0 <disk_read+0x80>
 8002f14:	e000      	b.n	8002f18 <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 8002f16:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002f18:	2100      	movs	r1, #0
 8002f1a:	200c      	movs	r0, #12
 8002f1c:	f7ff fe4a 	bl	8002bb4 <send_cmd>
		}
	}
	deselect();
 8002f20:	f7ff fdce 	bl	8002ac0 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000009 	.word	0x20000009
 8002f3c:	2000009c 	.word	0x2000009c

08002f40 <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]
	DWORD sect = (DWORD)sector;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	617b      	str	r3, [r7, #20]


	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <disk_write+0x20>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <disk_write+0x24>
 8002f60:	2304      	movs	r3, #4
 8002f62:	e063      	b.n	800302c <disk_write+0xec>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002f64:	4b33      	ldr	r3, [pc, #204]	; (8003034 <disk_write+0xf4>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <disk_write+0x36>
 8002f72:	2303      	movs	r3, #3
 8002f74:	e05a      	b.n	800302c <disk_write+0xec>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002f76:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <disk_write+0xf4>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <disk_write+0x48>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e051      	b.n	800302c <disk_write+0xec>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <disk_write+0xf8>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <disk_write+0x5a>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	025b      	lsls	r3, r3, #9
 8002f98:	617b      	str	r3, [r7, #20]

	if (count == 1) {	/* Single sector write */
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d110      	bne.n	8002fc2 <disk_write+0x82>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
 8002fa0:	6979      	ldr	r1, [r7, #20]
 8002fa2:	2018      	movs	r0, #24
 8002fa4:	f7ff fe06 	bl	8002bb4 <send_cmd>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d136      	bne.n	800301c <disk_write+0xdc>
			&& xmit_datablock(buff, 0xFE)) {
 8002fae:	21fe      	movs	r1, #254	; 0xfe
 8002fb0:	68b8      	ldr	r0, [r7, #8]
 8002fb2:	f7ff fdcd 	bl	8002b50 <xmit_datablock>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02f      	beq.n	800301c <disk_write+0xdc>
			count = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	e02c      	b.n	800301c <disk_write+0xdc>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <disk_write+0xf8>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	f003 0306 	and.w	r3, r3, #6
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <disk_write+0x96>
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	2097      	movs	r0, #151	; 0x97
 8002fd2:	f7ff fdef 	bl	8002bb4 <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002fd6:	6979      	ldr	r1, [r7, #20]
 8002fd8:	2019      	movs	r0, #25
 8002fda:	f7ff fdeb 	bl	8002bb4 <send_cmd>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11b      	bne.n	800301c <disk_write+0xdc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002fe4:	21fc      	movs	r1, #252	; 0xfc
 8002fe6:	68b8      	ldr	r0, [r7, #8]
 8002fe8:	f7ff fdb2 	bl	8002b50 <xmit_datablock>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <disk_write+0xc8>
				buff += 512;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ff8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ee      	bne.n	8002fe4 <disk_write+0xa4>
 8003006:	e000      	b.n	800300a <disk_write+0xca>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003008:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800300a:	21fd      	movs	r1, #253	; 0xfd
 800300c:	2000      	movs	r0, #0
 800300e:	f7ff fd9f 	bl	8002b50 <xmit_datablock>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <disk_write+0xdc>
 8003018:	2301      	movs	r3, #1
 800301a:	603b      	str	r3, [r7, #0]
		}
	}
	deselect();
 800301c:	f7ff fd50 	bl	8002ac0 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000009 	.word	0x20000009
 8003038:	2000009c 	.word	0x2000009c

0800303c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08c      	sub	sp, #48	; 0x30
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	603a      	str	r2, [r7, #0]
 8003046:	71fb      	strb	r3, [r7, #7]
 8003048:	460b      	mov	r3, r1
 800304a:	71bb      	strb	r3, [r7, #6]
	BYTE n, csd[16];
	DWORD st, ed, csize;
	LBA_t *dp;


	if (drv) return RES_PARERR;					/* Check parameter */
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <disk_ioctl+0x1a>
 8003052:	2304      	movs	r3, #4
 8003054:	e15b      	b.n	800330e <disk_ioctl+0x2d2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003056:	4bb0      	ldr	r3, [pc, #704]	; (8003318 <disk_ioctl+0x2dc>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <disk_ioctl+0x2c>
 8003064:	2303      	movs	r3, #3
 8003066:	e152      	b.n	800330e <disk_ioctl+0x2d2>

	res = RES_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800306e:	79bb      	ldrb	r3, [r7, #6]
 8003070:	2b04      	cmp	r3, #4
 8003072:	f200 8137 	bhi.w	80032e4 <disk_ioctl+0x2a8>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <disk_ioctl+0x40>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	08003091 	.word	0x08003091
 8003080:	080030a5 	.word	0x080030a5
 8003084:	080032e5 	.word	0x080032e5
 8003088:	08003151 	.word	0x08003151
 800308c:	08003247 	.word	0x08003247
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (Select()) res = RES_OK;
 8003090:	f7ff fd1f 	bl	8002ad2 <Select>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8128 	beq.w	80032ec <disk_ioctl+0x2b0>
 800309c:	2300      	movs	r3, #0
 800309e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80030a2:	e123      	b.n	80032ec <disk_ioctl+0x2b0>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80030a4:	2100      	movs	r1, #0
 80030a6:	2009      	movs	r0, #9
 80030a8:	f7ff fd84 	bl	8002bb4 <send_cmd>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 811e 	bne.w	80032f0 <disk_ioctl+0x2b4>
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	2110      	movs	r1, #16
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fd1e 	bl	8002afc <rcvr_datablock>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8114 	beq.w	80032f0 <disk_ioctl+0x2b4>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80030c8:	7b3b      	ldrb	r3, [r7, #12]
 80030ca:	099b      	lsrs	r3, r3, #6
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d111      	bne.n	80030f6 <disk_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80030d2:	7d7b      	ldrb	r3, [r7, #21]
 80030d4:	461a      	mov	r2, r3
 80030d6:	7d3b      	ldrb	r3, [r7, #20]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	4413      	add	r3, r2
 80030dc:	461a      	mov	r2, r3
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80030e6:	4413      	add	r3, r2
 80030e8:	3301      	adds	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
				*(LBA_t*)buff = csize << 10;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	029a      	lsls	r2, r3, #10
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e028      	b.n	8003148 <disk_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80030f6:	7c7b      	ldrb	r3, [r7, #17]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	7dbb      	ldrb	r3, [r7, #22]
 8003100:	09db      	lsrs	r3, r3, #7
 8003102:	b2db      	uxtb	r3, r3
 8003104:	4413      	add	r3, r2
 8003106:	b2da      	uxtb	r2, r3
 8003108:	7d7b      	ldrb	r3, [r7, #21]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f003 0306 	and.w	r3, r3, #6
 8003112:	b2db      	uxtb	r3, r3
 8003114:	4413      	add	r3, r2
 8003116:	b2db      	uxtb	r3, r3
 8003118:	3302      	adds	r3, #2
 800311a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800311e:	7d3b      	ldrb	r3, [r7, #20]
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	441a      	add	r2, r3
 800312c:	7cbb      	ldrb	r3, [r7, #18]
 800312e:	029b      	lsls	r3, r3, #10
 8003130:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003134:	4413      	add	r3, r2
 8003136:	3301      	adds	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
				*(LBA_t*)buff = csize << (n - 9);
 800313a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800313e:	3b09      	subs	r3, #9
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	409a      	lsls	r2, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800314e:	e0cf      	b.n	80032f0 <disk_ioctl+0x2b4>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003150:	4b72      	ldr	r3, [pc, #456]	; (800331c <disk_ioctl+0x2e0>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d031      	beq.n	80031c0 <disk_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800315c:	2100      	movs	r1, #0
 800315e:	208d      	movs	r0, #141	; 0x8d
 8003160:	f7ff fd28 	bl	8002bb4 <send_cmd>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 80c4 	bne.w	80032f4 <disk_ioctl+0x2b8>
				xchg_spi(0xFF);
 800316c:	20ff      	movs	r0, #255	; 0xff
 800316e:	f7ff fc35 	bl	80029dc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003172:	f107 030c 	add.w	r3, r7, #12
 8003176:	2110      	movs	r1, #16
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fcbf 	bl	8002afc <rcvr_datablock>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80b7 	beq.w	80032f4 <disk_ioctl+0x2b8>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003186:	2330      	movs	r3, #48	; 0x30
 8003188:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800318c:	e007      	b.n	800319e <disk_ioctl+0x162>
 800318e:	20ff      	movs	r0, #255	; 0xff
 8003190:	f7ff fc24 	bl	80029dc <xchg_spi>
 8003194:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003198:	3b01      	subs	r3, #1
 800319a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800319e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f3      	bne.n	800318e <disk_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80031a6:	7dbb      	ldrb	r3, [r7, #22]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	2310      	movs	r3, #16
 80031b0:	fa03 f202 	lsl.w	r2, r3, r2
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80031be:	e099      	b.n	80032f4 <disk_ioctl+0x2b8>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80031c0:	2100      	movs	r1, #0
 80031c2:	2009      	movs	r0, #9
 80031c4:	f7ff fcf6 	bl	8002bb4 <send_cmd>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 8092 	bne.w	80032f4 <disk_ioctl+0x2b8>
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	2110      	movs	r1, #16
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fc90 	bl	8002afc <rcvr_datablock>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8088 	beq.w	80032f4 <disk_ioctl+0x2b8>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80031e4:	4b4d      	ldr	r3, [pc, #308]	; (800331c <disk_ioctl+0x2e0>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d012      	beq.n	8003216 <disk_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80031f0:	7dbb      	ldrb	r3, [r7, #22]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80031f8:	7dfa      	ldrb	r2, [r7, #23]
 80031fa:	09d2      	lsrs	r2, r2, #7
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	4413      	add	r3, r2
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	7e7b      	ldrb	r3, [r7, #25]
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	b2db      	uxtb	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	461a      	mov	r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e013      	b.n	800323e <disk_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003216:	7dbb      	ldrb	r3, [r7, #22]
 8003218:	109b      	asrs	r3, r3, #2
 800321a:	b29b      	uxth	r3, r3
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	3301      	adds	r3, #1
 8003222:	7dfa      	ldrb	r2, [r7, #23]
 8003224:	00d2      	lsls	r2, r2, #3
 8003226:	f002 0218 	and.w	r2, r2, #24
 800322a:	7df9      	ldrb	r1, [r7, #23]
 800322c:	0949      	lsrs	r1, r1, #5
 800322e:	b2c9      	uxtb	r1, r1
 8003230:	440a      	add	r2, r1
 8003232:	3201      	adds	r2, #1
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	461a      	mov	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003244:	e056      	b.n	80032f4 <disk_ioctl+0x2b8>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003246:	4b35      	ldr	r3, [pc, #212]	; (800331c <disk_ioctl+0x2e0>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	f003 0306 	and.w	r3, r3, #6
 800324e:	2b00      	cmp	r3, #0
 8003250:	d052      	beq.n	80032f8 <disk_ioctl+0x2bc>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003252:	f107 020c 	add.w	r2, r7, #12
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2133      	movs	r1, #51	; 0x33
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff feee 	bl	800303c <disk_ioctl>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d14a      	bne.n	80032fc <disk_ioctl+0x2c0>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003266:	7b3b      	ldrb	r3, [r7, #12]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d104      	bne.n	800327a <disk_ioctl+0x23e>
 8003270:	7dbb      	ldrb	r3, [r7, #22]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d042      	beq.n	8003300 <disk_ioctl+0x2c4>
		dp = buff; st = (DWORD)dp[0]; ed = (DWORD)dp[1];	/* Load sector block */
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	623b      	str	r3, [r7, #32]
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	3304      	adds	r3, #4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800328c:	4b23      	ldr	r3, [pc, #140]	; (800331c <disk_ioctl+0x2e0>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <disk_ioctl+0x268>
			st *= 512; ed *= 512;
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	025b      	lsls	r3, r3, #9
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	025b      	lsls	r3, r3, #9
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80032a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a6:	2020      	movs	r0, #32
 80032a8:	f7ff fc84 	bl	8002bb4 <send_cmd>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d128      	bne.n	8003304 <disk_ioctl+0x2c8>
 80032b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b4:	2021      	movs	r0, #33	; 0x21
 80032b6:	f7ff fc7d 	bl	8002bb4 <send_cmd>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d121      	bne.n	8003304 <disk_ioctl+0x2c8>
 80032c0:	2100      	movs	r1, #0
 80032c2:	2026      	movs	r0, #38	; 0x26
 80032c4:	f7ff fc76 	bl	8002bb4 <send_cmd>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11a      	bne.n	8003304 <disk_ioctl+0x2c8>
 80032ce:	f247 5030 	movw	r0, #30000	; 0x7530
 80032d2:	f7ff fbd5 	bl	8002a80 <wait_ready>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <disk_ioctl+0x2c8>
			res = RES_OK;	/* FatFs does not check result of this command */
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80032e2:	e00f      	b.n	8003304 <disk_ioctl+0x2c8>

	default:
		res = RES_PARERR;
 80032e4:	2304      	movs	r3, #4
 80032e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80032ea:	e00c      	b.n	8003306 <disk_ioctl+0x2ca>
		break;
 80032ec:	bf00      	nop
 80032ee:	e00a      	b.n	8003306 <disk_ioctl+0x2ca>
		break;
 80032f0:	bf00      	nop
 80032f2:	e008      	b.n	8003306 <disk_ioctl+0x2ca>
		break;
 80032f4:	bf00      	nop
 80032f6:	e006      	b.n	8003306 <disk_ioctl+0x2ca>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80032f8:	bf00      	nop
 80032fa:	e004      	b.n	8003306 <disk_ioctl+0x2ca>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80032fc:	bf00      	nop
 80032fe:	e002      	b.n	8003306 <disk_ioctl+0x2ca>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <disk_ioctl+0x2ca>
		break;
 8003304:	bf00      	nop
	}

	deselect();
 8003306:	f7ff fbdb 	bl	8002ac0 <deselect>

	return res;
 800330a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800330e:	4618      	mov	r0, r3
 8003310:	3730      	adds	r7, #48	; 0x30
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000009 	.word	0x20000009
 800331c:	2000009c 	.word	0x2000009c

08003320 <disk_timerproc>:
/* This function must be called from timer interrupt routine in period
/  of 1 ms to generate card control timing.
*/

void disk_timerproc (void)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
	WORD n;

	n = Timer1;						/* 1kHz decrement timer stopped at 0 */
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <disk_timerproc+0x40>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	80fb      	strh	r3, [r7, #6]
	if (n) Timer1 = --n;
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <disk_timerproc+0x1e>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	3b01      	subs	r3, #1
 8003336:	80fb      	strh	r3, [r7, #6]
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <disk_timerproc+0x40>)
 800333c:	6013      	str	r3, [r2, #0]
	n = Timer2;
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <disk_timerproc+0x44>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	80fb      	strh	r3, [r7, #6]
	if (n) Timer2 = --n;
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <disk_timerproc+0x36>
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	3b01      	subs	r3, #1
 800334e:	80fb      	strh	r3, [r7, #6]
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <disk_timerproc+0x44>)
 8003354:	6013      	str	r3, [r2, #0]

}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	20000094 	.word	0x20000094
 8003364:	20000098 	.word	0x20000098

08003368 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3301      	adds	r3, #1
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003378:	89fb      	ldrh	r3, [r7, #14]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	b21a      	sxth	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b21b      	sxth	r3, r3
 8003384:	4313      	orrs	r3, r2
 8003386:	b21b      	sxth	r3, r3
 8003388:	81fb      	strh	r3, [r7, #14]
	return rv;
 800338a:	89fb      	ldrh	r3, [r7, #14]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3303      	adds	r3, #3
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	3202      	adds	r2, #2
 80033ae:	7812      	ldrb	r2, [r2, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	3201      	adds	r2, #1
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
	return rv;
 80033ce:	68fb      	ldr	r3, [r7, #12]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80033da:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3307      	adds	r3, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f04f 0400 	mov.w	r4, #0
 80033f0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 80033f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80033f8:	f04f 0b00 	mov.w	fp, #0
 80033fc:	f04f 0c00 	mov.w	ip, #0
 8003400:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8003404:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003408:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	3206      	adds	r2, #6
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	b2d1      	uxtb	r1, r2
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	ea4b 0301 	orr.w	r3, fp, r1
 800341c:	ea4c 0402 	orr.w	r4, ip, r2
 8003420:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8003424:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003428:	f04f 0b00 	mov.w	fp, #0
 800342c:	f04f 0c00 	mov.w	ip, #0
 8003430:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8003434:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003438:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	3205      	adds	r2, #5
 8003440:	7812      	ldrb	r2, [r2, #0]
 8003442:	b2d1      	uxtb	r1, r2
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	ea4b 0301 	orr.w	r3, fp, r1
 800344c:	ea4c 0402 	orr.w	r4, ip, r2
 8003450:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8003454:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003458:	f04f 0b00 	mov.w	fp, #0
 800345c:	f04f 0c00 	mov.w	ip, #0
 8003460:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8003464:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003468:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	3204      	adds	r2, #4
 8003470:	7812      	ldrb	r2, [r2, #0]
 8003472:	b2d1      	uxtb	r1, r2
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	ea4b 0301 	orr.w	r3, fp, r1
 800347c:	ea4c 0402 	orr.w	r4, ip, r2
 8003480:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8003484:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003488:	f04f 0b00 	mov.w	fp, #0
 800348c:	f04f 0c00 	mov.w	ip, #0
 8003490:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8003494:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003498:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	3203      	adds	r2, #3
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	b2d1      	uxtb	r1, r2
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	ea4b 0301 	orr.w	r3, fp, r1
 80034ac:	ea4c 0402 	orr.w	r4, ip, r2
 80034b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 80034b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80034b8:	f04f 0b00 	mov.w	fp, #0
 80034bc:	f04f 0c00 	mov.w	ip, #0
 80034c0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80034c4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80034c8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	3202      	adds	r2, #2
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	b2d1      	uxtb	r1, r2
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	ea4b 0301 	orr.w	r3, fp, r1
 80034dc:	ea4c 0402 	orr.w	r4, ip, r2
 80034e0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 80034e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80034e8:	f04f 0b00 	mov.w	fp, #0
 80034ec:	f04f 0c00 	mov.w	ip, #0
 80034f0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80034f4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80034f8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	3201      	adds	r2, #1
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	b2d1      	uxtb	r1, r2
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	ea4b 0301 	orr.w	r3, fp, r1
 800350c:	ea4c 0402 	orr.w	r4, ip, r2
 8003510:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8003514:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003518:	f04f 0b00 	mov.w	fp, #0
 800351c:	f04f 0c00 	mov.w	ip, #0
 8003520:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8003524:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8003528:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	b2d1      	uxtb	r1, r2
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	ea4b 0301 	orr.w	r3, fp, r1
 800353a:	ea4c 0402 	orr.w	r4, ip, r2
 800353e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 8003542:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8003546:	4618      	mov	r0, r3
 8003548:	4621      	mov	r1, r4
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8003552:	4770      	bx	lr

08003554 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	887a      	ldrh	r2, [r7, #2]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80035de:	b490      	push	{r4, r7}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	60fa      	str	r2, [r7, #12]
 80035f0:	783a      	ldrb	r2, [r7, #0]
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	f04f 0400 	mov.w	r4, #0
 8003600:	0a0b      	lsrs	r3, r1, #8
 8003602:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003606:	0a14      	lsrs	r4, r2, #8
 8003608:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	60fa      	str	r2, [r7, #12]
 8003612:	783a      	ldrb	r2, [r7, #0]
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e9d7 1200 	ldrd	r1, r2, [r7]
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	f04f 0400 	mov.w	r4, #0
 8003622:	0a0b      	lsrs	r3, r1, #8
 8003624:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003628:	0a14      	lsrs	r4, r2, #8
 800362a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	60fa      	str	r2, [r7, #12]
 8003634:	783a      	ldrb	r2, [r7, #0]
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	e9d7 1200 	ldrd	r1, r2, [r7]
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	f04f 0400 	mov.w	r4, #0
 8003644:	0a0b      	lsrs	r3, r1, #8
 8003646:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800364a:	0a14      	lsrs	r4, r2, #8
 800364c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	60fa      	str	r2, [r7, #12]
 8003656:	783a      	ldrb	r2, [r7, #0]
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	f04f 0400 	mov.w	r4, #0
 8003666:	0a0b      	lsrs	r3, r1, #8
 8003668:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800366c:	0a14      	lsrs	r4, r2, #8
 800366e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	60fa      	str	r2, [r7, #12]
 8003678:	783a      	ldrb	r2, [r7, #0]
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	f04f 0400 	mov.w	r4, #0
 8003688:	0a0b      	lsrs	r3, r1, #8
 800368a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800368e:	0a14      	lsrs	r4, r2, #8
 8003690:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	60fa      	str	r2, [r7, #12]
 800369a:	783a      	ldrb	r2, [r7, #0]
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	f04f 0400 	mov.w	r4, #0
 80036aa:	0a0b      	lsrs	r3, r1, #8
 80036ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036b0:	0a14      	lsrs	r4, r2, #8
 80036b2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	60fa      	str	r2, [r7, #12]
 80036bc:	783a      	ldrb	r2, [r7, #0]
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	f04f 0400 	mov.w	r4, #0
 80036cc:	0a0b      	lsrs	r3, r1, #8
 80036ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036d2:	0a14      	lsrs	r4, r2, #8
 80036d4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	60fa      	str	r2, [r7, #12]
 80036de:	783a      	ldrb	r2, [r7, #0]
 80036e0:	701a      	strb	r2, [r3, #0]
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc90      	pop	{r4, r7}
 80036ea:	4770      	bx	lr

080036ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	1c53      	adds	r3, r2, #1
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	6179      	str	r1, [r7, #20]
 8003712:	7812      	ldrb	r2, [r2, #0]
 8003714:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3b01      	subs	r3, #1
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f1      	bne.n	8003706 <mem_cpy+0x1a>
	}
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	617a      	str	r2, [r7, #20]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f3      	bne.n	800373c <mem_set+0x10>
}
 8003754:	bf00      	nop
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr

0800375e <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 800375e:	b480      	push	{r7}
 8003760:	b089      	sub	sp, #36	; 0x24
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	61fa      	str	r2, [r7, #28]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	4619      	mov	r1, r3
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	61ba      	str	r2, [r7, #24]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	1acb      	subs	r3, r1, r3
 800378a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <mem_cmp+0x40>
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0eb      	beq.n	8003776 <mem_cmp+0x18>

	return r;
 800379e:	697b      	ldr	r3, [r7, #20]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3724      	adds	r7, #36	; 0x24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80037b4:	e002      	b.n	80037bc <chk_chr+0x12>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3301      	adds	r3, #1
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <chk_chr+0x26>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d1f2      	bne.n	80037b6 <chk_chr+0xc>
	return *str;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	781b      	ldrb	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <dbc_1st>:


/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 80037e8:	2281      	movs	r2, #129	; 0x81
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d30f      	bcc.n	8003810 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 80037f0:	229f      	movs	r2, #159	; 0x9f
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d801      	bhi.n	80037fc <dbc_1st+0x1e>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e00a      	b.n	8003812 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 80037fc:	22e0      	movs	r2, #224	; 0xe0
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	4293      	cmp	r3, r2
 8003802:	d305      	bcc.n	8003810 <dbc_1st+0x32>
 8003804:	22fc      	movs	r2, #252	; 0xfc
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	4293      	cmp	r3, r2
 800380a:	d801      	bhi.n	8003810 <dbc_1st+0x32>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	613b      	str	r3, [r7, #16]

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get an encoding unit */
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	613a      	str	r2, [r7, #16]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	617b      	str	r3, [r7, #20]
	if (uc & 0x80) {	/* Multiple byte code? */
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d065      	beq.n	800390a <tchar2uni+0xee>
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003844:	2bc0      	cmp	r3, #192	; 0xc0
 8003846:	d106      	bne.n	8003856 <tchar2uni+0x3a>
			uc &= 0x1F; nf = 1;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	2301      	movs	r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e01a      	b.n	800388c <tchar2uni+0x70>
		} else {
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385c:	2be0      	cmp	r3, #224	; 0xe0
 800385e:	d106      	bne.n	800386e <tchar2uni+0x52>
				uc &= 0x0F; nf = 2;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	2302      	movs	r3, #2
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e00e      	b.n	800388c <tchar2uni+0x70>
			} else {
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003874:	2bf0      	cmp	r3, #240	; 0xf0
 8003876:	d106      	bne.n	8003886 <tchar2uni+0x6a>
					uc &= 0x07; nf = 3;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	2303      	movs	r3, #3
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e002      	b.n	800388c <tchar2uni+0x70>
				} else {					/* Wrong sequence */
					return 0xFFFFFFFF;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	e042      	b.n	8003912 <tchar2uni+0xf6>
				}
			}
		}
		do {	/* Get trailing bytes */
			b = (BYTE)*p++;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	613a      	str	r2, [r7, #16]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	72fb      	strb	r3, [r7, #11]
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 8003896:	7afb      	ldrb	r3, [r7, #11]
 8003898:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	d002      	beq.n	80038a6 <tchar2uni+0x8a>
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
 80038a4:	e035      	b.n	8003912 <tchar2uni+0xf6>
			uc = uc << 6 | (b & 0x3F);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	019a      	lsls	r2, r3, #6
 80038aa:	7afb      	ldrb	r3, [r7, #11]
 80038ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
		} while (--nf != 0);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e5      	bne.n	800388c <tchar2uni+0x70>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b7f      	cmp	r3, #127	; 0x7f
 80038c4:	d90b      	bls.n	80038de <tchar2uni+0xc2>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80038cc:	d303      	bcc.n	80038d6 <tchar2uni+0xba>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80038d4:	d303      	bcc.n	80038de <tchar2uni+0xc2>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80038dc:	d302      	bcc.n	80038e4 <tchar2uni+0xc8>
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	e016      	b.n	8003912 <tchar2uni+0xf6>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ea:	d30e      	bcc.n	800390a <tchar2uni+0xee>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80038f2:	019a      	lsls	r2, r3, #6
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <tchar2uni+0x100>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80038fe:	4313      	orrs	r3, r2
 8003900:	f043 4358 	orr.w	r3, r3, #3623878656	; 0xd8000000
 8003904:	f443 435c 	orr.w	r3, r3, #56320	; 0xdc00
 8003908:	617b      	str	r3, [r7, #20]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	601a      	str	r2, [r3, #0]
	return uc;
 8003910:	697b      	ldr	r3, [r7, #20]
}
 8003912:	4618      	mov	r0, r3
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	03ff0000 	.word	0x03ff0000

08003920 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	78db      	ldrb	r3, [r3, #3]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d02c      	beq.n	800398e <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	7858      	ldrb	r0, [r3, #1]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003942:	2301      	movs	r3, #1
 8003944:	f7ff fafc 	bl	8002f40 <disk_write>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11d      	bne.n	800398a <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	1ad2      	subs	r2, r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	429a      	cmp	r2, r3
 8003964:	d213      	bcs.n	800398e <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	789b      	ldrb	r3, [r3, #2]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d10f      	bne.n	800398e <sync_window+0x6e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7858      	ldrb	r0, [r3, #1]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	441a      	add	r2, r3
 8003982:	2301      	movs	r3, #1
 8003984:	f7ff fadc 	bl	8002f40 <disk_write>
 8003988:	e001      	b.n	800398e <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d01b      	beq.n	80039e8 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ffb5 	bl	8003920 <sync_window>
 80039b6:	4603      	mov	r3, r0
 80039b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7858      	ldrb	r0, [r3, #1]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80039ca:	2301      	movs	r3, #1
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	f7ff fa4f 	bl	8002e70 <disk_read>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff8f 	bl	8003920 <sync_window>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d158      	bne.n	8003abe <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d148      	bne.n	8003aa6 <sync_fs+0xb2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	791b      	ldrb	r3, [r3, #4]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d144      	bne.n	8003aa6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	333c      	adds	r3, #60	; 0x3c
 8003a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fe80 	bl	800372c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	333c      	adds	r3, #60	; 0x3c
 8003a30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003a34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fd8b 	bl	8003554 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	333c      	adds	r3, #60	; 0x3c
 8003a42:	4921      	ldr	r1, [pc, #132]	; (8003ac8 <sync_fs+0xd4>)
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fd9f 	bl	8003588 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	333c      	adds	r3, #60	; 0x3c
 8003a4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003a52:	491e      	ldr	r1, [pc, #120]	; (8003acc <sync_fs+0xd8>)
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fd97 	bl	8003588 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	333c      	adds	r3, #60	; 0x3c
 8003a5e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f7ff fd8d 	bl	8003588 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	333c      	adds	r3, #60	; 0x3c
 8003a72:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f7ff fd83 	bl	8003588 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7858      	ldrb	r0, [r3, #1]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f7ff fa50 	bl	8002f40 <disk_write>
			fs->fsi_flag = 0;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fac4 	bl	800303c <disk_ioctl>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <sync_fs+0xca>
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	41615252 	.word	0x41615252
 8003acc:	61417272 	.word	0x61417272

08003ad0 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	3b02      	subs	r3, #2
 8003ade:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	3b02      	subs	r3, #2
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d301      	bcc.n	8003af0 <clst2sect+0x20>
 8003aec:	2300      	movs	r3, #0
 8003aee:	e008      	b.n	8003b02 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	895b      	ldrh	r3, [r3, #10]
 8003af8:	4619      	mov	r1, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	fb03 f301 	mul.w	r3, r3, r1
 8003b00:	4413      	add	r3, r2
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b089      	sub	sp, #36	; 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d904      	bls.n	8003b2c <get_fat+0x20>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	e10f      	b.n	8003d52 <get_fat+0x246>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	f200 80fb 	bhi.w	8003d3a <get_fat+0x22e>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <get_fat+0x40>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003be5 	.word	0x08003be5
 8003b54:	08003c1b 	.word	0x08003c1b
 8003b58:	08003c55 	.word	0x08003c55
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	0a5b      	lsrs	r3, r3, #9
 8003b72:	4413      	add	r3, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	69b8      	ldr	r0, [r7, #24]
 8003b78:	f7ff ff0e 	bl	8003998 <move_window>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f040 80de 	bne.w	8003d40 <get_fat+0x234>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	60fa      	str	r2, [r7, #12]
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4413      	add	r3, r2
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b96:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	0a5b      	lsrs	r3, r3, #9
 8003ba0:	4413      	add	r3, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	69b8      	ldr	r0, [r7, #24]
 8003ba6:	f7ff fef7 	bl	8003998 <move_window>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f040 80c9 	bne.w	8003d44 <get_fat+0x238>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <get_fat+0xce>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	e002      	b.n	8003be0 <get_fat+0xd4>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	61fb      	str	r3, [r7, #28]
			break;
 8003be2:	e0b6      	b.n	8003d52 <get_fat+0x246>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	4413      	add	r3, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	69b8      	ldr	r0, [r7, #24]
 8003bf2:	f7ff fed1 	bl	8003998 <move_window>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 80a5 	bne.w	8003d48 <get_fat+0x23c>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003c0c:	4413      	add	r3, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fbaa 	bl	8003368 <ld_word>
 8003c14:	4603      	mov	r3, r0
 8003c16:	61fb      	str	r3, [r7, #28]
			break;
 8003c18:	e09b      	b.n	8003d52 <get_fat+0x246>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	09db      	lsrs	r3, r3, #7
 8003c22:	4413      	add	r3, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	69b8      	ldr	r0, [r7, #24]
 8003c28:	f7ff feb6 	bl	8003998 <move_window>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 808c 	bne.w	8003d4c <get_fat+0x240>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003c42:	4413      	add	r3, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fba6 	bl	8003396 <ld_dword>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c50:	61fb      	str	r3, [r7, #28]
			break;
 8003c52:	e07e      	b.n	8003d52 <get_fat+0x246>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f103 0410 	add.w	r4, r3, #16
 8003c5a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c5e:	4323      	orrs	r3, r4
 8003c60:	d003      	beq.n	8003c6a <get_fat+0x15e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d103      	bne.n	8003c72 <get_fat+0x166>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	79db      	ldrb	r3, [r3, #7]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d163      	bne.n	8003d3a <get_fat+0x22e>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f103 0410 	add.w	r4, r3, #16
 8003c82:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c86:	f113 31ff 	adds.w	r1, r3, #4294967295
 8003c8a:	f144 32ff 	adc.w	r2, r4, #4294967295
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	f04f 0400 	mov.w	r4, #0
 8003c96:	0a4b      	lsrs	r3, r1, #9
 8003c98:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003c9c:	0a54      	lsrs	r4, r2, #9
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	895b      	ldrh	r3, [r3, #10]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	79db      	ldrb	r3, [r3, #7]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d10e      	bne.n	8003cd0 <get_fat+0x1c4>
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d80a      	bhi.n	8003cd0 <get_fat+0x1c4>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d002      	beq.n	8003cc8 <get_fat+0x1bc>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	e001      	b.n	8003ccc <get_fat+0x1c0>
 8003cc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003ccc:	61fb      	str	r3, [r7, #28]
					break;
 8003cce:	e040      	b.n	8003d52 <get_fat+0x246>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	79db      	ldrb	r3, [r3, #7]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d108      	bne.n	8003cea <get_fat+0x1de>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d203      	bcs.n	8003cea <get_fat+0x1de>
					val = clst + 1; 	/* Generate the value */
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
					break;
 8003ce8:	e033      	b.n	8003d52 <get_fat+0x246>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	79db      	ldrb	r3, [r3, #7]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d023      	beq.n	8003d3a <get_fat+0x22e>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <get_fat+0x1f6>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8003cfa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003cfe:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8003d00:	e027      	b.n	8003d52 <get_fat+0x246>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	09db      	lsrs	r3, r3, #7
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	69b8      	ldr	r0, [r7, #24]
 8003d10:	f7ff fe42 	bl	8003998 <move_window>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11a      	bne.n	8003d50 <get_fat+0x244>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003d28:	4413      	add	r3, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fb33 	bl	8003396 <ld_dword>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d36:	61fb      	str	r3, [r7, #28]
					break;
 8003d38:	e00b      	b.n	8003d52 <get_fat+0x246>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e008      	b.n	8003d52 <get_fat+0x246>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d40:	bf00      	nop
 8003d42:	e006      	b.n	8003d52 <get_fat+0x246>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d44:	bf00      	nop
 8003d46:	e004      	b.n	8003d52 <get_fat+0x246>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d48:	bf00      	nop
 8003d4a:	e002      	b.n	8003d52 <get_fat+0x246>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <get_fat+0x246>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d50:	bf00      	nop
		}
	}

	return val;
 8003d52:	69fb      	ldr	r3, [r7, #28]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3724      	adds	r7, #36	; 0x24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd90      	pop	{r4, r7, pc}

08003d5c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003d5c:	b590      	push	{r4, r7, lr}
 8003d5e:	b089      	sub	sp, #36	; 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	f240 80e2 	bls.w	8003f38 <put_fat+0x1dc>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	f080 80dc 	bcs.w	8003f38 <put_fat+0x1dc>
		switch (fs->fs_type) {
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	f200 80d6 	bhi.w	8003f38 <put_fat+0x1dc>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <put_fat+0x38>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003e81 	.word	0x08003e81
 8003d9c:	08003ec1 	.word	0x08003ec1
 8003da0:	08003ec1 	.word	0x08003ec1
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4413      	add	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	0a5b      	lsrs	r3, r3, #9
 8003dba:	4413      	add	r3, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fdea 	bl	8003998 <move_window>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003dc8:	7ffb      	ldrb	r3, [r7, #31]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f040 80ad 	bne.w	8003f2a <put_fat+0x1ce>
			p = fs->win + bc++ % SS(fs);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	1c59      	adds	r1, r3, #1
 8003dda:	61b9      	str	r1, [r7, #24]
 8003ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de0:	4413      	add	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <put_fat+0xae>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	b25a      	sxtb	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	b25b      	sxtb	r3, r3
 8003e02:	4313      	orrs	r3, r2
 8003e04:	b25b      	sxtb	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	e001      	b.n	8003e0e <put_fat+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	0a5b      	lsrs	r3, r3, #9
 8003e20:	4413      	add	r3, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff fdb7 	bl	8003998 <move_window>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e2e:	7ffb      	ldrb	r3, [r7, #31]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d17c      	bne.n	8003f2e <put_fat+0x1d2>
			p = fs->win + bc % SS(fs);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e40:	4413      	add	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <put_fat+0xfa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	e00e      	b.n	8003e74 <put_fat+0x118>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b25b      	sxtb	r3, r3
 8003e5c:	f023 030f 	bic.w	r3, r3, #15
 8003e60:	b25a      	sxtb	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	70da      	strb	r2, [r3, #3]
			break;
 8003e7e:	e05b      	b.n	8003f38 <put_fat+0x1dc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	4413      	add	r3, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7ff fd83 	bl	8003998 <move_window>
 8003e92:	4603      	mov	r3, r0
 8003e94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d14a      	bne.n	8003f32 <put_fat+0x1d6>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003eaa:	4413      	add	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fb4e 	bl	8003554 <st_word>
			fs->wflag = 1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	70da      	strb	r2, [r3, #3]
			break;
 8003ebe:	e03b      	b.n	8003f38 <put_fat+0x1dc>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	09db      	lsrs	r3, r3, #7
 8003ec8:	4413      	add	r3, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fd63 	bl	8003998 <move_window>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ed6:	7ffb      	ldrb	r3, [r7, #31]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d12c      	bne.n	8003f36 <put_fat+0x1da>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d012      	beq.n	8003f0a <put_fat+0x1ae>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003ef8:	4413      	add	r3, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fa4b 	bl	8003396 <ld_dword>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f06:	4323      	orrs	r3, r4
 8003f08:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003f18:	4413      	add	r3, r2
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fb33 	bl	8003588 <st_dword>
			fs->wflag = 1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	70da      	strb	r2, [r3, #3]
			break;
 8003f28:	e006      	b.n	8003f38 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8003f2a:	bf00      	nop
 8003f2c:	e004      	b.n	8003f38 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8003f2e:	bf00      	nop
 8003f30:	e002      	b.n	8003f38 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8003f36:	bf00      	nop
		}
	}
	return res;
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3724      	adds	r7, #36	; 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd90      	pop	{r4, r7, pc}
 8003f42:	bf00      	nop

08003f44 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	3b02      	subs	r3, #2
 8003f54:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	3b02      	subs	r3, #2
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d301      	bcc.n	8003f66 <find_bitmap+0x22>
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	0b1b      	lsrs	r3, r3, #12
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff fd0a 	bl	8003998 <move_window>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <find_bitmap+0x4c>
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	e051      	b.n	8004034 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	08db      	lsrs	r3, r3, #3
 8003f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	4413      	add	r3, r2
 8003fb0:	333c      	adds	r3, #60	; 0x3c
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb8:	4013      	ands	r3, r2
 8003fba:	74fb      	strb	r3, [r7, #19]
 8003fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	3b02      	subs	r3, #2
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d307      	bcc.n	8003fe8 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fe6:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d106      	bne.n	800400a <find_bitmap+0xc6>
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	3302      	adds	r3, #2
 8004000:	e018      	b.n	8004034 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	d101      	bne.n	8004016 <find_bitmap+0xd2>
 8004012:	2300      	movs	r3, #0
 8004014:	e00e      	b.n	8004034 <find_bitmap+0xf0>
			} while (bm != 0);
 8004016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1c5      	bne.n	8003faa <find_bitmap+0x66>
			bm = 1;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	3301      	adds	r3, #1
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004030:	d3bb      	bcc.n	8003faa <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8004032:	e79e      	b.n	8003f72 <find_bitmap+0x2e>
	}
}
 8004034:	4618      	mov	r0, r3
 8004036:	3728      	adds	r7, #40	; 0x28
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3b02      	subs	r3, #2
 800404e:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	0b1b      	lsrs	r3, r3, #12
 8004058:	4413      	add	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	08db      	lsrs	r3, r3, #3
 8004060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004064:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	2201      	movs	r2, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	617a      	str	r2, [r7, #20]
 800407a:	4619      	mov	r1, r3
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff fc8b 	bl	8003998 <move_window>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <change_bitmap+0x50>
 8004088:	2301      	movs	r3, #1
 800408a:	e03d      	b.n	8004108 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	4413      	add	r3, r2
 8004092:	333c      	adds	r3, #60	; 0x3c
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	7ffb      	ldrb	r3, [r7, #31]
 8004098:	4013      	ands	r3, r2
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <change_bitmap+0x76>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e02a      	b.n	8004108 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	4413      	add	r3, r2
 80040b8:	333c      	adds	r3, #60	; 0x3c
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	7ffb      	ldrb	r3, [r7, #31]
 80040be:	4053      	eors	r3, r2
 80040c0:	b2d9      	uxtb	r1, r3
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	4413      	add	r3, r2
 80040c8:	333c      	adds	r3, #60	; 0x3c
 80040ca:	460a      	mov	r2, r1
 80040cc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <change_bitmap+0xa8>
 80040e0:	2300      	movs	r3, #0
 80040e2:	e011      	b.n	8004108 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 80040e4:	7ffb      	ldrb	r3, [r7, #31]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	7ffb      	ldrb	r3, [r7, #31]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1cd      	bne.n	800408c <change_bitmap+0x50>
			bm = 1;
 80040f0:	2301      	movs	r3, #1
 80040f2:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	3301      	adds	r3, #1
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004100:	d3c4      	bcc.n	800408c <change_bitmap+0x50>
		i = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8004106:	e7b5      	b.n	8004074 <change_bitmap+0x38>
	}
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	79db      	ldrb	r3, [r3, #7]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d121      	bne.n	8004164 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e014      	b.n	8004158 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	3301      	adds	r3, #1
 8004136:	461a      	mov	r2, r3
 8004138:	6979      	ldr	r1, [r7, #20]
 800413a:	f7ff fe0f 	bl	8003d5c <put_fat>
 800413e:	4603      	mov	r3, r0
 8004140:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <fill_first_frag+0x3c>
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	e00c      	b.n	8004166 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3301      	adds	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3b01      	subs	r3, #1
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e7      	bne.n	800412e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800417a:	e020      	b.n	80041be <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	1c59      	adds	r1, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d905      	bls.n	800419e <fill_last_frag+0x30>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	3302      	adds	r3, #2
 800419c:	e000      	b.n	80041a0 <fill_last_frag+0x32>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	461a      	mov	r2, r3
 80041a2:	f7ff fddb 	bl	8003d5c <put_fat>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <fill_last_frag+0x46>
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	e009      	b.n	80041c8 <fill_last_frag+0x5a>
		obj->n_frag--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	1e5a      	subs	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1da      	bne.n	800417c <fill_last_frag+0xe>
	}
	return FR_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d904      	bls.n	80041fe <remove_chain+0x2e>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d301      	bcc.n	8004202 <remove_chain+0x32>
 80041fe:	2302      	movs	r3, #2
 8004200:	e0c4      	b.n	800438c <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d014      	beq.n	8004232 <remove_chain+0x62>
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b04      	cmp	r3, #4
 800420e:	d103      	bne.n	8004218 <remove_chain+0x48>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	79db      	ldrb	r3, [r3, #7]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d00c      	beq.n	8004232 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004218:	f04f 32ff 	mov.w	r2, #4294967295
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	69b8      	ldr	r0, [r7, #24]
 8004220:	f7ff fd9c 	bl	8003d5c <put_fat>
 8004224:	4603      	mov	r3, r0
 8004226:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004228:	7ffb      	ldrb	r3, [r7, #31]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <remove_chain+0x62>
 800422e:	7ffb      	ldrb	r3, [r7, #31]
 8004230:	e0ac      	b.n	800438c <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff fc69 	bl	8003b0c <get_fat>
 800423a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d055      	beq.n	80042ee <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <remove_chain+0x7c>
 8004248:	2302      	movs	r3, #2
 800424a:	e09f      	b.n	800438c <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d101      	bne.n	8004258 <remove_chain+0x88>
 8004254:	2301      	movs	r3, #1
 8004256:	e099      	b.n	800438c <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d00b      	beq.n	8004278 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004260:	2200      	movs	r2, #0
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	69b8      	ldr	r0, [r7, #24]
 8004266:	f7ff fd79 	bl	8003d5c <put_fat>
 800426a:	4603      	mov	r3, r0
 800426c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800426e:	7ffb      	ldrb	r3, [r7, #31]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <remove_chain+0xa8>
 8004274:	7ffb      	ldrb	r3, [r7, #31]
 8004276:	e089      	b.n	800438c <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	3b02      	subs	r3, #2
 8004282:	429a      	cmp	r2, r3
 8004284:	d20b      	bcs.n	800429e <remove_chain+0xce>
			fs->free_clst++;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	791b      	ldrb	r3, [r3, #4]
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	b2da      	uxtb	r2, r3
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	711a      	strb	r2, [r3, #4]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	3301      	adds	r3, #1
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d102      	bne.n	80042ae <remove_chain+0xde>
			ecl = nxt;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	e017      	b.n	80042de <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d10f      	bne.n	80042d6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80042b6:	6a3a      	ldr	r2, [r7, #32]
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	2300      	movs	r3, #0
 80042c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c2:	69b8      	ldr	r0, [r7, #24]
 80042c4:	f7ff feba 	bl	800403c <change_bitmap>
 80042c8:	4603      	mov	r3, r0
 80042ca:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80042cc:	7ffb      	ldrb	r3, [r7, #31]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <remove_chain+0x106>
 80042d2:	7ffb      	ldrb	r3, [r7, #31]
 80042d4:	e05a      	b.n	800438c <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	623b      	str	r3, [r7, #32]
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3a2      	bcc.n	8004232 <remove_chain+0x62>
 80042ec:	e000      	b.n	80042f0 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80042ee:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d148      	bne.n	800438a <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	71da      	strb	r2, [r3, #7]
 8004304:	e041      	b.n	800438a <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	79db      	ldrb	r3, [r3, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d129      	bne.n	8004362 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8004314:	e017      	b.n	8004346 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff fbf7 	bl	8003b0c <get_fat>
 800431e:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d801      	bhi.n	800432a <remove_chain+0x15a>
 8004326:	2302      	movs	r3, #2
 8004328:	e030      	b.n	800438c <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d101      	bne.n	8004336 <remove_chain+0x166>
 8004332:	2301      	movs	r3, #1
 8004334:	e02a      	b.n	800438c <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3301      	adds	r3, #1
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	d107      	bne.n	8004350 <remove_chain+0x180>
					clst++;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3301      	adds	r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d1e3      	bne.n	8004316 <remove_chain+0x146>
 800434e:	e000      	b.n	8004352 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8004350:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	429a      	cmp	r2, r3
 8004358:	d117      	bne.n	800438a <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2202      	movs	r2, #2
 800435e:	71da      	strb	r2, [r3, #7]
 8004360:	e013      	b.n	800438a <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	79db      	ldrb	r3, [r3, #7]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d10f      	bne.n	800438a <remove_chain+0x1ba>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d30a      	bcc.n	800438a <remove_chain+0x1ba>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	4413      	add	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	429a      	cmp	r2, r3
 8004382:	d802      	bhi.n	800438a <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2202      	movs	r2, #2
 8004388:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3728      	adds	r7, #40	; 0x28
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10d      	bne.n	80043c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d004      	beq.n	80043c0 <create_chain+0x2c>
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d31b      	bcc.n	80043f8 <create_chain+0x64>
 80043c0:	2301      	movs	r3, #1
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e018      	b.n	80043f8 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80043c6:	6839      	ldr	r1, [r7, #0]
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff fb9f 	bl	8003b0c <get_fat>
 80043ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d801      	bhi.n	80043da <create_chain+0x46>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e113      	b.n	8004602 <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d101      	bne.n	80043e6 <create_chain+0x52>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	e10d      	b.n	8004602 <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d201      	bcs.n	80043f4 <create_chain+0x60>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	e106      	b.n	8004602 <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <create_chain+0x70>
 8004400:	2300      	movs	r3, #0
 8004402:	e0fe      	b.n	8004602 <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d165      	bne.n	80044d8 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800440c:	2201      	movs	r2, #1
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	6938      	ldr	r0, [r7, #16]
 8004412:	f7ff fd97 	bl	8003f44 <find_bitmap>
 8004416:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <create_chain+0x92>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d101      	bne.n	800442a <create_chain+0x96>
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	e0eb      	b.n	8004602 <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800442a:	2301      	movs	r3, #1
 800442c:	2201      	movs	r2, #1
 800442e:	69f9      	ldr	r1, [r7, #28]
 8004430:	6938      	ldr	r0, [r7, #16]
 8004432:	f7ff fe03 	bl	800403c <change_bitmap>
 8004436:	4603      	mov	r3, r0
 8004438:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d101      	bne.n	8004444 <create_chain+0xb0>
 8004440:	2301      	movs	r3, #1
 8004442:	e0de      	b.n	8004602 <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <create_chain+0xbc>
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e0d8      	b.n	8004602 <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	71da      	strb	r2, [r3, #7]
 800445c:	e011      	b.n	8004482 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	79db      	ldrb	r3, [r3, #7]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d10d      	bne.n	8004482 <create_chain+0xee>
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	3301      	adds	r3, #1
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	429a      	cmp	r2, r3
 800446e:	d008      	beq.n	8004482 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	1ad2      	subs	r2, r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2203      	movs	r2, #3
 8004480:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	79db      	ldrb	r3, [r3, #7]
 8004486:	2b02      	cmp	r3, #2
 8004488:	f000 8098 	beq.w	80045bc <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	3301      	adds	r3, #1
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	429a      	cmp	r2, r3
 8004494:	d10b      	bne.n	80044ae <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <create_chain+0x112>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	3301      	adds	r3, #1
 80044a4:	e000      	b.n	80044a8 <create_chain+0x114>
 80044a6:	2302      	movs	r3, #2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	61d3      	str	r3, [r2, #28]
 80044ac:	e086      	b.n	80045bc <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <create_chain+0x128>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	6839      	ldr	r1, [r7, #0]
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fe54 	bl	800416e <fill_last_frag>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d175      	bne.n	80045bc <create_chain+0x228>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	61da      	str	r2, [r3, #28]
 80044d6:	e071      	b.n	80045bc <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d129      	bne.n	8004538 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	3301      	adds	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d301      	bcc.n	80044f8 <create_chain+0x164>
 80044f4:	2302      	movs	r3, #2
 80044f6:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80044f8:	69f9      	ldr	r1, [r7, #28]
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fb06 	bl	8003b0c <get_fat>
 8004500:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d003      	beq.n	8004510 <create_chain+0x17c>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d101      	bne.n	8004514 <create_chain+0x180>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	e076      	b.n	8004602 <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00e      	beq.n	8004538 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d906      	bls.n	8004534 <create_chain+0x1a0>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	429a      	cmp	r2, r3
 800452e:	d201      	bcs.n	8004534 <create_chain+0x1a0>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d129      	bne.n	8004592 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	3301      	adds	r3, #1
 8004546:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	429a      	cmp	r2, r3
 8004550:	d307      	bcc.n	8004562 <create_chain+0x1ce>
					ncl = 2;
 8004552:	2302      	movs	r3, #2
 8004554:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	429a      	cmp	r2, r3
 800455c:	d901      	bls.n	8004562 <create_chain+0x1ce>
 800455e:	2300      	movs	r3, #0
 8004560:	e04f      	b.n	8004602 <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004562:	69f9      	ldr	r1, [r7, #28]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fad1 	bl	8003b0c <get_fat>
 800456a:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00e      	beq.n	8004590 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d003      	beq.n	8004580 <create_chain+0x1ec>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d101      	bne.n	8004584 <create_chain+0x1f0>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	e03e      	b.n	8004602 <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	429a      	cmp	r2, r3
 800458a:	d1da      	bne.n	8004542 <create_chain+0x1ae>
 800458c:	2300      	movs	r3, #0
 800458e:	e038      	b.n	8004602 <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 8004590:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8004592:	f04f 32ff 	mov.w	r2, #4294967295
 8004596:	69f9      	ldr	r1, [r7, #28]
 8004598:	6938      	ldr	r0, [r7, #16]
 800459a:	f7ff fbdf 	bl	8003d5c <put_fat>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <create_chain+0x228>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d006      	beq.n	80045bc <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	6938      	ldr	r0, [r7, #16]
 80045b4:	f7ff fbd2 	bl	8003d5c <put_fat>
 80045b8:	4603      	mov	r3, r0
 80045ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d116      	bne.n	80045f0 <create_chain+0x25c>
		fs->last_clst = ncl;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	3b02      	subs	r3, #2
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d804      	bhi.n	80045e0 <create_chain+0x24c>
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	1e5a      	subs	r2, r3, #1
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	791b      	ldrb	r3, [r3, #4]
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	711a      	strb	r2, [r3, #4]
 80045ee:	e007      	b.n	8004600 <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d102      	bne.n	80045fc <create_chain+0x268>
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e000      	b.n	80045fe <create_chain+0x26a>
 80045fc:	2301      	movs	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004600:	69fb      	ldr	r3, [r7, #28]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff f983 	bl	8003920 <sync_window>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <dir_clear+0x1a>
 8004620:	2301      	movs	r3, #1
 8004622:	e036      	b.n	8004692 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fa52 	bl	8003ad0 <clst2sect>
 800462c:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	333c      	adds	r3, #60	; 0x3c
 8004638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff f874 	bl	800372c <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	333c      	adds	r3, #60	; 0x3c
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	2301      	movs	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e003      	b.n	800465c <dir_clear+0x52>
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4413      	add	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	895b      	ldrh	r3, [r3, #10]
 8004660:	461a      	mov	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4293      	cmp	r3, r2
 8004666:	d20b      	bcs.n	8004680 <dir_clear+0x76>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7858      	ldrb	r0, [r3, #1]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	441a      	add	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	68f9      	ldr	r1, [r7, #12]
 8004676:	f7fe fc63 	bl	8002f40 <disk_write>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0e9      	beq.n	8004654 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	895b      	ldrh	r3, [r3, #10]
 8004684:	461a      	mov	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4293      	cmp	r3, r2
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d102      	bne.n	80046b8 <dir_sdi+0x1e>
 80046b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b6:	e001      	b.n	80046bc <dir_sdi+0x22>
 80046b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d904      	bls.n	80046cc <dir_sdi+0x32>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <dir_sdi+0x36>
		return FR_INT_ERR;
 80046cc:	2302      	movs	r3, #2
 80046ce:	e066      	b.n	800479e <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <dir_sdi+0x5c>
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d905      	bls.n	80046f6 <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10c      	bne.n	8004716 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	8912      	ldrh	r2, [r2, #8]
 8004704:	4293      	cmp	r3, r2
 8004706:	d301      	bcc.n	800470c <dir_sdi+0x72>
 8004708:	2302      	movs	r3, #2
 800470a:	e048      	b.n	800479e <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38
 8004714:	e029      	b.n	800476a <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	895b      	ldrh	r3, [r3, #10]
 800471a:	025b      	lsls	r3, r3, #9
 800471c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800471e:	e019      	b.n	8004754 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6979      	ldr	r1, [r7, #20]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff f9f1 	bl	8003b0c <get_fat>
 800472a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d101      	bne.n	8004738 <dir_sdi+0x9e>
 8004734:	2301      	movs	r3, #1
 8004736:	e032      	b.n	800479e <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d904      	bls.n	8004748 <dir_sdi+0xae>
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	429a      	cmp	r2, r3
 8004746:	d301      	bcc.n	800474c <dir_sdi+0xb2>
 8004748:	2302      	movs	r3, #2
 800474a:	e028      	b.n	800479e <dir_sdi+0x104>
			ofs -= csz;
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	429a      	cmp	r2, r3
 800475a:	d2e1      	bcs.n	8004720 <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 800475c:	6979      	ldr	r1, [r7, #20]
 800475e:	6938      	ldr	r0, [r7, #16]
 8004760:	f7ff f9b6 	bl	8003ad0 <clst2sect>
 8004764:	4602      	mov	r2, r0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	635a      	str	r2, [r3, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <dir_sdi+0xe2>
 8004778:	2302      	movs	r3, #2
 800477a:	e010      	b.n	800479e <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	0a5b      	lsrs	r3, r3, #9
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	441a      	add	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	3320      	adds	r3, #32
 80047bc:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d102      	bne.n	80047cc <dir_next+0x26>
 80047c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ca:	e001      	b.n	80047d0 <dir_next+0x2a>
 80047cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d802      	bhi.n	80047dc <dir_next+0x36>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <dir_next+0x42>
 80047e4:	2304      	movs	r3, #4
 80047e6:	e07f      	b.n	80048e8 <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d16d      	bne.n	80048ce <dir_next+0x128>
		dp->sect++;				/* Next sector */
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38

		if (dp->clust == 0) {	/* Static table */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	8912      	ldrh	r2, [r2, #8]
 800480c:	4293      	cmp	r3, r2
 800480e:	d35e      	bcc.n	80048ce <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
 8004816:	2304      	movs	r3, #4
 8004818:	e066      	b.n	80048e8 <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	0a5b      	lsrs	r3, r3, #9
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	8952      	ldrh	r2, [r2, #10]
 8004822:	3a01      	subs	r2, #1
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d151      	bne.n	80048ce <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7ff f96a 	bl	8003b0c <get_fat>
 8004838:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d801      	bhi.n	8004844 <dir_next+0x9e>
 8004840:	2302      	movs	r3, #2
 8004842:	e051      	b.n	80048e8 <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d101      	bne.n	8004850 <dir_next+0xaa>
 800484c:	2301      	movs	r3, #1
 800484e:	e04b      	b.n	80048e8 <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	429a      	cmp	r2, r3
 8004858:	d32f      	bcc.n	80048ba <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d104      	bne.n	800486a <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
 8004866:	2304      	movs	r3, #4
 8004868:	e03e      	b.n	80048e8 <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f7ff fd8e 	bl	8004394 <create_chain>
 8004878:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <dir_next+0xde>
 8004880:	2307      	movs	r3, #7
 8004882:	e031      	b.n	80048e8 <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <dir_next+0xe8>
 800488a:	2302      	movs	r3, #2
 800488c:	e02c      	b.n	80048e8 <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d101      	bne.n	800489a <dir_next+0xf4>
 8004896:	2301      	movs	r3, #1
 8004898:	e026      	b.n	80048e8 <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800489a:	6979      	ldr	r1, [r7, #20]
 800489c:	6938      	ldr	r0, [r7, #16]
 800489e:	f7ff feb4 	bl	800460a <dir_clear>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <dir_next+0x106>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e01d      	b.n	80048e8 <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	79db      	ldrb	r3, [r3, #7]
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 80048c0:	6979      	ldr	r1, [r7, #20]
 80048c2:	6938      	ldr	r0, [r7, #16]
 80048c4:	f7ff f904 	bl	8003ad0 <clst2sect>
 80048c8:	4602      	mov	r2, r0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e0:	441a      	add	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004900:	2100      	movs	r1, #0
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fec9 	bl	800469a <dir_sdi>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d140      	bne.n	8004994 <dir_alloc+0xa4>
		n = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	4619      	mov	r1, r3
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff f83b 	bl	8003998 <move_window>
 8004922:	4603      	mov	r3, r0
 8004924:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004926:	7dfb      	ldrb	r3, [r7, #23]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d132      	bne.n	8004992 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b04      	cmp	r3, #4
 8004932:	d108      	bne.n	8004946 <dir_alloc+0x56>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b25b      	sxtb	r3, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	09db      	lsrs	r3, r3, #7
 8004942:	b2db      	uxtb	r3, r3
 8004944:	e00f      	b.n	8004966 <dir_alloc+0x76>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2be5      	cmp	r3, #229	; 0xe5
 800494e:	d004      	beq.n	800495a <dir_alloc+0x6a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <dir_alloc+0x6e>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <dir_alloc+0x70>
 800495e:	2300      	movs	r3, #0
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	3301      	adds	r3, #1
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d102      	bne.n	800497e <dir_alloc+0x8e>
 8004978:	e00c      	b.n	8004994 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800497e:	2101      	movs	r1, #1
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff ff10 	bl	80047a6 <dir_next>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0c2      	beq.n	8004916 <dir_alloc+0x26>
 8004990:	e000      	b.n	8004994 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8004992:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004994:	7dfb      	ldrb	r3, [r7, #23]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d101      	bne.n	800499e <dir_alloc+0xae>
 800499a:	2307      	movs	r3, #7
 800499c:	75fb      	strb	r3, [r7, #23]
	return res;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	331a      	adds	r3, #26
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe fcd6 	bl	8003368 <ld_word>
 80049bc:	4603      	mov	r3, r0
 80049be:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d109      	bne.n	80049dc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	3314      	adds	r3, #20
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fccb 	bl	8003368 <ld_word>
 80049d2:	4603      	mov	r3, r0
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80049dc:	68fb      	ldr	r3, [r7, #12]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	331a      	adds	r3, #26
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	b292      	uxth	r2, r2
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe fda9 	bl	8003554 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d109      	bne.n	8004a1e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f103 0214 	add.w	r2, r3, #20
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f7fe fd9b 	bl	8003554 <st_word>
	}
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	331a      	adds	r3, #26
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe fc96 	bl	8003368 <ld_word>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <cmp_lfn+0x1e>
 8004a42:	2300      	movs	r3, #0
 8004a44:	e058      	b.n	8004af8 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a4e:	1e5a      	subs	r2, r3, #1
 8004a50:	4613      	mov	r3, r2
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	81fb      	strh	r3, [r7, #14]
 8004a60:	2300      	movs	r3, #0
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	e032      	b.n	8004acc <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004a66:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <cmp_lfn+0xd8>)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	4413      	add	r3, r2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe fc77 	bl	8003368 <ld_word>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d019      	beq.n	8004ab8 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2bff      	cmp	r3, #255	; 0xff
 8004a88:	d811      	bhi.n	8004aae <cmp_lfn+0x86>
 8004a8a:	89bb      	ldrh	r3, [r7, #12]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f002 fc79 	bl	8007384 <ff_wtoupper>
 8004a92:	4604      	mov	r4, r0
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	617a      	str	r2, [r7, #20]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f002 fc6e 	bl	8007384 <ff_wtoupper>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	429c      	cmp	r4, r3
 8004aac:	d001      	beq.n	8004ab2 <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e022      	b.n	8004af8 <cmp_lfn+0xd0>
			}
			wc = uc;
 8004ab2:	89bb      	ldrh	r3, [r7, #12]
 8004ab4:	81fb      	strh	r3, [r7, #14]
 8004ab6:	e006      	b.n	8004ac6 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004ab8:	89bb      	ldrh	r3, [r7, #12]
 8004aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d001      	beq.n	8004ac6 <cmp_lfn+0x9e>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e018      	b.n	8004af8 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b0c      	cmp	r3, #12
 8004ad0:	d9c9      	bls.n	8004a66 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <cmp_lfn+0xce>
 8004ade:	89fb      	ldrh	r3, [r7, #14]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <cmp_lfn+0xce>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <cmp_lfn+0xce>
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 8004af6:	2301      	movs	r3, #1
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}
 8004b00:	08007dbc 	.word	0x08007dbc

08004b04 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	331a      	adds	r3, #26
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe fc28 	bl	8003368 <ld_word>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <pick_lfn+0x1e>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e050      	b.n	8004bc4 <pick_lfn+0xc0>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b2a:	1e5a      	subs	r2, r3, #1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004b38:	2301      	movs	r3, #1
 8004b3a:	81fb      	strh	r3, [r7, #14]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e028      	b.n	8004b94 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004b42:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <pick_lfn+0xc8>)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	4413      	add	r3, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fe fc09 	bl	8003368 <ld_word>
 8004b56:	4603      	mov	r3, r0
 8004b58:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8004b5a:	89fb      	ldrh	r3, [r7, #14]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00f      	beq.n	8004b80 <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2bff      	cmp	r3, #255	; 0xff
 8004b64:	d901      	bls.n	8004b6a <pick_lfn+0x66>
 8004b66:	2300      	movs	r3, #0
 8004b68:	e02c      	b.n	8004bc4 <pick_lfn+0xc0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004b6a:	89bb      	ldrh	r3, [r7, #12]
 8004b6c:	81fb      	strh	r3, [r7, #14]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	617a      	str	r2, [r7, #20]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	89fa      	ldrh	r2, [r7, #14]
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	e006      	b.n	8004b8e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004b80:	89bb      	ldrh	r3, [r7, #12]
 8004b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d001      	beq.n	8004b8e <pick_lfn+0x8a>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e01a      	b.n	8004bc4 <pick_lfn+0xc0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	3301      	adds	r3, #1
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d9d3      	bls.n	8004b42 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <pick_lfn+0xbe>
 8004ba6:	89fb      	ldrh	r3, [r7, #14]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <pick_lfn+0xbe>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2bff      	cmp	r3, #255	; 0xff
 8004bb0:	d901      	bls.n	8004bb6 <pick_lfn+0xb2>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e006      	b.n	8004bc4 <pick_lfn+0xc0>
		lfnbuf[i] = 0;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8004bc2:	2301      	movs	r3, #1
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	08007dbc 	.word	0x08007dbc

08004bd0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4611      	mov	r1, r2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	460b      	mov	r3, r1
 8004be0:	71fb      	strb	r3, [r7, #7]
 8004be2:	4613      	mov	r3, r2
 8004be4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	330d      	adds	r3, #13
 8004bea:	79ba      	ldrb	r2, [r7, #6]
 8004bec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	330b      	adds	r3, #11
 8004bf2:	220f      	movs	r2, #15
 8004bf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	331a      	adds	r3, #26
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fca5 	bl	8003554 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	4613      	mov	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	82fb      	strh	r3, [r7, #22]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004c22:	8afb      	ldrh	r3, [r7, #22]
 8004c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <put_lfn+0x6c>
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	61fa      	str	r2, [r7, #28]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004c3c:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <put_lfn+0xcc>)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	4413      	add	r3, r2
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4413      	add	r3, r2
 8004c4a:	8afa      	ldrh	r2, [r7, #22]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fc80 	bl	8003554 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
 8004c54:	8afb      	ldrh	r3, [r7, #22]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <put_lfn+0x90>
 8004c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c5e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	d9da      	bls.n	8004c22 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004c6c:	8afb      	ldrh	r3, [r7, #22]
 8004c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d006      	beq.n	8004c84 <put_lfn+0xb4>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <put_lfn+0xbc>
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c8a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	79fa      	ldrb	r2, [r7, #7]
 8004c90:	701a      	strb	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	08007dbc 	.word	0x08007dbc

08004ca0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	; 0x30
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	mem_cpy(dst, src, 11);
 8004cae:	220b      	movs	r2, #11
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7fe fd1a 	bl	80036ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b05      	cmp	r3, #5
 8004cbc:	d92b      	bls.n	8004d16 <gen_numname+0x76>
		sreg = seq;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 8004cc2:	e022      	b.n	8004d0a <gen_numname+0x6a>
			wc = *lfn++;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	1c9a      	adds	r2, r3, #2
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004cce:	2300      	movs	r3, #0
 8004cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd2:	e017      	b.n	8004d04 <gen_numname+0x64>
				sreg = (sreg << 1) + (wc & 1);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	005a      	lsls	r2, r3, #1
 8004cd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	4413      	add	r3, r2
 8004ce0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004ce2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <gen_numname+0x5e>
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004cf8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004cfc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	3301      	adds	r3, #1
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	d9e4      	bls.n	8004cd4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1d8      	bne.n	8004cc4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004d16:	2307      	movs	r3, #7
 8004d18:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	3330      	adds	r3, #48	; 0x30
 8004d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d2e:	2b39      	cmp	r3, #57	; 0x39
 8004d30:	d904      	bls.n	8004d3c <gen_numname+0x9c>
 8004d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d36:	3307      	adds	r3, #7
 8004d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	1e5a      	subs	r2, r3, #1
 8004d40:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d46:	4413      	add	r3, r2
 8004d48:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004d4c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1de      	bne.n	8004d1a <gen_numname+0x7a>
	ns[i] = '~';
 8004d5c:	f107 0214 	add.w	r2, r7, #20
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	4413      	add	r3, r2
 8004d64:	227e      	movs	r2, #126	; 0x7e
 8004d66:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	e014      	b.n	8004d98 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	4413      	add	r3, r2
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe fd31 	bl	80037de <dbc_1st>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <gen_numname+0xf2>
			if (j == i - 1) break;
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	3b01      	subs	r3, #1
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d010      	beq.n	8004dae <gen_numname+0x10e>
			j++;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	3301      	adds	r3, #1
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	3301      	adds	r3, #1
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
 8004d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d207      	bcs.n	8004db0 <gen_numname+0x110>
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	4413      	add	r3, r2
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d1e0      	bne.n	8004d6e <gen_numname+0xce>
 8004dac:	e000      	b.n	8004db0 <gen_numname+0x110>
			if (j == i - 1) break;
 8004dae:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	2b07      	cmp	r3, #7
 8004db4:	d808      	bhi.n	8004dc8 <gen_numname+0x128>
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	62ba      	str	r2, [r7, #40]	; 0x28
 8004dbc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004dc6:	e000      	b.n	8004dca <gen_numname+0x12a>
 8004dc8:	2120      	movs	r1, #32
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	627a      	str	r2, [r7, #36]	; 0x24
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	460a      	mov	r2, r1
 8004dd6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d9e8      	bls.n	8004db0 <gen_numname+0x110>
}
 8004dde:	bf00      	nop
 8004de0:	3730      	adds	r7, #48	; 0x30
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004df2:	230b      	movs	r3, #11
 8004df4:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	0852      	lsrs	r2, r2, #1
 8004dfc:	01db      	lsls	r3, r3, #7
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1c59      	adds	r1, r3, #1
 8004e06:	6079      	str	r1, [r7, #4]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ed      	bne.n	8004df6 <sum_sfn+0x10>
	return sum;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b087      	sub	sp, #28
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3301      	adds	r3, #1
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	015b      	lsls	r3, r3, #5
 8004e38:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	827b      	strh	r3, [r7, #18]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e018      	b.n	8004e76 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d103      	bne.n	8004e52 <xdir_sum+0x2c>
			i++;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e00e      	b.n	8004e70 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004e52:	8a7b      	ldrh	r3, [r7, #18]
 8004e54:	03db      	lsls	r3, r3, #15
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	8a7b      	ldrh	r3, [r7, #18]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	4413      	add	r3, r2
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	440b      	add	r3, r1
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3301      	adds	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d3e2      	bcc.n	8004e44 <xdir_sum+0x1e>
		}
	}
	return sum;
 8004e7e:	8a7b      	ldrh	r3, [r7, #18]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr

08004e8a <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8004e96:	e01f      	b.n	8004ed8 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8004e98:	89bb      	ldrh	r3, [r7, #12]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 fa72 	bl	8007384 <ff_wtoupper>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8004ea4:	89fb      	ldrh	r3, [r7, #14]
 8004ea6:	03db      	lsls	r3, r3, #15
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	89fb      	ldrh	r3, [r7, #14]
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	89bb      	ldrh	r3, [r7, #12]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8004ebe:	89fb      	ldrh	r3, [r7, #14]
 8004ec0:	03db      	lsls	r3, r3, #15
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	89fb      	ldrh	r3, [r7, #14]
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	89bb      	ldrh	r3, [r7, #12]
 8004ed0:	0a1b      	lsrs	r3, r3, #8
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1c9a      	adds	r2, r3, #2
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	81bb      	strh	r3, [r7, #12]
 8004ee2:	89bb      	ldrh	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1d7      	bne.n	8004e98 <xname_sum+0xe>
	}
	return sum;
 8004ee8:	89fb      	ldrh	r3, [r7, #14]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <load_xdir>:
/*-----------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7fe fd42 	bl	8003998 <move_window>
 8004f14:	4603      	mov	r3, r0
 8004f16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <load_xdir+0x2e>
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	e0a9      	b.n	8005076 <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b85      	cmp	r3, #133	; 0x85
 8004f2a:	d001      	beq.n	8004f30 <load_xdir+0x3c>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e0a2      	b.n	8005076 <load_xdir+0x182>
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	2220      	movs	r2, #32
 8004f36:	4619      	mov	r1, r3
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7fe fbd7 	bl	80036ec <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3301      	adds	r3, #1
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	015b      	lsls	r3, r3, #5
 8004f48:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b5f      	cmp	r3, #95	; 0x5f
 8004f4e:	d903      	bls.n	8004f58 <load_xdir+0x64>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8004f56:	d901      	bls.n	8004f5c <load_xdir+0x68>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e08c      	b.n	8005076 <load_xdir+0x182>

	/* Load stream-extension entry */
	res = dir_next(dp, 0);
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fc21 	bl	80047a6 <dir_next>
 8004f64:	4603      	mov	r3, r0
 8004f66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d101      	bne.n	8004f72 <load_xdir+0x7e>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <load_xdir+0x88>
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	e07c      	b.n	8005076 <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f7fe fd06 	bl	8003998 <move_window>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <load_xdir+0xa6>
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	e06d      	b.n	8005076 <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2bc0      	cmp	r3, #192	; 0xc0
 8004fa2:	d001      	beq.n	8004fa8 <load_xdir+0xb4>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e066      	b.n	8005076 <load_xdir+0x182>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f103 0020 	add.w	r0, r3, #32
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f7fe fb99 	bl	80036ec <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3323      	adds	r3, #35	; 0x23
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	332c      	adds	r3, #44	; 0x2c
 8004fc2:	4a2f      	ldr	r2, [pc, #188]	; (8005080 <load_xdir+0x18c>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	08db      	lsrs	r3, r3, #3
 8004fca:	015b      	lsls	r3, r3, #5
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d201      	bcs.n	8004fd6 <load_xdir+0xe2>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e04f      	b.n	8005076 <load_xdir+0x182>

	/* Load file-name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 8004fd6:	2340      	movs	r3, #64	; 0x40
 8004fd8:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 8004fda:	2100      	movs	r1, #0
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fbe2 	bl	80047a6 <dir_next>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d101      	bne.n	8004ff0 <load_xdir+0xfc>
 8004fec:	2302      	movs	r3, #2
 8004fee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <load_xdir+0x106>
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	e03d      	b.n	8005076 <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe fcc7 	bl	8003998 <move_window>
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <load_xdir+0x124>
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	e02e      	b.n	8005076 <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2bc1      	cmp	r3, #193	; 0xc1
 8005020:	d001      	beq.n	8005026 <load_xdir+0x132>
 8005022:	2302      	movs	r3, #2
 8005024:	e027      	b.n	8005076 <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800502c:	d208      	bcs.n	8005040 <load_xdir+0x14c>
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	18d0      	adds	r0, r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005038:	2220      	movs	r2, #32
 800503a:	4619      	mov	r1, r3
 800503c:	f7fe fb56 	bl	80036ec <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	3320      	adds	r3, #32
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	d3c5      	bcc.n	8004fda <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8005054:	d80e      	bhi.n	8005074 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fee5 	bl	8004e26 <xdir_sum>
 800505c:	4603      	mov	r3, r0
 800505e:	461c      	mov	r4, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3302      	adds	r3, #2
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe f97f 	bl	8003368 <ld_word>
 800506a:	4603      	mov	r3, r0
 800506c:	429c      	cmp	r4, r3
 800506e:	d001      	beq.n	8005074 <load_xdir+0x180>
 8005070:	2302      	movs	r3, #2
 8005072:	e000      	b.n	8005076 <load_xdir+0x182>
	}
	return FR_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	bd90      	pop	{r4, r7, pc}
 800507e:	bf00      	nop
 8005080:	88888889 	.word	0x88888889

08005084 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	3334      	adds	r3, #52	; 0x34
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe f97e 	bl	8003396 <ld_dword>
 800509a:	4602      	mov	r2, r0
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	3338      	adds	r3, #56	; 0x38
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe f997 	bl	80033da <ld_qword>
 80050ac:	4603      	mov	r3, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	3321      	adds	r3, #33	; 0x21
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	61da      	str	r2, [r3, #28]
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd90      	pop	{r4, r7, pc}

080050d6 <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 80050d6:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	6a1a      	ldr	r2, [r3, #32]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	469b      	mov	fp, r3
 8005102:	f04f 0c00 	mov.w	ip, #0
 8005106:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	ea0b 0301 	and.w	r3, fp, r1
 8005112:	ea0c 0402 	and.w	r4, ip, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->obj.n_frag = 0;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fab2 	bl	800469a <dir_sdi>
 8005136:	4603      	mov	r3, r0
 8005138:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <load_obj_xdir+0x74>
		res = load_xdir(dp);		/* Load the object's entry block */
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff fed7 	bl	8004ef4 <load_xdir>
 8005146:	4603      	mov	r3, r0
 8005148:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005156 <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8005156:	b590      	push	{r4, r7, lr}
 8005158:	b087      	sub	sp, #28
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1c9c      	adds	r4, r3, #2
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fe5b 	bl	8004e26 <xdir_sum>
 8005170:	4603      	mov	r3, r0
 8005172:	4619      	mov	r1, r3
 8005174:	4620      	mov	r0, r4
 8005176:	f7fe f9ed 	bl	8003554 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3301      	adds	r3, #1
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	613b      	str	r3, [r7, #16]

	/* Store the direcotry entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fa85 	bl	800469a <dir_sdi>
 8005190:	4603      	mov	r3, r0
 8005192:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8005194:	e026      	b.n	80051e4 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7fe fbf9 	bl	8003998 <move_window>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11d      	bne.n	80051ec <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	2220      	movs	r2, #32
 80051b6:	68f9      	ldr	r1, [r7, #12]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe fa97 	bl	80036ec <mem_cpy>
		dp->obj.fs->wflag = 1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00e      	beq.n	80051f0 <store_xdir+0x9a>
		dirb += SZDIRE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3320      	adds	r3, #32
 80051d6:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80051d8:	2100      	movs	r1, #0
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fae3 	bl	80047a6 <dir_next>
 80051e0:	4603      	mov	r3, r0
 80051e2:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0d5      	beq.n	8005196 <store_xdir+0x40>
 80051ea:	e002      	b.n	80051f2 <store_xdir+0x9c>
		if (res != FR_OK) break;
 80051ec:	bf00      	nop
 80051ee:	e000      	b.n	80051f2 <store_xdir+0x9c>
		if (--nent == 0) break;
 80051f0:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <store_xdir+0xa8>
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <store_xdir+0xac>
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	e000      	b.n	8005204 <store_xdir+0xae>
 8005202:	2302      	movs	r3, #2
}
 8005204:	4618      	mov	r0, r3
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	bd90      	pop	{r4, r7, pc}

0800520c <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8005216:	2240      	movs	r2, #64	; 0x40
 8005218:	2100      	movs	r1, #0
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fe fa86 	bl	800372c <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2285      	movs	r2, #133	; 0x85
 8005224:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3320      	adds	r3, #32
 800522a:	22c0      	movs	r2, #192	; 0xc0
 800522c:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 800522e:	2340      	movs	r3, #64	; 0x40
 8005230:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 8005232:	2300      	movs	r3, #0
 8005234:	72fb      	strb	r3, [r7, #11]
 8005236:	7afb      	ldrb	r3, [r7, #11]
 8005238:	72bb      	strb	r3, [r7, #10]
 800523a:	2301      	movs	r3, #1
 800523c:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	60fa      	str	r2, [r7, #12]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4413      	add	r3, r2
 8005248:	22c1      	movs	r2, #193	; 0xc1
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	60fa      	str	r2, [r7, #12]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4413      	add	r3, r2
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800525a:	893b      	ldrh	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <create_xdir+0x6c>
 8005260:	7abb      	ldrb	r3, [r7, #10]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	813b      	strh	r3, [r7, #8]
 800526c:	893b      	ldrh	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <create_xdir+0x6c>
 8005272:	7abb      	ldrb	r3, [r7, #10]
 8005274:	3301      	adds	r3, #1
 8005276:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 		/* Store it */
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	893a      	ldrh	r2, [r7, #8]
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe f966 	bl	8003554 <st_word>
			i += 2;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3302      	adds	r3, #2
 800528c:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e0      	bne.n	800525a <create_xdir+0x4e>
		nc1++;
 8005298:	7afb      	ldrb	r3, [r7, #11]
 800529a:	3301      	adds	r3, #1
 800529c:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800529e:	7abb      	ldrb	r3, [r7, #10]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	4413      	add	r3, r2
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1c8      	bne.n	800523e <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3323      	adds	r3, #35	; 0x23
 80052b0:	7aba      	ldrb	r2, [r7, #10]
 80052b2:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3301      	adds	r3, #1
 80052b8:	7afa      	ldrb	r2, [r7, #11]
 80052ba:	3201      	adds	r2, #1
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80052c6:	6838      	ldr	r0, [r7, #0]
 80052c8:	f7ff fddf 	bl	8004e8a <xname_sum>
 80052cc:	4603      	mov	r3, r0
 80052ce:	4619      	mov	r1, r3
 80052d0:	4620      	mov	r0, r4
 80052d2:	f7fe f93f 	bl	8003554 <st_word>
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd90      	pop	{r4, r7, pc}

080052de <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b086      	sub	sp, #24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80052e8:	2304      	movs	r3, #4
 80052ea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80052f2:	23ff      	movs	r3, #255	; 0xff
 80052f4:	757b      	strb	r3, [r7, #21]
 80052f6:	23ff      	movs	r3, #255	; 0xff
 80052f8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80052fa:	e09f      	b.n	800543c <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	4619      	mov	r1, r3
 8005302:	6938      	ldr	r0, [r7, #16]
 8005304:	f7fe fb48 	bl	8003998 <move_window>
 8005308:	4603      	mov	r3, r0
 800530a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f040 809a 	bne.w	8005448 <dir_read+0x16a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 800531c:	7dbb      	ldrb	r3, [r7, #22]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005322:	2304      	movs	r3, #4
 8005324:	75fb      	strb	r3, [r7, #23]
 8005326:	e096      	b.n	8005456 <dir_read+0x178>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b04      	cmp	r3, #4
 800532e:	d118      	bne.n	8005362 <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (b == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8005330:	7dbb      	ldrb	r3, [r7, #22]
 8005332:	2b85      	cmp	r3, #133	; 0x85
 8005334:	d179      	bne.n	800542a <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fdd8 	bl	8004ef4 <load_xdir>
 8005344:	4603      	mov	r3, r0
 8005346:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8005348:	7dfb      	ldrb	r3, [r7, #23]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d17e      	bne.n	800544c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	3304      	adds	r3, #4
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800535a:	b2da      	uxtb	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	719a      	strb	r2, [r3, #6]
					}
					break;
 8005360:	e074      	b.n	800544c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	330b      	adds	r3, #11
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800536e:	73fb      	strb	r3, [r7, #15]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005376:	7dbb      	ldrb	r3, [r7, #22]
 8005378:	2be5      	cmp	r3, #229	; 0xe5
 800537a:	d00e      	beq.n	800539a <dir_read+0xbc>
 800537c:	7dbb      	ldrb	r3, [r7, #22]
 800537e:	2b2e      	cmp	r3, #46	; 0x2e
 8005380:	d00b      	beq.n	800539a <dir_read+0xbc>
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	f023 0320 	bic.w	r3, r3, #32
 8005388:	2b08      	cmp	r3, #8
 800538a:	bf0c      	ite	eq
 800538c:	2301      	moveq	r3, #1
 800538e:	2300      	movne	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	4293      	cmp	r3, r2
 8005398:	d002      	beq.n	80053a0 <dir_read+0xc2>
				ord = 0xFF;
 800539a:	23ff      	movs	r3, #255	; 0xff
 800539c:	757b      	strb	r3, [r7, #21]
 800539e:	e044      	b.n	800542a <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {			/* An LFN entry is found */
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	2b0f      	cmp	r3, #15
 80053a4:	d12f      	bne.n	8005406 <dir_read+0x128>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 80053a6:	7dbb      	ldrb	r3, [r7, #22]
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00d      	beq.n	80053cc <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b4:	7b5b      	ldrb	r3, [r3, #13]
 80053b6:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 80053b8:	7dbb      	ldrb	r3, [r7, #22]
 80053ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053be:	75bb      	strb	r3, [r7, #22]
 80053c0:	7dbb      	ldrb	r3, [r7, #22]
 80053c2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80053cc:	7dba      	ldrb	r2, [r7, #22]
 80053ce:	7d7b      	ldrb	r3, [r7, #21]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d115      	bne.n	8005400 <dir_read+0x122>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	330d      	adds	r3, #13
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	7d3a      	ldrb	r2, [r7, #20]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d10e      	bne.n	8005400 <dir_read+0x122>
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7ff fb89 	bl	8004b04 <pick_lfn>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <dir_read+0x122>
 80053f8:	7d7b      	ldrb	r3, [r7, #21]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	e000      	b.n	8005402 <dir_read+0x124>
 8005400:	23ff      	movs	r3, #255	; 0xff
 8005402:	757b      	strb	r3, [r7, #21]
 8005404:	e011      	b.n	800542a <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005406:	7d7b      	ldrb	r3, [r7, #21]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <dir_read+0x142>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fce8 	bl	8004de6 <sum_sfn>
 8005416:	4603      	mov	r3, r0
 8005418:	461a      	mov	r2, r3
 800541a:	7d3b      	ldrb	r3, [r7, #20]
 800541c:	4293      	cmp	r3, r2
 800541e:	d017      	beq.n	8005450 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f04f 32ff 	mov.w	r2, #4294967295
 8005426:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8005428:	e012      	b.n	8005450 <dir_read+0x172>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800542a:	2100      	movs	r1, #0
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff f9ba 	bl	80047a6 <dir_next>
 8005432:	4603      	mov	r3, r0
 8005434:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <dir_read+0x176>
	while (dp->sect) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	f47f af5b 	bne.w	80052fc <dir_read+0x1e>
 8005446:	e006      	b.n	8005456 <dir_read+0x178>
		if (res != FR_OK) break;
 8005448:	bf00      	nop
 800544a:	e004      	b.n	8005456 <dir_read+0x178>
					break;
 800544c:	bf00      	nop
 800544e:	e002      	b.n	8005456 <dir_read+0x178>
					break;
 8005450:	bf00      	nop
 8005452:	e000      	b.n	8005456 <dir_read+0x178>
		if (res != FR_OK) break;
 8005454:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <dir_read+0x184>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b089      	sub	sp, #36	; 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800547a:	2100      	movs	r1, #0
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff f90c 	bl	800469a <dir_sdi>
 8005482:	4603      	mov	r3, r0
 8005484:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8005486:	7ffb      	ldrb	r3, [r7, #31]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <dir_find+0x24>
 800548c:	7ffb      	ldrb	r3, [r7, #31]
 800548e:	e111      	b.n	80056b4 <dir_find+0x248>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b04      	cmp	r3, #4
 8005496:	d163      	bne.n	8005560 <dir_find+0xf4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fcf4 	bl	8004e8a <xname_sum>
 80054a2:	4603      	mov	r3, r0
 80054a4:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 80054a6:	e04e      	b.n	8005546 <dir_find+0xda>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	3324      	adds	r3, #36	; 0x24
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fd ff5a 	bl	8003368 <ld_word>
 80054b4:	4603      	mov	r3, r0
 80054b6:	461a      	mov	r2, r3
 80054b8:	893b      	ldrh	r3, [r7, #8]
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d000      	beq.n	80054c0 <dir_find+0x54>
 80054be:	e042      	b.n	8005546 <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80054c8:	76fb      	strb	r3, [r7, #27]
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e028      	b.n	8005526 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 031f 	and.w	r3, r3, #31
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <dir_find+0x78>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	3302      	adds	r3, #2
 80054e2:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fd ff3b 	bl	8003368 <ld_word>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 ff45 	bl	8007384 <ff_wtoupper>
 80054fa:	4604      	mov	r4, r0
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f001 ff3b 	bl	8007384 <ff_wtoupper>
 800550e:	4603      	mov	r3, r0
 8005510:	429c      	cmp	r4, r3
 8005512:	d10c      	bne.n	800552e <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005514:	7efb      	ldrb	r3, [r7, #27]
 8005516:	3b01      	subs	r3, #1
 8005518:	76fb      	strb	r3, [r7, #27]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	3302      	adds	r3, #2
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	3301      	adds	r3, #1
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	7efb      	ldrb	r3, [r7, #27]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1d3      	bne.n	80054d4 <dir_find+0x68>
 800552c:	e000      	b.n	8005530 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800552e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005530:	7efb      	ldrb	r3, [r7, #27]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d107      	bne.n	8005546 <dir_find+0xda>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4413      	add	r3, r2
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <dir_find+0xee>
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8005546:	2100      	movs	r1, #0
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fec8 	bl	80052de <dir_read>
 800554e:	4603      	mov	r3, r0
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	7ffb      	ldrb	r3, [r7, #31]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0a7      	beq.n	80054a8 <dir_find+0x3c>
 8005558:	e000      	b.n	800555c <dir_find+0xf0>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800555a:	bf00      	nop
		}
		return res;
 800555c:	7ffb      	ldrb	r3, [r7, #31]
 800555e:	e0a9      	b.n	80056b4 <dir_find+0x248>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005560:	23ff      	movs	r3, #255	; 0xff
 8005562:	773b      	strb	r3, [r7, #28]
 8005564:	7f3b      	ldrb	r3, [r7, #28]
 8005566:	777b      	strb	r3, [r7, #29]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f04f 32ff 	mov.w	r2, #4294967295
 800556e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	4619      	mov	r1, r3
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7fe fa0e 	bl	8003998 <move_window>
 800557c:	4603      	mov	r3, r0
 800557e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8005580:	7ffb      	ldrb	r3, [r7, #31]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 8090 	bne.w	80056a8 <dir_find+0x23c>
		c = dp->dir[DIR_Name];
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005590:	7fbb      	ldrb	r3, [r7, #30]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <dir_find+0x130>
 8005596:	2304      	movs	r3, #4
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e08a      	b.n	80056b2 <dir_find+0x246>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	330b      	adds	r3, #11
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a8:	72fb      	strb	r3, [r7, #11]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	7afa      	ldrb	r2, [r7, #11]
 80055ae:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80055b0:	7fbb      	ldrb	r3, [r7, #30]
 80055b2:	2be5      	cmp	r3, #229	; 0xe5
 80055b4:	d007      	beq.n	80055c6 <dir_find+0x15a>
 80055b6:	7afb      	ldrb	r3, [r7, #11]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <dir_find+0x168>
 80055c0:	7afb      	ldrb	r3, [r7, #11]
 80055c2:	2b0f      	cmp	r3, #15
 80055c4:	d006      	beq.n	80055d4 <dir_find+0x168>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055c6:	23ff      	movs	r3, #255	; 0xff
 80055c8:	777b      	strb	r3, [r7, #29]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f04f 32ff 	mov.w	r2, #4294967295
 80055d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80055d2:	e05e      	b.n	8005692 <dir_find+0x226>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80055d4:	7afb      	ldrb	r3, [r7, #11]
 80055d6:	2b0f      	cmp	r3, #15
 80055d8:	d136      	bne.n	8005648 <dir_find+0x1dc>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d154      	bne.n	8005692 <dir_find+0x226>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80055e8:	7fbb      	ldrb	r3, [r7, #30]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <dir_find+0x1a2>
						sum = dp->dir[LDIR_Chksum];
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	7b5b      	ldrb	r3, [r3, #13]
 80055f8:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80055fa:	7fbb      	ldrb	r3, [r7, #30]
 80055fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005600:	77bb      	strb	r3, [r7, #30]
 8005602:	7fbb      	ldrb	r3, [r7, #30]
 8005604:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800560e:	7fba      	ldrb	r2, [r7, #30]
 8005610:	7f7b      	ldrb	r3, [r7, #29]
 8005612:	429a      	cmp	r2, r3
 8005614:	d115      	bne.n	8005642 <dir_find+0x1d6>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	330d      	adds	r3, #13
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	7f3a      	ldrb	r2, [r7, #28]
 8005620:	429a      	cmp	r2, r3
 8005622:	d10e      	bne.n	8005642 <dir_find+0x1d6>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f7ff f9fa 	bl	8004a28 <cmp_lfn>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <dir_find+0x1d6>
 800563a:	7f7b      	ldrb	r3, [r7, #29]
 800563c:	3b01      	subs	r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	e000      	b.n	8005644 <dir_find+0x1d8>
 8005642:	23ff      	movs	r3, #255	; 0xff
 8005644:	777b      	strb	r3, [r7, #29]
 8005646:	e024      	b.n	8005692 <dir_find+0x226>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005648:	7f7b      	ldrb	r3, [r7, #29]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <dir_find+0x1f6>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fbc7 	bl	8004de6 <sum_sfn>
 8005658:	4603      	mov	r3, r0
 800565a:	461a      	mov	r2, r3
 800565c:	7f3b      	ldrb	r3, [r7, #28]
 800565e:	4293      	cmp	r3, r2
 8005660:	d024      	beq.n	80056ac <dir_find+0x240>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <dir_find+0x21a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3340      	adds	r3, #64	; 0x40
 8005678:	220b      	movs	r2, #11
 800567a:	4619      	mov	r1, r3
 800567c:	f7fe f86f 	bl	800375e <mem_cmp>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d014      	beq.n	80056b0 <dir_find+0x244>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005686:	23ff      	movs	r3, #255	; 0xff
 8005688:	777b      	strb	r3, [r7, #29]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f04f 32ff 	mov.w	r2, #4294967295
 8005690:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005692:	2100      	movs	r1, #0
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff f886 	bl	80047a6 <dir_next>
 800569a:	4603      	mov	r3, r0
 800569c:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f43f af65 	beq.w	8005570 <dir_find+0x104>
 80056a6:	e004      	b.n	80056b2 <dir_find+0x246>
		if (res != FR_OK) break;
 80056a8:	bf00      	nop
 80056aa:	e002      	b.n	80056b2 <dir_find+0x246>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80056ac:	bf00      	nop
 80056ae:	e000      	b.n	80056b2 <dir_find+0x246>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80056b0:	bf00      	nop

	return res;
 80056b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3724      	adds	r7, #36	; 0x24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd90      	pop	{r4, r7, pc}

080056bc <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80056bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80056c0:	b0a0      	sub	sp, #128	; 0x80
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	66fb      	str	r3, [r7, #108]	; 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80056d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <dir_register+0x22>
 80056da:	2306      	movs	r3, #6
 80056dc:	e19e      	b.n	8005a1c <dir_register+0x360>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80056de:	2300      	movs	r3, #0
 80056e0:	677b      	str	r3, [r7, #116]	; 0x74
 80056e2:	e002      	b.n	80056ea <dir_register+0x2e>
 80056e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e6:	3301      	adds	r3, #1
 80056e8:	677b      	str	r3, [r7, #116]	; 0x74
 80056ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f4      	bne.n	80056e4 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80056fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b04      	cmp	r3, #4
 8005700:	f040 80b0 	bne.w	8005864 <dir_register+0x1a8>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005706:	330e      	adds	r3, #14
 8005708:	4aaa      	ldr	r2, [pc, #680]	; (80059b4 <dir_register+0x2f8>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	08db      	lsrs	r3, r3, #3
 8005710:	3302      	adds	r3, #2
 8005712:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate directory entries */
 8005714:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff f8ea 	bl	80048f0 <dir_alloc>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8005722:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <dir_register+0x74>
 800572a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800572e:	e175      	b.n	8005a1c <dir_register+0x360>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005736:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800573a:	3b01      	subs	r3, #1
 800573c:	015b      	lsls	r3, r3, #5
 800573e:	1ad2      	subs	r2, r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	79db      	ldrb	r3, [r3, #7]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d07f      	beq.n	8005850 <dir_register+0x194>
			dp->obj.stat &= ~4;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	79db      	ldrb	r3, [r3, #7]
 8005754:	f023 0304 	bic.w	r3, r3, #4
 8005758:	b2da      	uxtb	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe fcd5 	bl	8004110 <fill_first_frag>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800576c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <dir_register+0xbe>
 8005774:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005778:	e150      	b.n	8005a1c <dir_register+0x360>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	f04f 32ff 	mov.w	r2, #4294967295
 8005784:	4619      	mov	r1, r3
 8005786:	f7fe fcf2 	bl	800416e <fill_last_frag>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8005790:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <dir_register+0xe2>
 8005798:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800579c:	e13e      	b.n	8005a1c <dir_register+0x360>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d054      	beq.n	8005850 <dir_register+0x194>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	f107 0308 	add.w	r3, r7, #8
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fc91 	bl	80050d6 <load_obj_xdir>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 80057ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <dir_register+0x10c>
 80057c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80057c6:	e129      	b.n	8005a1c <dir_register+0x360>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	895b      	ldrh	r3, [r3, #10]
 80057d2:	025b      	lsls	r3, r3, #9
 80057d4:	469b      	mov	fp, r3
 80057d6:	f04f 0c00 	mov.w	ip, #0
 80057da:	eb1b 0301 	adds.w	r3, fp, r1
 80057de:	eb4c 0402 	adc.w	r4, ip, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 80057e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f103 0410 	add.w	r4, r3, #16
 80057f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80057fa:	461a      	mov	r2, r3
 80057fc:	4623      	mov	r3, r4
 80057fe:	4608      	mov	r0, r1
 8005800:	f7fd feed 	bl	80035de <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8005804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f103 0410 	add.w	r4, r3, #16
 8005812:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005816:	461a      	mov	r2, r3
 8005818:	4623      	mov	r3, r4
 800581a:	4608      	mov	r0, r1
 800581c:	f7fd fedf 	bl	80035de <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;			/* Update the allocation status */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	79da      	ldrb	r2, [r3, #7]
 8005824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	3321      	adds	r3, #33	; 0x21
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 8005832:	f107 0308 	add.w	r3, r7, #8
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fc8d 	bl	8005156 <store_xdir>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 8005842:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <dir_register+0x194>
 800584a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800584e:	e0e5      	b.n	8005a1c <dir_register+0x360>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8005850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7ff fcd6 	bl	800520c <create_xdir>
		return FR_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e0db      	b.n	8005a1c <dir_register+0x360>
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800586a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800586e:	220c      	movs	r2, #12
 8005870:	4618      	mov	r0, r3
 8005872:	f7fd ff3b 	bl	80036ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005876:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d033      	beq.n	80058ea <dir_register+0x22e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2240      	movs	r2, #64	; 0x40
 8005886:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800588a:	2301      	movs	r3, #1
 800588c:	67bb      	str	r3, [r7, #120]	; 0x78
 800588e:	e016      	b.n	80058be <dir_register+0x202>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800589e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a0:	f7ff f9fe 	bl	8004ca0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fde1 	bl	800546c <dir_find>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 80058b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d106      	bne.n	80058c6 <dir_register+0x20a>
		for (n = 1; n < 100; n++) {
 80058b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ba:	3301      	adds	r3, #1
 80058bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80058be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c0:	2b63      	cmp	r3, #99	; 0x63
 80058c2:	d9e5      	bls.n	8005890 <dir_register+0x1d4>
 80058c4:	e000      	b.n	80058c8 <dir_register+0x20c>
			if (res != FR_OK) break;
 80058c6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80058c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d101      	bne.n	80058d2 <dir_register+0x216>
 80058ce:	2307      	movs	r3, #7
 80058d0:	e0a4      	b.n	8005a1c <dir_register+0x360>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80058d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d002      	beq.n	80058e0 <dir_register+0x224>
 80058da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80058de:	e09d      	b.n	8005a1c <dir_register+0x360>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80058e0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80058ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <dir_register+0x24a>
 80058f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f8:	330c      	adds	r3, #12
 80058fa:	4a2f      	ldr	r2, [pc, #188]	; (80059b8 <dir_register+0x2fc>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	3301      	adds	r3, #1
 8005904:	e000      	b.n	8005908 <dir_register+0x24c>
 8005906:	2301      	movs	r3, #1
 8005908:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800590a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fe ffef 	bl	80048f0 <dir_alloc>
 8005912:	4603      	mov	r3, r0
 8005914:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005918:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800591c:	2b00      	cmp	r3, #0
 800591e:	d14e      	bne.n	80059be <dir_register+0x302>
 8005920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005922:	3b01      	subs	r3, #1
 8005924:	673b      	str	r3, [r7, #112]	; 0x70
 8005926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005928:	2b00      	cmp	r3, #0
 800592a:	d048      	beq.n	80059be <dir_register+0x302>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005932:	015b      	lsls	r3, r3, #5
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fe feae 	bl	800469a <dir_sdi>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8005944:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005948:	2b00      	cmp	r3, #0
 800594a:	d138      	bne.n	80059be <dir_register+0x302>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3340      	adds	r3, #64	; 0x40
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fa48 	bl	8004de6 <sum_sfn>
 8005956:	4603      	mov	r3, r0
 8005958:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	4619      	mov	r1, r3
 8005962:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005964:	f7fe f818 	bl	8003998 <move_window>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800596e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005972:	2b00      	cmp	r3, #0
 8005974:	d122      	bne.n	80059bc <dir_register+0x300>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005978:	68d8      	ldr	r0, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800597e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005980:	b2da      	uxtb	r2, r3
 8005982:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005986:	f7ff f923 	bl	8004bd0 <put_lfn>
				fs->wflag = 1;
 800598a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598c:	2201      	movs	r2, #1
 800598e:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005990:	2100      	movs	r1, #0
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fe ff07 	bl	80047a6 <dir_next>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800599e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <dir_register+0x302>
 80059a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059a8:	3b01      	subs	r3, #1
 80059aa:	673b      	str	r3, [r7, #112]	; 0x70
 80059ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1d4      	bne.n	800595c <dir_register+0x2a0>
 80059b2:	e004      	b.n	80059be <dir_register+0x302>
 80059b4:	88888889 	.word	0x88888889
 80059b8:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 80059bc:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80059be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d128      	bne.n	8005a18 <dir_register+0x35c>
		res = move_window(fs, dp->sect);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	4619      	mov	r1, r3
 80059cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059ce:	f7fd ffe3 	bl	8003998 <move_window>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80059d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d11b      	bne.n	8005a18 <dir_register+0x35c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e4:	2220      	movs	r2, #32
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fd fe9f 	bl	800372c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3340      	adds	r3, #64	; 0x40
 80059f6:	220b      	movs	r2, #11
 80059f8:	4619      	mov	r1, r3
 80059fa:	f7fd fe77 	bl	80036ec <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	330c      	adds	r3, #12
 8005a0a:	f002 0218 	and.w	r2, r2, #24
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	2201      	movs	r2, #1
 8005a16:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005a18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3780      	adds	r7, #128	; 0x80
 8005a20:	46bd      	mov	sp, r7
 8005a22:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005a26:	bf00      	nop

08005a28 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60bb      	str	r3, [r7, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8005a44:	f107 0308 	add.w	r3, r7, #8
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fd fee7 	bl	800381c <tchar2uni>
 8005a4e:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d101      	bne.n	8005a5c <create_name+0x34>
 8005a58:	2306      	movs	r3, #6
 8005a5a:	e1af      	b.n	8005dbc <create_name+0x394>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a62:	d309      	bcc.n	8005a78 <create_name+0x50>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	0c19      	lsrs	r1, r3, #16
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	617a      	str	r2, [r7, #20]
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4413      	add	r3, r2
 8005a74:	b28a      	uxth	r2, r1
 8005a76:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 8005a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a7e:	2b1f      	cmp	r3, #31
 8005a80:	d920      	bls.n	8005ac4 <create_name+0x9c>
 8005a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a84:	2b2f      	cmp	r3, #47	; 0x2f
 8005a86:	d01d      	beq.n	8005ac4 <create_name+0x9c>
 8005a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a8a:	2b5c      	cmp	r3, #92	; 0x5c
 8005a8c:	d01a      	beq.n	8005ac4 <create_name+0x9c>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a90:	2b7f      	cmp	r3, #127	; 0x7f
 8005a92:	d809      	bhi.n	8005aa8 <create_name+0x80>
 8005a94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a96:	4619      	mov	r1, r3
 8005a98:	48a2      	ldr	r0, [pc, #648]	; (8005d24 <create_name+0x2fc>)
 8005a9a:	f7fd fe86 	bl	80037aa <chk_chr>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <create_name+0x80>
 8005aa4:	2306      	movs	r3, #6
 8005aa6:	e189      	b.n	8005dbc <create_name+0x394>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2bfe      	cmp	r3, #254	; 0xfe
 8005aac:	d901      	bls.n	8005ab2 <create_name+0x8a>
 8005aae:	2306      	movs	r3, #6
 8005ab0:	e184      	b.n	8005dbc <create_name+0x394>
		lfn[di++] = wc;					/* Store the Unicode character */
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	617a      	str	r2, [r7, #20]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4413      	add	r3, r2
 8005abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ac0:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8005ac2:	e7bf      	b.n	8005a44 <create_name+0x1c>
	}
	if (wc < ' ') {				/* End of path? */
 8005ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ac6:	2b1f      	cmp	r3, #31
 8005ac8:	d803      	bhi.n	8005ad2 <create_name+0xaa>
		cf = NS_LAST;			/* Set last segment flag */
 8005aca:	2304      	movs	r3, #4
 8005acc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ad0:	e00e      	b.n	8005af0 <create_name+0xc8>
	} else {
		cf = 0;					/* Next segment follows */
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8005ad8:	e002      	b.n	8005ae0 <create_name+0xb8>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ae6:	d0f8      	beq.n	8005ada <create_name+0xb2>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b5c      	cmp	r3, #92	; 0x5c
 8005aee:	d0f4      	beq.n	8005ada <create_name+0xb2>
	}
	*path = p;					/* Return pointer to the next segment */
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	601a      	str	r2, [r3, #0]
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005af6:	e011      	b.n	8005b1c <create_name+0xf4>
		wc = lfn[di - 1];
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005afe:	3b01      	subs	r3, #1
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8005b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d002      	beq.n	8005b16 <create_name+0xee>
 8005b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b12:	2b2e      	cmp	r3, #46	; 0x2e
 8005b14:	d106      	bne.n	8005b24 <create_name+0xfc>
		di--;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1ea      	bne.n	8005af8 <create_name+0xd0>
 8005b22:	e000      	b.n	8005b26 <create_name+0xfe>
		if (wc != ' ' && wc != '.') break;
 8005b24:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <create_name+0x114>
 8005b38:	2306      	movs	r3, #6
 8005b3a:	e13f      	b.n	8005dbc <create_name+0x394>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	e002      	b.n	8005b48 <create_name+0x120>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	3301      	adds	r3, #1
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d0f5      	beq.n	8005b42 <create_name+0x11a>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <create_name+0x142>
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4413      	add	r3, r2
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	2b2e      	cmp	r3, #46	; 0x2e
 8005b68:	d109      	bne.n	8005b7e <create_name+0x156>
 8005b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b6e:	f043 0303 	orr.w	r3, r3, #3
 8005b72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8005b76:	e002      	b.n	8005b7e <create_name+0x156>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <create_name+0x170>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	2b2e      	cmp	r3, #46	; 0x2e
 8005b96:	d1ef      	bne.n	8005b78 <create_name+0x150>

	mem_set(dp->fn, ' ', 11);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3340      	adds	r3, #64	; 0x40
 8005b9c:	220b      	movs	r2, #11
 8005b9e:	2120      	movs	r1, #32
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fd fdc3 	bl	800372c <mem_set>
	i = b = 0; ni = 8;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bac:	2300      	movs	r3, #0
 8005bae:	623b      	str	r3, [r7, #32]
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	61ba      	str	r2, [r7, #24]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8005bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 80aa 	beq.w	8005d20 <create_name+0x2f8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8005bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d006      	beq.n	8005be0 <create_name+0x1b8>
 8005bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8005bd6:	d10a      	bne.n	8005bee <create_name+0x1c6>
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d006      	beq.n	8005bee <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN;
 8005be0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005be4:	f043 0303 	orr.w	r3, r3, #3
 8005be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 8005bec:	e097      	b.n	8005d1e <create_name+0x2f6>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d203      	bcs.n	8005bfe <create_name+0x1d6>
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d123      	bne.n	8005c46 <create_name+0x21e>
			if (ni == 11) {				/* Name extension overflow? */
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b0b      	cmp	r3, #11
 8005c02:	d106      	bne.n	8005c12 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN;
 8005c04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c08:	f043 0303 	orr.w	r3, r3, #3
 8005c0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8005c10:	e08d      	b.n	8005d2e <create_name+0x306>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d005      	beq.n	8005c26 <create_name+0x1fe>
 8005c1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c1e:	f043 0303 	orr.w	r3, r3, #3
 8005c22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d87e      	bhi.n	8005d2c <create_name+0x304>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	2308      	movs	r3, #8
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	230b      	movs	r3, #11
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 8005c44:	e06b      	b.n	8005d1e <create_name+0x2f6>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8005c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c48:	2b7f      	cmp	r3, #127	; 0x7f
 8005c4a:	d911      	bls.n	8005c70 <create_name+0x248>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8005c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c50:	f043 0302 	orr.w	r3, r3, #2
 8005c54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
 8005c58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 fb92 	bl	8007384 <ff_wtoupper>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 fb32 	bl	80072d0 <ff_uni2oem>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8005c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c72:	2bff      	cmp	r3, #255	; 0xff
 8005c74:	d91a      	bls.n	8005cac <create_name+0x284>
			if (i >= ni - 1) {			/* Field overflow? */
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d308      	bcc.n	8005c92 <create_name+0x26a>
				cf |= NS_LOSS | NS_LFN;
 8005c80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c84:	f043 0303 	orr.w	r3, r3, #3
 8005c88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	e045      	b.n	8005d1e <create_name+0x2f6>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8005c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	b299      	uxth	r1, r3
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	623a      	str	r2, [r7, #32]
 8005c9e:	b2c9      	uxtb	r1, r1
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005caa:	e02e      	b.n	8005d0a <create_name+0x2e2>
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8005cac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <create_name+0x29a>
 8005cb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	481c      	ldr	r0, [pc, #112]	; (8005d28 <create_name+0x300>)
 8005cb8:	f7fd fd77 	bl	80037aa <chk_chr>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <create_name+0x2ac>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005cc2:	235f      	movs	r3, #95	; 0x5f
 8005cc4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005cc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cca:	f043 0303 	orr.w	r3, r3, #3
 8005cce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005cd2:	e01a      	b.n	8005d0a <create_name+0x2e2>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8005cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cd6:	2b40      	cmp	r3, #64	; 0x40
 8005cd8:	d908      	bls.n	8005cec <create_name+0x2c4>
 8005cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cdc:	2b5a      	cmp	r3, #90	; 0x5a
 8005cde:	d805      	bhi.n	8005cec <create_name+0x2c4>
					b |= 2;
 8005ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ce4:	f043 0302 	orr.w	r3, r3, #2
 8005ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8005cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cee:	2b60      	cmp	r3, #96	; 0x60
 8005cf0:	d90b      	bls.n	8005d0a <create_name+0x2e2>
 8005cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cf4:	2b7a      	cmp	r3, #122	; 0x7a
 8005cf6:	d808      	bhi.n	8005d0a <create_name+0x2e2>
					b |= 1; wc -= 0x20;
 8005cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d06:	3b20      	subs	r3, #32
 8005d08:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	623a      	str	r2, [r7, #32]
 8005d10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d12:	b2d1      	uxtb	r1, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	460a      	mov	r2, r1
 8005d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
 8005d1e:	e749      	b.n	8005bb4 <create_name+0x18c>
		if (wc == 0) break;				/* Break on end of the LFN */
 8005d20:	bf00      	nop
 8005d22:	e004      	b.n	8005d2e <create_name+0x306>
 8005d24:	08007d78 	.word	0x08007d78
 8005d28:	08007d84 	.word	0x08007d84
			if (si > di) break;						/* No name extension? */
 8005d2c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d34:	2be5      	cmp	r3, #229	; 0xe5
 8005d36:	d103      	bne.n	8005d40 <create_name+0x318>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2205      	movs	r2, #5
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d104      	bne.n	8005d50 <create_name+0x328>
 8005d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8005d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d54:	f003 030c 	and.w	r3, r3, #12
 8005d58:	2b0c      	cmp	r3, #12
 8005d5a:	d005      	beq.n	8005d68 <create_name+0x340>
 8005d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d105      	bne.n	8005d74 <create_name+0x34c>
 8005d68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d6c:	f043 0302 	orr.w	r3, r3, #2
 8005d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005d74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d117      	bne.n	8005db0 <create_name+0x388>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8005d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <create_name+0x370>
 8005d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d90:	f043 0310 	orr.w	r3, r3, #16
 8005d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8005d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <create_name+0x388>
 8005da4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005da8:	f043 0308 	orr.w	r3, r3, #8
 8005dac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005db6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8005dba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3728      	adds	r7, #40	; 0x28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8005dc4:	b590      	push	{r4, r7, lr}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005dd4:	e002      	b.n	8005ddc <follow_path+0x18>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b2f      	cmp	r3, #47	; 0x2f
 8005de2:	d0f8      	beq.n	8005dd6 <follow_path+0x12>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b5c      	cmp	r3, #92	; 0x5c
 8005dea:	d0f4      	beq.n	8005dd6 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	61da      	str	r2, [r3, #28]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b1f      	cmp	r3, #31
 8005dfe:	d80a      	bhi.n	8005e16 <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2280      	movs	r2, #128	; 0x80
 8005e04:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8005e08:	2100      	movs	r1, #0
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fe fc45 	bl	800469a <dir_sdi>
 8005e10:	4603      	mov	r3, r0
 8005e12:	75fb      	strb	r3, [r7, #23]
 8005e14:	e061      	b.n	8005eda <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e16:	463b      	mov	r3, r7
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fe04 	bl	8005a28 <create_name>
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d152      	bne.n	8005ed0 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff fb1e 	bl	800546c <dir_find>
 8005e30:	4603      	mov	r3, r0
 8005e32:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005e3a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d145      	bne.n	8005ed4 <follow_path+0x110>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d140      	bne.n	8005ed4 <follow_path+0x110>
 8005e52:	2305      	movs	r3, #5
 8005e54:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005e56:	e03d      	b.n	8005ed4 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d13a      	bne.n	8005ed8 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	799b      	ldrb	r3, [r3, #6]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8005e6e:	2305      	movs	r3, #5
 8005e70:	75fb      	strb	r3, [r7, #23]
 8005e72:	e032      	b.n	8005eda <follow_path+0x116>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d119      	bne.n	8005eb0 <follow_path+0xec>
				dp->obj.c_scl = dp->obj.sclust;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f103 0410 	add.w	r4, r3, #16
 8005e8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005e8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	79d2      	ldrb	r2, [r2, #7]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6938      	ldr	r0, [r7, #16]
 8005eaa:	f7ff f8eb 	bl	8005084 <init_alloc_info>
 8005eae:	e7b2      	b.n	8005e16 <follow_path+0x52>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebe:	4413      	add	r3, r2
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6938      	ldr	r0, [r7, #16]
 8005ec4:	f7fe fd70 	bl	80049a8 <ld_clust>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ece:	e7a2      	b.n	8005e16 <follow_path+0x52>
			if (res != FR_OK) break;
 8005ed0:	bf00      	nop
 8005ed2:	e002      	b.n	8005eda <follow_path+0x116>
				break;
 8005ed4:	bf00      	nop
 8005ed6:	e000      	b.n	8005eda <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ed8:	bf00      	nop
			}
		}
	}

	return res;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd90      	pop	{r4, r7, pc}

08005ee4 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b089      	sub	sp, #36	; 0x24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef0:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <get_ldnumber+0x22>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	e02d      	b.n	8005f62 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	61fa      	str	r2, [r7, #28]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	73fb      	strb	r3, [r7, #15]
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	2b1f      	cmp	r3, #31
 8005f14:	d902      	bls.n	8005f1c <get_ldnumber+0x38>
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b3a      	cmp	r3, #58	; 0x3a
 8005f1a:	d1f4      	bne.n	8005f06 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b3a      	cmp	r3, #58	; 0x3a
 8005f20:	d11c      	bne.n	8005f5c <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8005f22:	2301      	movs	r3, #1
 8005f24:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b2f      	cmp	r3, #47	; 0x2f
 8005f2c:	d90c      	bls.n	8005f48 <get_ldnumber+0x64>
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b39      	cmp	r3, #57	; 0x39
 8005f34:	d808      	bhi.n	8005f48 <get_ldnumber+0x64>
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3302      	adds	r3, #2
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d103      	bne.n	8005f48 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	3b30      	subs	r3, #48	; 0x30
 8005f46:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dc04      	bgt.n	8005f58 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	e002      	b.n	8005f62 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8005f60:	697b      	ldr	r3, [r7, #20]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3724      	adds	r7, #36	; 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <check_fs>:

static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VBR, 2:Valid BS but not FAT, 3:Invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	70da      	strb	r2, [r3, #3]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fd fd06 	bl	8003998 <move_window>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <check_fs+0x2a>
 8005f92:	2304      	movs	r3, #4
 8005f94:	e044      	b.n	8006020 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	333c      	adds	r3, #60	; 0x3c
 8005f9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fd f9e2 	bl	8003368 <ld_word>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d001      	beq.n	8005fb4 <check_fs+0x48>
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e035      	b.n	8006020 <check_fs+0xb4>

	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	333c      	adds	r3, #60	; 0x3c
 8005fb8:	220b      	movs	r2, #11
 8005fba:	491b      	ldr	r1, [pc, #108]	; (8006028 <check_fs+0xbc>)
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fd fbce 	bl	800375e <mem_cmp>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <check_fs+0x60>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e029      	b.n	8006020 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd2:	2be9      	cmp	r3, #233	; 0xe9
 8005fd4:	d009      	beq.n	8005fea <check_fs+0x7e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2beb      	cmp	r3, #235	; 0xeb
 8005fde:	d004      	beq.n	8005fea <check_fs+0x7e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe6:	2be8      	cmp	r3, #232	; 0xe8
 8005fe8:	d119      	bne.n	800601e <check_fs+0xb2>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	333c      	adds	r3, #60	; 0x3c
 8005fee:	3336      	adds	r3, #54	; 0x36
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	490e      	ldr	r1, [pc, #56]	; (800602c <check_fs+0xc0>)
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fd fbb2 	bl	800375e <mem_cmp>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <check_fs+0x98>
 8006000:	2300      	movs	r3, #0
 8006002:	e00d      	b.n	8006020 <check_fs+0xb4>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	333c      	adds	r3, #60	; 0x3c
 8006008:	3352      	adds	r3, #82	; 0x52
 800600a:	2205      	movs	r2, #5
 800600c:	4908      	ldr	r1, [pc, #32]	; (8006030 <check_fs+0xc4>)
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd fba5 	bl	800375e <mem_cmp>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <check_fs+0xb2>
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <check_fs+0xb4>
	}
	return 2;	/* Valid BS but not FAT */
 800601e:	2302      	movs	r3, #2
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	08007d8c 	.word	0x08007d8c
 800602c:	08007d98 	.word	0x08007d98
 8006030:	08007d9c 	.word	0x08007d9c

08006034 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:auto, 1..:forced */
)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
 800603e:	2100      	movs	r1, #0
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ff93 	bl	8005f6c <check_fs>
 8006046:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d007      	beq.n	800605e <find_volume+0x2a>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d802      	bhi.n	800605a <find_volume+0x26>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <find_volume+0x2a>
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	e048      	b.n	80060f0 <find_volume+0xbc>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e015      	b.n	8006090 <find_volume+0x5c>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8006072:	4413      	add	r3, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f7fd f98e 	bl	8003396 <ld_dword>
 800607a:	4602      	mov	r2, r0
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	f107 0120 	add.w	r1, r7, #32
 8006084:	440b      	add	r3, r1
 8006086:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3301      	adds	r3, #1
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d9e6      	bls.n	8006064 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <find_volume+0x6e>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	3b01      	subs	r3, #1
 80060a0:	e000      	b.n	80060a4 <find_volume+0x70>
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	f107 0220 	add.w	r2, r7, #32
 80060ae:	4413      	add	r3, r2
 80060b0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00c      	beq.n	80060d2 <find_volume+0x9e>
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	f107 0220 	add.w	r2, r7, #32
 80060c0:	4413      	add	r3, r2
 80060c2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ff4f 	bl	8005f6c <check_fs>
 80060ce:	4603      	mov	r3, r0
 80060d0:	e000      	b.n	80060d4 <find_volume+0xa0>
 80060d2:	2303      	movs	r3, #3
 80060d4:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d108      	bne.n	80060ee <find_volume+0xba>
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d905      	bls.n	80060ee <find_volume+0xba>
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	3301      	adds	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d9db      	bls.n	80060a6 <find_volume+0x72>
	return fmt;
 80060ee:	69bb      	ldr	r3, [r7, #24]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 80060f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80060fc:	b096      	sub	sp, #88	; 0x58
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	4613      	mov	r3, r2
 8006106:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff fee8 	bl	8005ee4 <get_ldnumber>
 8006114:	63b8      	str	r0, [r7, #56]	; 0x38
	if (vol < 0) return FR_INVALID_DRIVE;
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	da01      	bge.n	8006120 <mount_volume+0x28>
 800611c:	230b      	movs	r3, #11
 800611e:	e320      	b.n	8006762 <mount_volume+0x66a>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8006120:	4aaf      	ldr	r2, [pc, #700]	; (80063e0 <mount_volume+0x2e8>)
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800612a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <mount_volume+0x3c>
 8006130:	230c      	movs	r3, #12
 8006132:	e316      	b.n	8006762 <mount_volume+0x66a>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006138:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8006142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01a      	beq.n	8006180 <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
 800614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fc fe7a 	bl	8002e48 <disk_status>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800615a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10c      	bne.n	8006180 <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <mount_volume+0x84>
 800616c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <mount_volume+0x84>
				return FR_WRITE_PROTECTED;
 8006178:	230a      	movs	r3, #10
 800617a:	e2f2      	b.n	8006762 <mount_volume+0x66a>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800617c:	2300      	movs	r3, #0
 800617e:	e2f0      	b.n	8006762 <mount_volume+0x66a>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find a FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	b2da      	uxtb	r2, r3
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	4618      	mov	r0, r3
 8006194:	f7fc fd7e 	bl	8002c94 <disk_initialize>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800619e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <mount_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80061aa:	2303      	movs	r3, #3
 80061ac:	e2d9      	b.n	8006762 <mount_volume+0x66a>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <mount_volume+0xcc>
 80061b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <mount_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80061c0:	230a      	movs	r3, #10
 80061c2:	e2ce      	b.n	8006762 <mount_volume+0x66a>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
 80061c4:	2100      	movs	r1, #0
 80061c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061c8:	f7ff ff34 	bl	8006034 <find_volume>
 80061cc:	64b8      	str	r0, [r7, #72]	; 0x48
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80061ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d101      	bne.n	80061d8 <mount_volume+0xe0>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e2c4      	b.n	8006762 <mount_volume+0x66a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80061d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d901      	bls.n	80061e2 <mount_volume+0xea>
 80061de:	230d      	movs	r3, #13
 80061e0:	e2bf      	b.n	8006762 <mount_volume+0x66a>
	bsect = fs->winsect;					/* Volume location */
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 80061e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	f040 813b 	bne.w	8006466 <mount_volume+0x36e>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80061f0:	230b      	movs	r3, #11
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f4:	e002      	b.n	80061fc <mount_volume+0x104>
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	3301      	adds	r3, #1
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fe:	2b3f      	cmp	r3, #63	; 0x3f
 8006200:	d806      	bhi.n	8006210 <mount_volume+0x118>
 8006202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006206:	4413      	add	r3, r2
 8006208:	333c      	adds	r3, #60	; 0x3c
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f2      	beq.n	80061f6 <mount_volume+0xfe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	2b3f      	cmp	r3, #63	; 0x3f
 8006214:	d801      	bhi.n	800621a <mount_volume+0x122>
 8006216:	230d      	movs	r3, #13
 8006218:	e2a3      	b.n	8006762 <mount_volume+0x66a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	333c      	adds	r3, #60	; 0x3c
 800621e:	3368      	adds	r3, #104	; 0x68
 8006220:	4618      	mov	r0, r3
 8006222:	f7fd f8a1 	bl	8003368 <ld_word>
 8006226:	4603      	mov	r3, r0
 8006228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622c:	d001      	beq.n	8006232 <mount_volume+0x13a>
 800622e:	230d      	movs	r3, #13
 8006230:	e297      	b.n	8006762 <mount_volume+0x66a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8006238:	2b09      	cmp	r3, #9
 800623a:	d001      	beq.n	8006240 <mount_volume+0x148>
			return FR_NO_FILESYSTEM;
 800623c:	230d      	movs	r3, #13
 800623e:	e290      	b.n	8006762 <mount_volume+0x66a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8006240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006242:	333c      	adds	r3, #60	; 0x3c
 8006244:	3348      	adds	r3, #72	; 0x48
 8006246:	4618      	mov	r0, r3
 8006248:	f7fd f8c7 	bl	80033da <ld_qword>
 800624c:	460a      	mov	r2, r1
 800624e:	4601      	mov	r1, r0
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	469b      	mov	fp, r3
 8006254:	f04f 0c00 	mov.w	ip, #0
 8006258:	eb1b 0301 	adds.w	r3, fp, r1
 800625c:	eb4c 0402 	adc.w	r4, ip, r2
 8006260:	e9c7 3406 	strd	r3, r4, [r7, #24]
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8006264:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006268:	2c01      	cmp	r4, #1
 800626a:	bf08      	it	eq
 800626c:	2b00      	cmpeq	r3, #0
 800626e:	d301      	bcc.n	8006274 <mount_volume+0x17c>
 8006270:	230d      	movs	r3, #13
 8006272:	e276      	b.n	8006762 <mount_volume+0x66a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8006274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006276:	333c      	adds	r3, #60	; 0x3c
 8006278:	3354      	adds	r3, #84	; 0x54
 800627a:	4618      	mov	r0, r3
 800627c:	f7fd f88b 	bl	8003396 <ld_dword>
 8006280:	4602      	mov	r2, r0
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	789b      	ldrb	r3, [r3, #2]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d001      	beq.n	800629c <mount_volume+0x1a4>
 8006298:	230d      	movs	r3, #13
 800629a:	e262      	b.n	8006762 <mount_volume+0x66a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80062a2:	461a      	mov	r2, r3
 80062a4:	2301      	movs	r3, #1
 80062a6:	4093      	lsls	r3, r2
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	895b      	ldrh	r3, [r3, #10]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <mount_volume+0x1c2>
 80062b6:	230d      	movs	r3, #13
 80062b8:	e253      	b.n	8006762 <mount_volume+0x66a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	333c      	adds	r3, #60	; 0x3c
 80062be:	335c      	adds	r3, #92	; 0x5c
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fd f868 	bl	8003396 <ld_dword>
 80062c6:	6238      	str	r0, [r7, #32]
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	4a46      	ldr	r2, [pc, #280]	; (80063e4 <mount_volume+0x2ec>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d901      	bls.n	80062d4 <mount_volume+0x1dc>
 80062d0:	230d      	movs	r3, #13
 80062d2:	e246      	b.n	8006762 <mount_volume+0x66a>
		fs->n_fatent = nclst + 2;
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	1c9a      	adds	r2, r3, #2
 80062d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062da:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	333c      	adds	r3, #60	; 0x3c
 80062e6:	3358      	adds	r3, #88	; 0x58
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fd f854 	bl	8003396 <ld_dword>
 80062ee:	4602      	mov	r2, r0
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	441a      	add	r2, r3
 80062f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80062f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fa:	333c      	adds	r3, #60	; 0x3c
 80062fc:	3350      	adds	r3, #80	; 0x50
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fd f849 	bl	8003396 <ld_dword>
 8006304:	4602      	mov	r2, r0
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	441a      	add	r2, r3
 800630a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800630e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	4619      	mov	r1, r3
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631a:	895b      	ldrh	r3, [r3, #10]
 800631c:	4618      	mov	r0, r3
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	fb03 f300 	mul.w	r3, r3, r0
 8006324:	469b      	mov	fp, r3
 8006326:	f04f 0c00 	mov.w	ip, #0
 800632a:	eb1b 0301 	adds.w	r3, fp, r1
 800632e:	eb4c 0402 	adc.w	r4, ip, r2
 8006332:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006336:	42a2      	cmp	r2, r4
 8006338:	bf08      	it	eq
 800633a:	4299      	cmpeq	r1, r3
 800633c:	d201      	bcs.n	8006342 <mount_volume+0x24a>
 800633e:	230d      	movs	r3, #13
 8006340:	e20f      	b.n	8006762 <mount_volume+0x66a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	333c      	adds	r3, #60	; 0x3c
 8006346:	3360      	adds	r3, #96	; 0x60
 8006348:	4618      	mov	r0, r3
 800634a:	f7fd f824 	bl	8003396 <ld_dword>
 800634e:	4602      	mov	r2, r0
 8006350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006352:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635a:	647b      	str	r3, [r7, #68]	; 0x44
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 800635c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d11c      	bne.n	800639c <mount_volume+0x2a4>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8006362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006364:	895b      	ldrh	r3, [r3, #10]
 8006366:	461a      	mov	r2, r3
 8006368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636a:	4293      	cmp	r3, r2
 800636c:	d301      	bcc.n	8006372 <mount_volume+0x27a>
 800636e:	230d      	movs	r3, #13
 8006370:	e1f7      	b.n	8006762 <mount_volume+0x66a>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	4619      	mov	r1, r3
 8006378:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800637a:	f7fd fba9 	bl	8003ad0 <clst2sect>
 800637e:	4602      	mov	r2, r0
 8006380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006382:	4413      	add	r3, r2
 8006384:	4619      	mov	r1, r3
 8006386:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006388:	f7fd fb06 	bl	8003998 <move_window>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <mount_volume+0x29e>
 8006392:	2301      	movs	r3, #1
 8006394:	e1e5      	b.n	8006762 <mount_volume+0x66a>
				so++;
 8006396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006398:	3301      	adds	r3, #1
 800639a:	647b      	str	r3, [r7, #68]	; 0x44
			}
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 800639c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800639e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a0:	4413      	add	r3, r2
 80063a2:	333c      	adds	r3, #60	; 0x3c
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b81      	cmp	r3, #129	; 0x81
 80063a8:	d005      	beq.n	80063b6 <mount_volume+0x2be>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 80063aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ac:	3320      	adds	r3, #32
 80063ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (i == 0) {
 80063b4:	e7d2      	b.n	800635c <mount_volume+0x264>
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 80063b6:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 80063b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ba:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80063be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c0:	3314      	adds	r3, #20
 80063c2:	4413      	add	r3, r2
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fc ffe6 	bl	8003396 <ld_dword>
 80063ca:	6438      	str	r0, [r7, #64]	; 0x40
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d904      	bls.n	80063dc <mount_volume+0x2e4>
 80063d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063d8:	429a      	cmp	r2, r3
 80063da:	d305      	bcc.n	80063e8 <mount_volume+0x2f0>
 80063dc:	230d      	movs	r3, #13
 80063de:	e1c0      	b.n	8006762 <mount_volume+0x66a>
 80063e0:	200000a0 	.word	0x200000a0
 80063e4:	7ffffffd 	.word	0x7ffffffd
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ee:	895b      	ldrh	r3, [r3, #10]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f4:	3b02      	subs	r3, #2
 80063f6:	fb03 f301 	mul.w	r3, r3, r1
 80063fa:	441a      	add	r2, r3
 80063fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fe:	635a      	str	r2, [r3, #52]	; 0x34
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8006400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006406:	09db      	lsrs	r3, r3, #7
 8006408:	4413      	add	r3, r2
 800640a:	4619      	mov	r1, r3
 800640c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800640e:	f7fd fac3 	bl	8003998 <move_window>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <mount_volume+0x324>
 8006418:	2301      	movs	r3, #1
 800641a:	e1a2      	b.n	8006762 <mount_volume+0x66a>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	4618      	mov	r0, r3
 800642e:	f7fc ffb2 	bl	8003396 <ld_dword>
 8006432:	6178      	str	r0, [r7, #20]
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643a:	d008      	beq.n	800644e <mount_volume+0x356>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800643c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800643e:	3301      	adds	r3, #1
 8006440:	643b      	str	r3, [r7, #64]	; 0x40
 8006442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	429a      	cmp	r2, r3
 8006448:	d0da      	beq.n	8006400 <mount_volume+0x308>
 800644a:	230d      	movs	r3, #13
 800644c:	e189      	b.n	8006762 <mount_volume+0x66a>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800644e:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	619a      	str	r2, [r3, #24]
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8006460:	2304      	movs	r3, #4
 8006462:	64bb      	str	r3, [r7, #72]	; 0x48
 8006464:	e168      	b.n	8006738 <mount_volume+0x640>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	333c      	adds	r3, #60	; 0x3c
 800646a:	330b      	adds	r3, #11
 800646c:	4618      	mov	r0, r3
 800646e:	f7fc ff7b 	bl	8003368 <ld_word>
 8006472:	4603      	mov	r3, r0
 8006474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006478:	d001      	beq.n	800647e <mount_volume+0x386>
 800647a:	230d      	movs	r3, #13
 800647c:	e171      	b.n	8006762 <mount_volume+0x66a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	333c      	adds	r3, #60	; 0x3c
 8006482:	3316      	adds	r3, #22
 8006484:	4618      	mov	r0, r3
 8006486:	f7fc ff6f 	bl	8003368 <ld_word>
 800648a:	4603      	mov	r3, r0
 800648c:	653b      	str	r3, [r7, #80]	; 0x50
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800648e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <mount_volume+0x3aa>
 8006494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006496:	333c      	adds	r3, #60	; 0x3c
 8006498:	3324      	adds	r3, #36	; 0x24
 800649a:	4618      	mov	r0, r3
 800649c:	f7fc ff7b 	bl	8003396 <ld_dword>
 80064a0:	6538      	str	r0, [r7, #80]	; 0x50
		fs->fsize = fasize;
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064a6:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	789b      	ldrb	r3, [r3, #2]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d005      	beq.n	80064c6 <mount_volume+0x3ce>
 80064ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064bc:	789b      	ldrb	r3, [r3, #2]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d001      	beq.n	80064c6 <mount_volume+0x3ce>
 80064c2:	230d      	movs	r3, #13
 80064c4:	e14d      	b.n	8006762 <mount_volume+0x66a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80064c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c8:	789b      	ldrb	r3, [r3, #2]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	653b      	str	r3, [r7, #80]	; 0x50

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80064d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064de:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80064e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e2:	895b      	ldrh	r3, [r3, #10]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <mount_volume+0x402>
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	895b      	ldrh	r3, [r3, #10]
 80064ec:	461a      	mov	r2, r3
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	895b      	ldrh	r3, [r3, #10]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <mount_volume+0x406>
 80064fa:	230d      	movs	r3, #13
 80064fc:	e131      	b.n	8006762 <mount_volume+0x66a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80064fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006500:	333c      	adds	r3, #60	; 0x3c
 8006502:	3311      	adds	r3, #17
 8006504:	4618      	mov	r0, r3
 8006506:	f7fc ff2f 	bl	8003368 <ld_word>
 800650a:	4603      	mov	r3, r0
 800650c:	461a      	mov	r2, r3
 800650e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006510:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006514:	891b      	ldrh	r3, [r3, #8]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <mount_volume+0x42c>
 8006520:	230d      	movs	r3, #13
 8006522:	e11e      	b.n	8006762 <mount_volume+0x66a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006526:	333c      	adds	r3, #60	; 0x3c
 8006528:	3313      	adds	r3, #19
 800652a:	4618      	mov	r0, r3
 800652c:	f7fc ff1c 	bl	8003368 <ld_word>
 8006530:	4603      	mov	r3, r0
 8006532:	657b      	str	r3, [r7, #84]	; 0x54
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <mount_volume+0x450>
 800653a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653c:	333c      	adds	r3, #60	; 0x3c
 800653e:	3320      	adds	r3, #32
 8006540:	4618      	mov	r0, r3
 8006542:	f7fc ff28 	bl	8003396 <ld_dword>
 8006546:	6578      	str	r0, [r7, #84]	; 0x54

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	333c      	adds	r3, #60	; 0x3c
 800654c:	330e      	adds	r3, #14
 800654e:	4618      	mov	r0, r3
 8006550:	f7fc ff0a 	bl	8003368 <ld_word>
 8006554:	4603      	mov	r3, r0
 8006556:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006558:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <mount_volume+0x46a>
 800655e:	230d      	movs	r3, #13
 8006560:	e0ff      	b.n	8006762 <mount_volume+0x66a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006562:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006566:	4413      	add	r3, r2
 8006568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800656a:	8912      	ldrh	r2, [r2, #8]
 800656c:	0912      	lsrs	r2, r2, #4
 800656e:	b292      	uxth	r2, r2
 8006570:	4413      	add	r3, r2
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	429a      	cmp	r2, r3
 800657a:	d201      	bcs.n	8006580 <mount_volume+0x488>
 800657c:	230d      	movs	r3, #13
 800657e:	e0f0      	b.n	8006762 <mount_volume+0x66a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006588:	8952      	ldrh	r2, [r2, #10]
 800658a:	fbb3 f3f2 	udiv	r3, r3, r2
 800658e:	623b      	str	r3, [r7, #32]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <mount_volume+0x4a2>
 8006596:	230d      	movs	r3, #13
 8006598:	e0e3      	b.n	8006762 <mount_volume+0x66a>
		fmt = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	4a72      	ldr	r2, [pc, #456]	; (800676c <mount_volume+0x674>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d801      	bhi.n	80065aa <mount_volume+0x4b2>
 80065a6:	2303      	movs	r3, #3
 80065a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d801      	bhi.n	80065b8 <mount_volume+0x4c0>
 80065b4:	2302      	movs	r3, #2
 80065b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	f640 72f5 	movw	r2, #4085	; 0xff5
 80065be:	4293      	cmp	r3, r2
 80065c0:	d801      	bhi.n	80065c6 <mount_volume+0x4ce>
 80065c2:	2301      	movs	r3, #1
 80065c4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (fmt == 0) return FR_NO_FILESYSTEM;
 80065c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <mount_volume+0x4d8>
 80065cc:	230d      	movs	r3, #13
 80065ce:	e0c8      	b.n	8006762 <mount_volume+0x66a>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	1c9a      	adds	r2, r3, #2
 80065d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80065d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065dc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80065de:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	441a      	add	r2, r3
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80065e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	441a      	add	r2, r3
 80065ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80065f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d11e      	bne.n	8006636 <mount_volume+0x53e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80065f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fa:	333c      	adds	r3, #60	; 0x3c
 80065fc:	332a      	adds	r3, #42	; 0x2a
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fc feb2 	bl	8003368 <ld_word>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <mount_volume+0x516>
 800660a:	230d      	movs	r3, #13
 800660c:	e0a9      	b.n	8006762 <mount_volume+0x66a>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800660e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006610:	891b      	ldrh	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <mount_volume+0x522>
 8006616:	230d      	movs	r3, #13
 8006618:	e0a3      	b.n	8006762 <mount_volume+0x66a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	333c      	adds	r3, #60	; 0x3c
 800661e:	332c      	adds	r3, #44	; 0x2c
 8006620:	4618      	mov	r0, r3
 8006622:	f7fc feb8 	bl	8003396 <ld_dword>
 8006626:	4602      	mov	r2, r0
 8006628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006634:	e01e      	b.n	8006674 <mount_volume+0x57c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	891b      	ldrh	r3, [r3, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <mount_volume+0x54a>
 800663e:	230d      	movs	r3, #13
 8006640:	e08f      	b.n	8006762 <mount_volume+0x66a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006648:	441a      	add	r2, r3
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006650:	2b02      	cmp	r3, #2
 8006652:	d103      	bne.n	800665c <mount_volume+0x564>
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	e00a      	b.n	8006672 <mount_volume+0x57a>
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	4613      	mov	r3, r2
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	4413      	add	r3, r2
 8006666:	085a      	lsrs	r2, r3, #1
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	6a1a      	ldr	r2, [r3, #32]
 8006678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800667a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800667e:	0a5b      	lsrs	r3, r3, #9
 8006680:	429a      	cmp	r2, r3
 8006682:	d201      	bcs.n	8006688 <mount_volume+0x590>
 8006684:	230d      	movs	r3, #13
 8006686:	e06c      	b.n	8006762 <mount_volume+0x66a>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	619a      	str	r2, [r3, #24]
 8006690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006692:	699a      	ldr	r2, [r3, #24]
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800669e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d149      	bne.n	8006738 <mount_volume+0x640>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80066a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a6:	333c      	adds	r3, #60	; 0x3c
 80066a8:	3330      	adds	r3, #48	; 0x30
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fc fe5c 	bl	8003368 <ld_word>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d140      	bne.n	8006738 <mount_volume+0x640>
			&& move_window(fs, bsect + 1) == FR_OK)
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	3301      	adds	r3, #1
 80066ba:	4619      	mov	r1, r3
 80066bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066be:	f7fd f96b 	bl	8003998 <move_window>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d137      	bne.n	8006738 <mount_volume+0x640>
		{
			fs->fsi_flag = 0;
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	2200      	movs	r2, #0
 80066cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d0:	333c      	adds	r3, #60	; 0x3c
 80066d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fc fe46 	bl	8003368 <ld_word>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d127      	bne.n	8006738 <mount_volume+0x640>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80066e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ea:	333c      	adds	r3, #60	; 0x3c
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fc fe52 	bl	8003396 <ld_dword>
 80066f2:	4602      	mov	r2, r0
 80066f4:	4b1e      	ldr	r3, [pc, #120]	; (8006770 <mount_volume+0x678>)
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d11e      	bne.n	8006738 <mount_volume+0x640>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	333c      	adds	r3, #60	; 0x3c
 80066fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006702:	4618      	mov	r0, r3
 8006704:	f7fc fe47 	bl	8003396 <ld_dword>
 8006708:	4602      	mov	r2, r0
 800670a:	4b1a      	ldr	r3, [pc, #104]	; (8006774 <mount_volume+0x67c>)
 800670c:	429a      	cmp	r2, r3
 800670e:	d113      	bne.n	8006738 <mount_volume+0x640>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006712:	333c      	adds	r3, #60	; 0x3c
 8006714:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006718:	4618      	mov	r0, r3
 800671a:	f7fc fe3c 	bl	8003396 <ld_dword>
 800671e:	4602      	mov	r2, r0
 8006720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006722:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006726:	333c      	adds	r3, #60	; 0x3c
 8006728:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800672c:	4618      	mov	r0, r3
 800672e:	f7fc fe32 	bl	8003396 <ld_dword>
 8006732:	4602      	mov	r2, r0
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 8006738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673a:	b2da      	uxtb	r2, r3
 800673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <mount_volume+0x680>)
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <mount_volume+0x680>)
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <mount_volume+0x680>)
 800674e:	881a      	ldrh	r2, [r3, #0]
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006756:	4a09      	ldr	r2, [pc, #36]	; (800677c <mount_volume+0x684>)
 8006758:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675c:	4a08      	ldr	r2, [pc, #32]	; (8006780 <mount_volume+0x688>)
 800675e:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3758      	adds	r7, #88	; 0x58
 8006766:	46bd      	mov	sp, r7
 8006768:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800676c:	0ffffff5 	.word	0x0ffffff5
 8006770:	41615252 	.word	0x41615252
 8006774:	61417272 	.word	0x61417272
 8006778:	200000a4 	.word	0x200000a4
 800677c:	20000308 	.word	0x20000308
 8006780:	200000a8 	.word	0x200000a8

08006784 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800678e:	2309      	movs	r3, #9
 8006790:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01c      	beq.n	80067d2 <validate+0x4e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d018      	beq.n	80067d2 <validate+0x4e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d013      	beq.n	80067d2 <validate+0x4e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	889a      	ldrh	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	88db      	ldrh	r3, [r3, #6]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d10c      	bne.n	80067d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fc fb42 	bl	8002e48 <disk_status>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <validate+0x4e>
			res = FR_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d102      	bne.n	80067de <validate+0x5a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	e000      	b.n	80067e0 <validate+0x5c>
 80067de:	2300      	movs	r3, #0
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	6013      	str	r3, [r2, #0]
	return res;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006802:	f107 0310 	add.w	r3, r7, #16
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff fb6c 	bl	8005ee4 <get_ldnumber>
 800680c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	2b00      	cmp	r3, #0
 8006812:	da01      	bge.n	8006818 <f_mount+0x28>
 8006814:	230b      	movs	r3, #11
 8006816:	e025      	b.n	8006864 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006818:	4a14      	ldr	r2, [pc, #80]	; (800686c <f_mount+0x7c>)
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006820:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	490b      	ldr	r1, [pc, #44]	; (800686c <f_mount+0x7c>)
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <f_mount+0x5e>
 800684a:	2300      	movs	r3, #0
 800684c:	e00a      	b.n	8006864 <f_mount+0x74>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800684e:	f107 010c 	add.w	r1, r7, #12
 8006852:	f107 0308 	add.w	r3, r7, #8
 8006856:	2200      	movs	r2, #0
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff fc4d 	bl	80060f8 <mount_volume>
 800685e:	4603      	mov	r3, r0
 8006860:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006862:	7dfb      	ldrb	r3, [r7, #23]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3720      	adds	r7, #32
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	200000a0 	.word	0x200000a0

08006870 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006870:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006874:	b0a2      	sub	sp, #136	; 0x88
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	4613      	mov	r3, r2
 800687e:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <f_open+0x1a>
 8006886:	2309      	movs	r3, #9
 8006888:	e218      	b.n	8006cbc <f_open+0x44c>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006890:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8006892:	79fa      	ldrb	r2, [r7, #7]
 8006894:	f107 0114 	add.w	r1, r7, #20
 8006898:	f107 0308 	add.w	r3, r7, #8
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fc2b 	bl	80060f8 <mount_volume>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 80068a8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 81fc 	bne.w	8006caa <f_open+0x43a>
		dj.obj.fs = fs;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	f107 0318 	add.w	r3, r7, #24
 80068bc:	4611      	mov	r1, r2
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff fa80 	bl	8005dc4 <follow_path>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 80068ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d107      	bne.n	80068e2 <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80068d2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80068d6:	b25b      	sxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	da02      	bge.n	80068e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80068dc:	2306      	movs	r3, #6
 80068de:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	f003 031c 	and.w	r3, r3, #28
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80c0 	beq.w	8006a6e <f_open+0x1fe>
			if (res != FR_OK) {					/* No file, create new */
 80068ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d010      	beq.n	8006918 <f_open+0xa8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80068f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d107      	bne.n	800690e <f_open+0x9e>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80068fe:	f107 0318 	add.w	r3, r7, #24
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe feda 	bl	80056bc <dir_register>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	f043 0308 	orr.w	r3, r3, #8
 8006914:	71fb      	strb	r3, [r7, #7]
 8006916:	e010      	b.n	800693a <f_open+0xca>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006918:	7fbb      	ldrb	r3, [r7, #30]
 800691a:	f003 0311 	and.w	r3, r3, #17
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <f_open+0xba>
					res = FR_DENIED;
 8006922:	2307      	movs	r3, #7
 8006924:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006928:	e007      	b.n	800693a <f_open+0xca>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <f_open+0xca>
 8006934:	2308      	movs	r3, #8
 8006936:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800693a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800693e:	2b00      	cmp	r3, #0
 8006940:	f040 80af 	bne.w	8006aa2 <f_open+0x232>
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80a9 	beq.w	8006aa2 <f_open+0x232>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b04      	cmp	r3, #4
 8006956:	d149      	bne.n	80069ec <f_open+0x17c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4611      	mov	r1, r2
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe fb8d 	bl	8005084 <init_alloc_info>
					/* Set directory entry block initial state */
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	3302      	adds	r3, #2
 8006970:	221e      	movs	r2, #30
 8006972:	2100      	movs	r1, #0
 8006974:	4618      	mov	r0, r3
 8006976:	f7fc fed9 	bl	800372c <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	3326      	adds	r3, #38	; 0x26
 8006980:	221a      	movs	r2, #26
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f7fc fed1 	bl	800372c <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	3304      	adds	r3, #4
 8006990:	2220      	movs	r2, #32
 8006992:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	3308      	adds	r3, #8
 800699a:	49b3      	ldr	r1, [pc, #716]	; (8006c68 <f_open+0x3f8>)
 800699c:	4618      	mov	r0, r3
 800699e:	f7fc fdf3 	bl	8003588 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	3321      	adds	r3, #33	; 0x21
 80069a8:	2201      	movs	r2, #1
 80069aa:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 80069ac:	f107 0318 	add.w	r3, r7, #24
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe fbd0 	bl	8005156 <store_xdir>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 80069bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d16e      	bne.n	8006aa2 <f_open+0x232>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d06a      	beq.n	8006aa2 <f_open+0x232>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	4619      	mov	r1, r3
 80069d6:	f7fd fbfb 	bl	80041d0 <remove_chain>
 80069da:	4603      	mov	r3, r0
 80069dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	3a01      	subs	r2, #1
 80069e8:	615a      	str	r2, [r3, #20]
 80069ea:	e05a      	b.n	8006aa2 <f_open+0x232>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069f0:	4611      	mov	r1, r2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fd ffd8 	bl	80049a8 <ld_clust>
 80069f8:	6778      	str	r0, [r7, #116]	; 0x74
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80069fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069fc:	330e      	adds	r3, #14
 80069fe:	499a      	ldr	r1, [pc, #616]	; (8006c68 <f_open+0x3f8>)
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fc fdc1 	bl	8003588 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a08:	330b      	adds	r3, #11
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a12:	2200      	movs	r2, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fd ffe6 	bl	80049e6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a1c:	331c      	adds	r3, #28
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fc fdb1 	bl	8003588 <st_dword>
					fs->wflag = 1;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d037      	beq.n	8006aa2 <f_open+0x232>
						sc = fs->winsect;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	673b      	str	r3, [r7, #112]	; 0x70
						res = remove_chain(&dj.obj, cl, 0);
 8006a38:	f107 0318 	add.w	r3, r7, #24
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fd fbc5 	bl	80041d0 <remove_chain>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8006a4c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d126      	bne.n	8006aa2 <f_open+0x232>
							res = move_window(fs, sc);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fc ff9d 	bl	8003998 <move_window>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a68:	3a01      	subs	r2, #1
 8006a6a:	615a      	str	r2, [r3, #20]
 8006a6c:	e019      	b.n	8006aa2 <f_open+0x232>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8006a6e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d115      	bne.n	8006aa2 <f_open+0x232>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006a76:	7fbb      	ldrb	r3, [r7, #30]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <f_open+0x218>
					res = FR_NO_FILE;
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006a86:	e00c      	b.n	8006aa2 <f_open+0x232>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <f_open+0x232>
 8006a92:	7fbb      	ldrb	r3, [r7, #30]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <f_open+0x232>
						res = FR_DENIED;
 8006a9c:	2307      	movs	r3, #7
 8006a9e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 8006aa2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10f      	bne.n	8006aca <f_open+0x25a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <f_open+0x24c>
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aba:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8006ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	64da      	str	r2, [r3, #76]	; 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006aca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 80eb 	bne.w	8006caa <f_open+0x43a>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d114      	bne.n	8006b06 <f_open+0x296>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8006adc:	6a3a      	ldr	r2, [r7, #32]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8006ae2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006ae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006aea:	7ffa      	ldrb	r2, [r7, #31]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8006af2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4611      	mov	r1, r2
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fac0 	bl	8005084 <init_alloc_info>
 8006b04:	e013      	b.n	8006b2e <f_open+0x2be>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fd ff4b 	bl	80049a8 <ld_clust>
 8006b12:	4602      	mov	r2, r0
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b1a:	331c      	adds	r3, #28
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fc fc3a 	bl	8003396 <ld_dword>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f04f 0400 	mov.w	r4, #0
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	88da      	ldrh	r2, [r3, #6]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	79fa      	ldrb	r2, [r7, #7]
 8006b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	f04f 0400 	mov.w	r4, #0
 8006b5c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3350      	adds	r3, #80	; 0x50
 8006b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fc fdde 	bl	800372c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006b70:	79fb      	ldrb	r3, [r7, #7]
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8097 	beq.w	8006caa <f_open+0x43a>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f103 0410 	add.w	r4, r3, #16
 8006b82:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006b86:	4323      	orrs	r3, r4
 8006b88:	f000 808f 	beq.w	8006caa <f_open+0x43a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f103 0410 	add.w	r4, r3, #16
 8006b92:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	895b      	ldrh	r3, [r3, #10]
 8006ba0:	025b      	lsls	r3, r3, #9
 8006ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f103 0410 	add.w	r4, r3, #16
 8006bb2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006bb6:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8006bba:	e024      	b.n	8006c06 <f_open+0x396>
					clst = get_fat(&fp->obj, clst);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fc ffa2 	bl	8003b0c <get_fat>
 8006bc8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 8006bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d802      	bhi.n	8006bda <f_open+0x36a>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d102      	bne.n	8006bea <f_open+0x37a>
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bec:	469b      	mov	fp, r3
 8006bee:	f04f 0c00 	mov.w	ip, #0
 8006bf2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	ebb3 030b 	subs.w	r3, r3, fp
 8006bfe:	eb64 040c 	sbc.w	r4, r4, ip
 8006c02:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8006c06:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <f_open+0x3b2>
 8006c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c10:	4619      	mov	r1, r3
 8006c12:	f04f 0200 	mov.w	r2, #0
 8006c16:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006c1a:	42a2      	cmp	r2, r4
 8006c1c:	bf08      	it	eq
 8006c1e:	4299      	cmpeq	r1, r3
 8006c20:	d3cc      	bcc.n	8006bbc <f_open+0x34c>
				}
				fp->clust = clst;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006c2a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d13b      	bne.n	8006caa <f_open+0x43a>
 8006c32:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006c36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c3a:	f04f 0200 	mov.w	r2, #0
 8006c3e:	ea03 0b01 	and.w	fp, r3, r1
 8006c42:	ea04 0c02 	and.w	ip, r4, r2
 8006c46:	ea5b 030c 	orrs.w	r3, fp, ip
 8006c4a:	d02e      	beq.n	8006caa <f_open+0x43a>
					sc = clst2sect(fs, clst);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fc ff3c 	bl	8003ad0 <clst2sect>
 8006c58:	6738      	str	r0, [r7, #112]	; 0x70
					if (sc == 0) {
 8006c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d105      	bne.n	8006c6c <f_open+0x3fc>
						res = FR_INT_ERR;
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006c66:	e020      	b.n	8006caa <f_open+0x43a>
 8006c68:	4e210000 	.word	0x4e210000
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006c6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	f04f 0400 	mov.w	r4, #0
 8006c78:	0a4b      	lsrs	r3, r1, #9
 8006c7a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006c7e:	0a54      	lsrs	r4, r2, #9
 8006c80:	461a      	mov	r2, r3
 8006c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c84:	441a      	add	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	645a      	str	r2, [r3, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	7858      	ldrb	r0, [r3, #1]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f7fc f8e9 	bl	8002e70 <disk_read>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <f_open+0x43a>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006caa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <f_open+0x448>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006cb8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3788      	adds	r7, #136	; 0x88
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006cc6:	bf00      	nop

08006cc8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006cc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006ccc:	b08c      	sub	sp, #48	; 0x30
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
 8006cd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f107 0210 	add.w	r2, r7, #16
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff fd4a 	bl	8006784 <validate>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d108      	bne.n	8006d10 <f_write+0x48>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <f_write+0x4e>
 8006d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d14:	e18d      	b.n	8007032 <f_write+0x36a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <f_write+0x60>
 8006d24:	2307      	movs	r3, #7
 8006d26:	e184      	b.n	8007032 <f_write+0x36a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	f000 8170 	beq.w	8007012 <f_write+0x34a>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8006d38:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	441a      	add	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8006d48:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	f080 8160 	bcs.w	8007012 <f_write+0x34a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8006d58:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006d60:	e157      	b.n	8007012 <f_write+0x34a>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 8006d68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	ea0b 0301 	and.w	r3, fp, r1
 8006d74:	ea0c 0402 	and.w	r4, ip, r2
 8006d78:	4323      	orrs	r3, r4
 8006d7a:	f040 80f4 	bne.w	8006f66 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	f04f 0400 	mov.w	r4, #0
 8006d8c:	0a4b      	lsrs	r3, r1, #9
 8006d8e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006d92:	0a54      	lsrs	r4, r2, #9
 8006d94:	461a      	mov	r2, r3
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	895b      	ldrh	r3, [r3, #10]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d13c      	bne.n	8006e20 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8006dac:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006db0:	4323      	orrs	r3, r4
 8006db2:	d10c      	bne.n	8006dce <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10e      	bne.n	8006dde <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd fae5 	bl	8004394 <create_chain>
 8006dca:	62b8      	str	r0, [r7, #40]	; 0x28
 8006dcc:	e007      	b.n	8006dde <f_write+0x116>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	f7fd fadc 	bl	8004394 <create_chain>
 8006ddc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 811b 	beq.w	800701c <f_write+0x354>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d105      	bne.n	8006df8 <f_write+0x130>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8006df4:	2302      	movs	r3, #2
 8006df6:	e11c      	b.n	8007032 <f_write+0x36a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d105      	bne.n	8006e0c <f_write+0x144>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e112      	b.n	8007032 <f_write+0x36a>
				fp->clust = clst;			/* Update current cluster */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e10:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <f_write+0x158>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e1e:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e26:	b25b      	sxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da1b      	bge.n	8006e64 <f_write+0x19c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	7858      	ldrb	r0, [r3, #1]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f7fc f880 	bl	8002f40 <disk_write>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <f_write+0x18a>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e0ef      	b.n	8007032 <f_write+0x36a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7fc fe2f 	bl	8003ad0 <clst2sect>
 8006e72:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d105      	bne.n	8006e86 <f_write+0x1be>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8006e82:	2302      	movs	r3, #2
 8006e84:	e0d5      	b.n	8007032 <f_write+0x36a>
			sect += csect;
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	0a5b      	lsrs	r3, r3, #9
 8006e92:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d03f      	beq.n	8006f1a <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	8952      	ldrh	r2, [r2, #10]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d905      	bls.n	8006eb4 <f_write+0x1ec>
					cc = fs->csize - csect;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	895b      	ldrh	r3, [r3, #10]
 8006eac:	461a      	mov	r2, r3
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	7858      	ldrb	r0, [r3, #1]
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	69f9      	ldr	r1, [r7, #28]
 8006ebe:	f7fc f83f 	bl	8002f40 <disk_write>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <f_write+0x20c>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e0ae      	b.n	8007032 <f_write+0x36a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	6a3a      	ldr	r2, [r7, #32]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d917      	bls.n	8006f12 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	025b      	lsls	r3, r3, #9
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006efa:	4619      	mov	r1, r3
 8006efc:	f7fc fbf6 	bl	80036ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	025b      	lsls	r3, r3, #9
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006f18:	e04e      	b.n	8006fb8 <f_write+0x2f0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d01d      	beq.n	8006f60 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f103 0410 	add.w	r4, r3, #16
 8006f30:	e9d4 3400 	ldrd	r3, r4, [r4]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006f34:	42a2      	cmp	r2, r4
 8006f36:	bf08      	it	eq
 8006f38:	4299      	cmpeq	r1, r3
 8006f3a:	d211      	bcs.n	8006f60 <f_write+0x298>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	7858      	ldrb	r0, [r3, #1]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8006f46:	2301      	movs	r3, #1
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	f7fb ff91 	bl	8002e70 <disk_read>
 8006f4e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e068      	b.n	8007032 <f_write+0x36a>
			}
#endif
			fp->sect = sect;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8006f6c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f74:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d901      	bls.n	8006f86 <f_write+0x2be>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8006f92:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9a:	4413      	add	r3, r2
 8006f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9e:	69f9      	ldr	r1, [r7, #28]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fc fba3 	bl	80036ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	441a      	add	r2, r3
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	4413      	add	r3, r2
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	469b      	mov	fp, r3
 8006fde:	f04f 0c00 	mov.w	ip, #0
 8006fe2:	eb1b 0301 	adds.w	r3, fp, r1
 8006fe6:	eb4c 0402 	adc.w	r4, ip, r2
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f103 0410 	add.w	r4, r3, #16
 8006ff6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8007000:	4294      	cmp	r4, r2
 8007002:	bf08      	it	eq
 8007004:	428b      	cmpeq	r3, r1
 8007006:	d201      	bcs.n	800700c <f_write+0x344>
 8007008:	460b      	mov	r3, r1
 800700a:	4614      	mov	r4, r2
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	for ( ;  btw;							/* Repeat until all data written */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f47f aea4 	bne.w	8006d62 <f_write+0x9a>
 800701a:	e000      	b.n	800701e <f_write+0x356>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800701c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007028:	b2da      	uxtb	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3730      	adds	r7, #48	; 0x30
 8007036:	46bd      	mov	sp, r7
 8007038:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800703c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800703c:	b590      	push	{r4, r7, lr}
 800703e:	b09b      	sub	sp, #108	; 0x6c
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fb99 	bl	8006784 <validate>
 8007052:	4603      	mov	r3, r0
 8007054:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007058:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 810e 	bne.w	800727e <f_sync+0x242>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8106 	beq.w	800727e <f_sync+0x242>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007078:	b25b      	sxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	da17      	bge.n	80070ae <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800707e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007080:	7858      	ldrb	r0, [r3, #1]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800708c:	2301      	movs	r3, #1
 800708e:	f7fb ff57 	bl	8002f40 <disk_write>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <f_sync+0x60>
 8007098:	2301      	movs	r3, #1
 800709a:	e0f2      	b.n	8007282 <f_sync+0x246>
				fp->flag &= (BYTE)~FA_DIRTY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80070ae:	4b77      	ldr	r3, [pc, #476]	; (800728c <f_sync+0x250>)
 80070b0:	663b      	str	r3, [r7, #96]	; 0x60
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80070b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	f040 8094 	bne.w	80071e4 <f_sync+0x1a8>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fd f826 	bl	8004110 <fill_first_frag>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80070ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <f_sync+0xac>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	f04f 32ff 	mov.w	r2, #4294967295
 80070dc:	4619      	mov	r1, r3
 80070de:	f7fd f846 	bl	800416e <fill_last_frag>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 80070e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 80c6 	bne.w	800727e <f_sync+0x242>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	f107 0308 	add.w	r3, r7, #8
 80070f8:	4611      	mov	r1, r2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd ffeb 	bl	80050d6 <load_obj_xdir>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8007106:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800710a:	2b00      	cmp	r3, #0
 800710c:	f040 80b7 	bne.w	800727e <f_sync+0x242>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8007110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	3304      	adds	r3, #4
 8007116:	781a      	ldrb	r2, [r3, #0]
 8007118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	3304      	adds	r3, #4
 800711e:	f042 0220 	orr.w	r2, r2, #32
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	79da      	ldrb	r2, [r3, #7]
 800712a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	3321      	adds	r3, #33	; 0x21
 8007130:	f042 0201 	orr.w	r2, r2, #1
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 8007138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	4619      	mov	r1, r3
 8007146:	4610      	mov	r0, r2
 8007148:	f7fc fa1e 	bl	8003588 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 800714c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f103 0410 	add.w	r4, r3, #16
 800715a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800715e:	461a      	mov	r2, r3
 8007160:	4623      	mov	r3, r4
 8007162:	4608      	mov	r0, r1
 8007164:	f7fc fa3b 	bl	80035de <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 8007168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f103 0410 	add.w	r4, r3, #16
 8007176:	e9d4 3400 	ldrd	r3, r4, [r4]
 800717a:	461a      	mov	r2, r3
 800717c:	4623      	mov	r3, r4
 800717e:	4608      	mov	r0, r1
 8007180:	f7fc fa2d 	bl	80035de <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8007184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	330c      	adds	r3, #12
 800718a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800718c:	4618      	mov	r0, r3
 800718e:	f7fc f9fb 	bl	8003588 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8007192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	3315      	adds	r3, #21
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800719c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	3310      	adds	r3, #16
 80071a2:	2100      	movs	r1, #0
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fc f9ef 	bl	8003588 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80071aa:	f107 0308 	add.w	r3, r7, #8
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fd ffd1 	bl	8005156 <store_xdir>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80071ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d15d      	bne.n	800727e <f_sync+0x242>
							res = sync_fs(fs);
 80071c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fc fc15 	bl	80039f4 <sync_fs>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80071e2:	e04c      	b.n	800727e <f_sync+0x242>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80071e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ea:	4619      	mov	r1, r3
 80071ec:	4610      	mov	r0, r2
 80071ee:	f7fc fbd3 	bl	8003998 <move_window>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80071f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d13e      	bne.n	800727e <f_sync+0x242>
					dir = fp->dir_ptr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007204:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8007206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007208:	330b      	adds	r3, #11
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800720e:	330b      	adds	r3, #11
 8007210:	f042 0220 	orr.w	r2, r2, #32
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	461a      	mov	r2, r3
 8007222:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007224:	f7fd fbdf 	bl	80049e6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800722a:	f103 021c 	add.w	r2, r3, #28
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f103 0410 	add.w	r4, r3, #16
 8007234:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fc f9a4 	bl	8003588 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007242:	3316      	adds	r3, #22
 8007244:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007246:	4618      	mov	r0, r3
 8007248:	f7fc f99e 	bl	8003588 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800724c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800724e:	3312      	adds	r3, #18
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f7fc f97e 	bl	8003554 <st_word>
					fs->wflag = 1;
 8007258:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800725a:	2201      	movs	r2, #1
 800725c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800725e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007260:	4618      	mov	r0, r3
 8007262:	f7fc fbc7 	bl	80039f4 <sync_fs>
 8007266:	4603      	mov	r3, r0
 8007268:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007276:	b2da      	uxtb	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800727e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007282:	4618      	mov	r0, r3
 8007284:	376c      	adds	r7, #108	; 0x6c
 8007286:	46bd      	mov	sp, r7
 8007288:	bd90      	pop	{r4, r7, pc}
 800728a:	bf00      	nop
 800728c:	4e210000 	.word	0x4e210000

08007290 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fecf 	bl	800703c <f_sync>
 800729e:	4603      	mov	r3, r0
 80072a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10e      	bne.n	80072c6 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f107 0208 	add.w	r2, r7, #8
 80072ae:	4611      	mov	r1, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff fa67 	bl	8006784 <validate>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <ff_uni2oem>:
#if FF_CODE_PAGE >= 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b08b      	sub	sp, #44	; 0x2c
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	807b      	strh	r3, [r7, #2]
	const WCHAR *p;
	WCHAR c = 0, uc;
 80072dc:	2300      	movs	r3, #0
 80072de:	84fb      	strh	r3, [r7, #38]	; 0x26
	UINT i = 0, n, li, hi;
 80072e0:	2300      	movs	r3, #0
 80072e2:	623b      	str	r3, [r7, #32]


	if (uni < 0x80) {	/* ASCII? */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b7f      	cmp	r3, #127	; 0x7f
 80072e8:	d802      	bhi.n	80072f0 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072ee:	e041      	b.n	8007374 <ff_uni2oem+0xa4>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f6:	d23d      	bcs.n	8007374 <ff_uni2oem+0xa4>
 80072f8:	887b      	ldrh	r3, [r7, #2]
 80072fa:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 80072fe:	d139      	bne.n	8007374 <ff_uni2oem+0xa4>
			uc = (WCHAR)uni;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	827b      	strh	r3, [r7, #18]
			p = CVTBL(uni2oem, FF_CODE_PAGE);
 8007304:	4b1e      	ldr	r3, [pc, #120]	; (8007380 <ff_uni2oem+0xb0>)
 8007306:	60fb      	str	r3, [r7, #12]
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
 8007308:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 800730c:	617b      	str	r3, [r7, #20]
			li = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	61bb      	str	r3, [r7, #24]
			for (n = 16; n; n--) {
 8007312:	2310      	movs	r3, #16
 8007314:	61fb      	str	r3, [r7, #28]
 8007316:	e01e      	b.n	8007356 <ff_uni2oem+0x86>
				i = li + (hi - li) / 2;
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	4413      	add	r3, r2
 8007324:	623b      	str	r3, [r7, #32]
				if (uc == p[i * 2]) break;
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	8a7a      	ldrh	r2, [r7, #18]
 8007332:	429a      	cmp	r2, r3
 8007334:	d013      	beq.n	800735e <ff_uni2oem+0x8e>
				if (uc > p[i * 2]) {
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4413      	add	r3, r2
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	8a7a      	ldrh	r2, [r7, #18]
 8007342:	429a      	cmp	r2, r3
 8007344:	d902      	bls.n	800734c <ff_uni2oem+0x7c>
					li = i;
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	e001      	b.n	8007350 <ff_uni2oem+0x80>
				} else {
					hi = i;
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	617b      	str	r3, [r7, #20]
			for (n = 16; n; n--) {
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	3b01      	subs	r3, #1
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1dd      	bne.n	8007318 <ff_uni2oem+0x48>
 800735c:	e000      	b.n	8007360 <ff_uni2oem+0x90>
				if (uc == p[i * 2]) break;
 800735e:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d006      	beq.n	8007374 <ff_uni2oem+0xa4>
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	3302      	adds	r3, #2
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}

	return c;
 8007374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007376:	4618      	mov	r0, r3
 8007378:	372c      	adds	r7, #44	; 0x2c
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr
 8007380:	08007dcc 	.word	0x08007dcc

08007384 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007392:	d27d      	bcs.n	8007490 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8007398:	8a7b      	ldrh	r3, [r7, #18]
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d201      	bcs.n	80073a4 <ff_wtoupper+0x20>
 80073a0:	4b3e      	ldr	r3, [pc, #248]	; (800749c <ff_wtoupper+0x118>)
 80073a2:	e000      	b.n	80073a6 <ff_wtoupper+0x22>
 80073a4:	4b3e      	ldr	r3, [pc, #248]	; (80074a0 <ff_wtoupper+0x11c>)
 80073a6:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	1c9a      	adds	r2, r3, #2
 80073ac:	617a      	str	r2, [r7, #20]
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 80073b2:	8a3b      	ldrh	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d069      	beq.n	800748c <ff_wtoupper+0x108>
 80073b8:	8a7a      	ldrh	r2, [r7, #18]
 80073ba:	8a3b      	ldrh	r3, [r7, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d365      	bcc.n	800748c <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	1c9a      	adds	r2, r3, #2
 80073c4:	617a      	str	r2, [r7, #20]
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	81fb      	strh	r3, [r7, #14]
 80073ca:	89fb      	ldrh	r3, [r7, #14]
 80073cc:	0a1b      	lsrs	r3, r3, #8
 80073ce:	81bb      	strh	r3, [r7, #12]
 80073d0:	89fb      	ldrh	r3, [r7, #14]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 80073d6:	8a7a      	ldrh	r2, [r7, #18]
 80073d8:	8a39      	ldrh	r1, [r7, #16]
 80073da:	89fb      	ldrh	r3, [r7, #14]
 80073dc:	440b      	add	r3, r1
 80073de:	429a      	cmp	r2, r3
 80073e0:	da4a      	bge.n	8007478 <ff_wtoupper+0xf4>
				switch (cmd) {
 80073e2:	89bb      	ldrh	r3, [r7, #12]
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d850      	bhi.n	800748a <ff_wtoupper+0x106>
 80073e8:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <ff_wtoupper+0x6c>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007415 	.word	0x08007415
 80073f4:	08007427 	.word	0x08007427
 80073f8:	0800743d 	.word	0x0800743d
 80073fc:	08007445 	.word	0x08007445
 8007400:	0800744d 	.word	0x0800744d
 8007404:	08007455 	.word	0x08007455
 8007408:	0800745d 	.word	0x0800745d
 800740c:	08007465 	.word	0x08007465
 8007410:	0800746d 	.word	0x0800746d
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8007414:	8a7a      	ldrh	r2, [r7, #18]
 8007416:	8a3b      	ldrh	r3, [r7, #16]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	827b      	strh	r3, [r7, #18]
 8007424:	e027      	b.n	8007476 <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8007426:	8a7a      	ldrh	r2, [r7, #18]
 8007428:	8a3b      	ldrh	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	b29b      	uxth	r3, r3
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	b29b      	uxth	r3, r3
 8007434:	8a7a      	ldrh	r2, [r7, #18]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	827b      	strh	r3, [r7, #18]
 800743a:	e01c      	b.n	8007476 <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 800743c:	8a7b      	ldrh	r3, [r7, #18]
 800743e:	3b10      	subs	r3, #16
 8007440:	827b      	strh	r3, [r7, #18]
 8007442:	e018      	b.n	8007476 <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8007444:	8a7b      	ldrh	r3, [r7, #18]
 8007446:	3b20      	subs	r3, #32
 8007448:	827b      	strh	r3, [r7, #18]
 800744a:	e014      	b.n	8007476 <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 800744c:	8a7b      	ldrh	r3, [r7, #18]
 800744e:	3b30      	subs	r3, #48	; 0x30
 8007450:	827b      	strh	r3, [r7, #18]
 8007452:	e010      	b.n	8007476 <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8007454:	8a7b      	ldrh	r3, [r7, #18]
 8007456:	3b1a      	subs	r3, #26
 8007458:	827b      	strh	r3, [r7, #18]
 800745a:	e00c      	b.n	8007476 <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 800745c:	8a7b      	ldrh	r3, [r7, #18]
 800745e:	3308      	adds	r3, #8
 8007460:	827b      	strh	r3, [r7, #18]
 8007462:	e008      	b.n	8007476 <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 8007464:	8a7b      	ldrh	r3, [r7, #18]
 8007466:	3b50      	subs	r3, #80	; 0x50
 8007468:	827b      	strh	r3, [r7, #18]
 800746a:	e004      	b.n	8007476 <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 800746c:	8a7b      	ldrh	r3, [r7, #18]
 800746e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007472:	827b      	strh	r3, [r7, #18]
 8007474:	bf00      	nop
				}
				break;
 8007476:	e008      	b.n	800748a <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8007478:	89bb      	ldrh	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d194      	bne.n	80073a8 <ff_wtoupper+0x24>
 800747e:	89fb      	ldrh	r3, [r7, #14]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8007488:	e78e      	b.n	80073a8 <ff_wtoupper+0x24>
				break;
 800748a:	bf00      	nop
		}
		uni = uc;
 800748c:	8a7b      	ldrh	r3, [r7, #18]
 800748e:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8007490:	687b      	ldr	r3, [r7, #4]
}
 8007492:	4618      	mov	r0, r3
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr
 800749c:	0800f144 	.word	0x0800f144
 80074a0:	0800f338 	.word	0x0800f338

080074a4 <__errno>:
 80074a4:	4b01      	ldr	r3, [pc, #4]	; (80074ac <__errno+0x8>)
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	2000000c 	.word	0x2000000c

080074b0 <__libc_init_array>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	2500      	movs	r5, #0
 80074b4:	4e0c      	ldr	r6, [pc, #48]	; (80074e8 <__libc_init_array+0x38>)
 80074b6:	4c0d      	ldr	r4, [pc, #52]	; (80074ec <__libc_init_array+0x3c>)
 80074b8:	1ba4      	subs	r4, r4, r6
 80074ba:	10a4      	asrs	r4, r4, #2
 80074bc:	42a5      	cmp	r5, r4
 80074be:	d109      	bne.n	80074d4 <__libc_init_array+0x24>
 80074c0:	f000 fc3c 	bl	8007d3c <_init>
 80074c4:	2500      	movs	r5, #0
 80074c6:	4e0a      	ldr	r6, [pc, #40]	; (80074f0 <__libc_init_array+0x40>)
 80074c8:	4c0a      	ldr	r4, [pc, #40]	; (80074f4 <__libc_init_array+0x44>)
 80074ca:	1ba4      	subs	r4, r4, r6
 80074cc:	10a4      	asrs	r4, r4, #2
 80074ce:	42a5      	cmp	r5, r4
 80074d0:	d105      	bne.n	80074de <__libc_init_array+0x2e>
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074d8:	4798      	blx	r3
 80074da:	3501      	adds	r5, #1
 80074dc:	e7ee      	b.n	80074bc <__libc_init_array+0xc>
 80074de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074e2:	4798      	blx	r3
 80074e4:	3501      	adds	r5, #1
 80074e6:	e7f2      	b.n	80074ce <__libc_init_array+0x1e>
 80074e8:	0800f428 	.word	0x0800f428
 80074ec:	0800f428 	.word	0x0800f428
 80074f0:	0800f428 	.word	0x0800f428
 80074f4:	0800f42c 	.word	0x0800f42c

080074f8 <memset>:
 80074f8:	4603      	mov	r3, r0
 80074fa:	4402      	add	r2, r0
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d100      	bne.n	8007502 <memset+0xa>
 8007500:	4770      	bx	lr
 8007502:	f803 1b01 	strb.w	r1, [r3], #1
 8007506:	e7f9      	b.n	80074fc <memset+0x4>

08007508 <siprintf>:
 8007508:	b40e      	push	{r1, r2, r3}
 800750a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800750e:	b500      	push	{lr}
 8007510:	b09c      	sub	sp, #112	; 0x70
 8007512:	ab1d      	add	r3, sp, #116	; 0x74
 8007514:	9002      	str	r0, [sp, #8]
 8007516:	9006      	str	r0, [sp, #24]
 8007518:	9107      	str	r1, [sp, #28]
 800751a:	9104      	str	r1, [sp, #16]
 800751c:	4808      	ldr	r0, [pc, #32]	; (8007540 <siprintf+0x38>)
 800751e:	4909      	ldr	r1, [pc, #36]	; (8007544 <siprintf+0x3c>)
 8007520:	f853 2b04 	ldr.w	r2, [r3], #4
 8007524:	9105      	str	r1, [sp, #20]
 8007526:	6800      	ldr	r0, [r0, #0]
 8007528:	a902      	add	r1, sp, #8
 800752a:	9301      	str	r3, [sp, #4]
 800752c:	f000 f86e 	bl	800760c <_svfiprintf_r>
 8007530:	2200      	movs	r2, #0
 8007532:	9b02      	ldr	r3, [sp, #8]
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	b01c      	add	sp, #112	; 0x70
 8007538:	f85d eb04 	ldr.w	lr, [sp], #4
 800753c:	b003      	add	sp, #12
 800753e:	4770      	bx	lr
 8007540:	2000000c 	.word	0x2000000c
 8007544:	ffff0208 	.word	0xffff0208

08007548 <strcpy>:
 8007548:	4603      	mov	r3, r0
 800754a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800754e:	f803 2b01 	strb.w	r2, [r3], #1
 8007552:	2a00      	cmp	r2, #0
 8007554:	d1f9      	bne.n	800754a <strcpy+0x2>
 8007556:	4770      	bx	lr

08007558 <__ssputs_r>:
 8007558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	688e      	ldr	r6, [r1, #8]
 800755e:	4682      	mov	sl, r0
 8007560:	429e      	cmp	r6, r3
 8007562:	460c      	mov	r4, r1
 8007564:	4690      	mov	r8, r2
 8007566:	4699      	mov	r9, r3
 8007568:	d837      	bhi.n	80075da <__ssputs_r+0x82>
 800756a:	898a      	ldrh	r2, [r1, #12]
 800756c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007570:	d031      	beq.n	80075d6 <__ssputs_r+0x7e>
 8007572:	2302      	movs	r3, #2
 8007574:	6825      	ldr	r5, [r4, #0]
 8007576:	6909      	ldr	r1, [r1, #16]
 8007578:	1a6f      	subs	r7, r5, r1
 800757a:	6965      	ldr	r5, [r4, #20]
 800757c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007580:	fb95 f5f3 	sdiv	r5, r5, r3
 8007584:	f109 0301 	add.w	r3, r9, #1
 8007588:	443b      	add	r3, r7
 800758a:	429d      	cmp	r5, r3
 800758c:	bf38      	it	cc
 800758e:	461d      	movcc	r5, r3
 8007590:	0553      	lsls	r3, r2, #21
 8007592:	d530      	bpl.n	80075f6 <__ssputs_r+0x9e>
 8007594:	4629      	mov	r1, r5
 8007596:	f000 fb37 	bl	8007c08 <_malloc_r>
 800759a:	4606      	mov	r6, r0
 800759c:	b950      	cbnz	r0, 80075b4 <__ssputs_r+0x5c>
 800759e:	230c      	movs	r3, #12
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	f8ca 3000 	str.w	r3, [sl]
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b4:	463a      	mov	r2, r7
 80075b6:	6921      	ldr	r1, [r4, #16]
 80075b8:	f000 fab6 	bl	8007b28 <memcpy>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	6126      	str	r6, [r4, #16]
 80075ca:	443e      	add	r6, r7
 80075cc:	6026      	str	r6, [r4, #0]
 80075ce:	464e      	mov	r6, r9
 80075d0:	6165      	str	r5, [r4, #20]
 80075d2:	1bed      	subs	r5, r5, r7
 80075d4:	60a5      	str	r5, [r4, #8]
 80075d6:	454e      	cmp	r6, r9
 80075d8:	d900      	bls.n	80075dc <__ssputs_r+0x84>
 80075da:	464e      	mov	r6, r9
 80075dc:	4632      	mov	r2, r6
 80075de:	4641      	mov	r1, r8
 80075e0:	6820      	ldr	r0, [r4, #0]
 80075e2:	f000 faac 	bl	8007b3e <memmove>
 80075e6:	68a3      	ldr	r3, [r4, #8]
 80075e8:	2000      	movs	r0, #0
 80075ea:	1b9b      	subs	r3, r3, r6
 80075ec:	60a3      	str	r3, [r4, #8]
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	441e      	add	r6, r3
 80075f2:	6026      	str	r6, [r4, #0]
 80075f4:	e7dc      	b.n	80075b0 <__ssputs_r+0x58>
 80075f6:	462a      	mov	r2, r5
 80075f8:	f000 fb60 	bl	8007cbc <_realloc_r>
 80075fc:	4606      	mov	r6, r0
 80075fe:	2800      	cmp	r0, #0
 8007600:	d1e2      	bne.n	80075c8 <__ssputs_r+0x70>
 8007602:	6921      	ldr	r1, [r4, #16]
 8007604:	4650      	mov	r0, sl
 8007606:	f000 fab3 	bl	8007b70 <_free_r>
 800760a:	e7c8      	b.n	800759e <__ssputs_r+0x46>

0800760c <_svfiprintf_r>:
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	461d      	mov	r5, r3
 8007612:	898b      	ldrh	r3, [r1, #12]
 8007614:	b09d      	sub	sp, #116	; 0x74
 8007616:	061f      	lsls	r7, r3, #24
 8007618:	4680      	mov	r8, r0
 800761a:	460c      	mov	r4, r1
 800761c:	4616      	mov	r6, r2
 800761e:	d50f      	bpl.n	8007640 <_svfiprintf_r+0x34>
 8007620:	690b      	ldr	r3, [r1, #16]
 8007622:	b96b      	cbnz	r3, 8007640 <_svfiprintf_r+0x34>
 8007624:	2140      	movs	r1, #64	; 0x40
 8007626:	f000 faef 	bl	8007c08 <_malloc_r>
 800762a:	6020      	str	r0, [r4, #0]
 800762c:	6120      	str	r0, [r4, #16]
 800762e:	b928      	cbnz	r0, 800763c <_svfiprintf_r+0x30>
 8007630:	230c      	movs	r3, #12
 8007632:	f8c8 3000 	str.w	r3, [r8]
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	e0c8      	b.n	80077ce <_svfiprintf_r+0x1c2>
 800763c:	2340      	movs	r3, #64	; 0x40
 800763e:	6163      	str	r3, [r4, #20]
 8007640:	2300      	movs	r3, #0
 8007642:	9309      	str	r3, [sp, #36]	; 0x24
 8007644:	2320      	movs	r3, #32
 8007646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800764a:	2330      	movs	r3, #48	; 0x30
 800764c:	f04f 0b01 	mov.w	fp, #1
 8007650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007654:	9503      	str	r5, [sp, #12]
 8007656:	4637      	mov	r7, r6
 8007658:	463d      	mov	r5, r7
 800765a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800765e:	b10b      	cbz	r3, 8007664 <_svfiprintf_r+0x58>
 8007660:	2b25      	cmp	r3, #37	; 0x25
 8007662:	d13e      	bne.n	80076e2 <_svfiprintf_r+0xd6>
 8007664:	ebb7 0a06 	subs.w	sl, r7, r6
 8007668:	d00b      	beq.n	8007682 <_svfiprintf_r+0x76>
 800766a:	4653      	mov	r3, sl
 800766c:	4632      	mov	r2, r6
 800766e:	4621      	mov	r1, r4
 8007670:	4640      	mov	r0, r8
 8007672:	f7ff ff71 	bl	8007558 <__ssputs_r>
 8007676:	3001      	adds	r0, #1
 8007678:	f000 80a4 	beq.w	80077c4 <_svfiprintf_r+0x1b8>
 800767c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767e:	4453      	add	r3, sl
 8007680:	9309      	str	r3, [sp, #36]	; 0x24
 8007682:	783b      	ldrb	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 809d 	beq.w	80077c4 <_svfiprintf_r+0x1b8>
 800768a:	2300      	movs	r3, #0
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	9307      	str	r3, [sp, #28]
 8007698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800769c:	931a      	str	r3, [sp, #104]	; 0x68
 800769e:	462f      	mov	r7, r5
 80076a0:	2205      	movs	r2, #5
 80076a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80076a6:	4850      	ldr	r0, [pc, #320]	; (80077e8 <_svfiprintf_r+0x1dc>)
 80076a8:	f000 fa30 	bl	8007b0c <memchr>
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	b9d0      	cbnz	r0, 80076e6 <_svfiprintf_r+0xda>
 80076b0:	06d9      	lsls	r1, r3, #27
 80076b2:	bf44      	itt	mi
 80076b4:	2220      	movmi	r2, #32
 80076b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076ba:	071a      	lsls	r2, r3, #28
 80076bc:	bf44      	itt	mi
 80076be:	222b      	movmi	r2, #43	; 0x2b
 80076c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076c4:	782a      	ldrb	r2, [r5, #0]
 80076c6:	2a2a      	cmp	r2, #42	; 0x2a
 80076c8:	d015      	beq.n	80076f6 <_svfiprintf_r+0xea>
 80076ca:	462f      	mov	r7, r5
 80076cc:	2000      	movs	r0, #0
 80076ce:	250a      	movs	r5, #10
 80076d0:	9a07      	ldr	r2, [sp, #28]
 80076d2:	4639      	mov	r1, r7
 80076d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d8:	3b30      	subs	r3, #48	; 0x30
 80076da:	2b09      	cmp	r3, #9
 80076dc:	d94d      	bls.n	800777a <_svfiprintf_r+0x16e>
 80076de:	b1b8      	cbz	r0, 8007710 <_svfiprintf_r+0x104>
 80076e0:	e00f      	b.n	8007702 <_svfiprintf_r+0xf6>
 80076e2:	462f      	mov	r7, r5
 80076e4:	e7b8      	b.n	8007658 <_svfiprintf_r+0x4c>
 80076e6:	4a40      	ldr	r2, [pc, #256]	; (80077e8 <_svfiprintf_r+0x1dc>)
 80076e8:	463d      	mov	r5, r7
 80076ea:	1a80      	subs	r0, r0, r2
 80076ec:	fa0b f000 	lsl.w	r0, fp, r0
 80076f0:	4318      	orrs	r0, r3
 80076f2:	9004      	str	r0, [sp, #16]
 80076f4:	e7d3      	b.n	800769e <_svfiprintf_r+0x92>
 80076f6:	9a03      	ldr	r2, [sp, #12]
 80076f8:	1d11      	adds	r1, r2, #4
 80076fa:	6812      	ldr	r2, [r2, #0]
 80076fc:	9103      	str	r1, [sp, #12]
 80076fe:	2a00      	cmp	r2, #0
 8007700:	db01      	blt.n	8007706 <_svfiprintf_r+0xfa>
 8007702:	9207      	str	r2, [sp, #28]
 8007704:	e004      	b.n	8007710 <_svfiprintf_r+0x104>
 8007706:	4252      	negs	r2, r2
 8007708:	f043 0302 	orr.w	r3, r3, #2
 800770c:	9207      	str	r2, [sp, #28]
 800770e:	9304      	str	r3, [sp, #16]
 8007710:	783b      	ldrb	r3, [r7, #0]
 8007712:	2b2e      	cmp	r3, #46	; 0x2e
 8007714:	d10c      	bne.n	8007730 <_svfiprintf_r+0x124>
 8007716:	787b      	ldrb	r3, [r7, #1]
 8007718:	2b2a      	cmp	r3, #42	; 0x2a
 800771a:	d133      	bne.n	8007784 <_svfiprintf_r+0x178>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	3702      	adds	r7, #2
 8007720:	1d1a      	adds	r2, r3, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	9203      	str	r2, [sp, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfb8      	it	lt
 800772a:	f04f 33ff 	movlt.w	r3, #4294967295
 800772e:	9305      	str	r3, [sp, #20]
 8007730:	4d2e      	ldr	r5, [pc, #184]	; (80077ec <_svfiprintf_r+0x1e0>)
 8007732:	2203      	movs	r2, #3
 8007734:	7839      	ldrb	r1, [r7, #0]
 8007736:	4628      	mov	r0, r5
 8007738:	f000 f9e8 	bl	8007b0c <memchr>
 800773c:	b138      	cbz	r0, 800774e <_svfiprintf_r+0x142>
 800773e:	2340      	movs	r3, #64	; 0x40
 8007740:	1b40      	subs	r0, r0, r5
 8007742:	fa03 f000 	lsl.w	r0, r3, r0
 8007746:	9b04      	ldr	r3, [sp, #16]
 8007748:	3701      	adds	r7, #1
 800774a:	4303      	orrs	r3, r0
 800774c:	9304      	str	r3, [sp, #16]
 800774e:	7839      	ldrb	r1, [r7, #0]
 8007750:	2206      	movs	r2, #6
 8007752:	4827      	ldr	r0, [pc, #156]	; (80077f0 <_svfiprintf_r+0x1e4>)
 8007754:	1c7e      	adds	r6, r7, #1
 8007756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800775a:	f000 f9d7 	bl	8007b0c <memchr>
 800775e:	2800      	cmp	r0, #0
 8007760:	d038      	beq.n	80077d4 <_svfiprintf_r+0x1c8>
 8007762:	4b24      	ldr	r3, [pc, #144]	; (80077f4 <_svfiprintf_r+0x1e8>)
 8007764:	bb13      	cbnz	r3, 80077ac <_svfiprintf_r+0x1a0>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	3307      	adds	r3, #7
 800776a:	f023 0307 	bic.w	r3, r3, #7
 800776e:	3308      	adds	r3, #8
 8007770:	9303      	str	r3, [sp, #12]
 8007772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007774:	444b      	add	r3, r9
 8007776:	9309      	str	r3, [sp, #36]	; 0x24
 8007778:	e76d      	b.n	8007656 <_svfiprintf_r+0x4a>
 800777a:	fb05 3202 	mla	r2, r5, r2, r3
 800777e:	2001      	movs	r0, #1
 8007780:	460f      	mov	r7, r1
 8007782:	e7a6      	b.n	80076d2 <_svfiprintf_r+0xc6>
 8007784:	2300      	movs	r3, #0
 8007786:	250a      	movs	r5, #10
 8007788:	4619      	mov	r1, r3
 800778a:	3701      	adds	r7, #1
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	4638      	mov	r0, r7
 8007790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007794:	3a30      	subs	r2, #48	; 0x30
 8007796:	2a09      	cmp	r2, #9
 8007798:	d903      	bls.n	80077a2 <_svfiprintf_r+0x196>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0c8      	beq.n	8007730 <_svfiprintf_r+0x124>
 800779e:	9105      	str	r1, [sp, #20]
 80077a0:	e7c6      	b.n	8007730 <_svfiprintf_r+0x124>
 80077a2:	fb05 2101 	mla	r1, r5, r1, r2
 80077a6:	2301      	movs	r3, #1
 80077a8:	4607      	mov	r7, r0
 80077aa:	e7f0      	b.n	800778e <_svfiprintf_r+0x182>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4622      	mov	r2, r4
 80077b2:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <_svfiprintf_r+0x1ec>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4640      	mov	r0, r8
 80077b8:	f3af 8000 	nop.w
 80077bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077c0:	4681      	mov	r9, r0
 80077c2:	d1d6      	bne.n	8007772 <_svfiprintf_r+0x166>
 80077c4:	89a3      	ldrh	r3, [r4, #12]
 80077c6:	065b      	lsls	r3, r3, #25
 80077c8:	f53f af35 	bmi.w	8007636 <_svfiprintf_r+0x2a>
 80077cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077ce:	b01d      	add	sp, #116	; 0x74
 80077d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d4:	ab03      	add	r3, sp, #12
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	4622      	mov	r2, r4
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <_svfiprintf_r+0x1ec>)
 80077dc:	a904      	add	r1, sp, #16
 80077de:	4640      	mov	r0, r8
 80077e0:	f000 f882 	bl	80078e8 <_printf_i>
 80077e4:	e7ea      	b.n	80077bc <_svfiprintf_r+0x1b0>
 80077e6:	bf00      	nop
 80077e8:	0800f3f4 	.word	0x0800f3f4
 80077ec:	0800f3fa 	.word	0x0800f3fa
 80077f0:	0800f3fe 	.word	0x0800f3fe
 80077f4:	00000000 	.word	0x00000000
 80077f8:	08007559 	.word	0x08007559

080077fc <_printf_common>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	4691      	mov	r9, r2
 8007802:	461f      	mov	r7, r3
 8007804:	688a      	ldr	r2, [r1, #8]
 8007806:	690b      	ldr	r3, [r1, #16]
 8007808:	4606      	mov	r6, r0
 800780a:	4293      	cmp	r3, r2
 800780c:	bfb8      	it	lt
 800780e:	4613      	movlt	r3, r2
 8007810:	f8c9 3000 	str.w	r3, [r9]
 8007814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007818:	460c      	mov	r4, r1
 800781a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800781e:	b112      	cbz	r2, 8007826 <_printf_common+0x2a>
 8007820:	3301      	adds	r3, #1
 8007822:	f8c9 3000 	str.w	r3, [r9]
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	0699      	lsls	r1, r3, #26
 800782a:	bf42      	ittt	mi
 800782c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007830:	3302      	addmi	r3, #2
 8007832:	f8c9 3000 	strmi.w	r3, [r9]
 8007836:	6825      	ldr	r5, [r4, #0]
 8007838:	f015 0506 	ands.w	r5, r5, #6
 800783c:	d107      	bne.n	800784e <_printf_common+0x52>
 800783e:	f104 0a19 	add.w	sl, r4, #25
 8007842:	68e3      	ldr	r3, [r4, #12]
 8007844:	f8d9 2000 	ldr.w	r2, [r9]
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	42ab      	cmp	r3, r5
 800784c:	dc29      	bgt.n	80078a2 <_printf_common+0xa6>
 800784e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007852:	6822      	ldr	r2, [r4, #0]
 8007854:	3300      	adds	r3, #0
 8007856:	bf18      	it	ne
 8007858:	2301      	movne	r3, #1
 800785a:	0692      	lsls	r2, r2, #26
 800785c:	d42e      	bmi.n	80078bc <_printf_common+0xc0>
 800785e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007862:	4639      	mov	r1, r7
 8007864:	4630      	mov	r0, r6
 8007866:	47c0      	blx	r8
 8007868:	3001      	adds	r0, #1
 800786a:	d021      	beq.n	80078b0 <_printf_common+0xb4>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	68e5      	ldr	r5, [r4, #12]
 8007870:	f003 0306 	and.w	r3, r3, #6
 8007874:	2b04      	cmp	r3, #4
 8007876:	bf18      	it	ne
 8007878:	2500      	movne	r5, #0
 800787a:	f8d9 2000 	ldr.w	r2, [r9]
 800787e:	f04f 0900 	mov.w	r9, #0
 8007882:	bf08      	it	eq
 8007884:	1aad      	subeq	r5, r5, r2
 8007886:	68a3      	ldr	r3, [r4, #8]
 8007888:	6922      	ldr	r2, [r4, #16]
 800788a:	bf08      	it	eq
 800788c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007890:	4293      	cmp	r3, r2
 8007892:	bfc4      	itt	gt
 8007894:	1a9b      	subgt	r3, r3, r2
 8007896:	18ed      	addgt	r5, r5, r3
 8007898:	341a      	adds	r4, #26
 800789a:	454d      	cmp	r5, r9
 800789c:	d11a      	bne.n	80078d4 <_printf_common+0xd8>
 800789e:	2000      	movs	r0, #0
 80078a0:	e008      	b.n	80078b4 <_printf_common+0xb8>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4652      	mov	r2, sl
 80078a6:	4639      	mov	r1, r7
 80078a8:	4630      	mov	r0, r6
 80078aa:	47c0      	blx	r8
 80078ac:	3001      	adds	r0, #1
 80078ae:	d103      	bne.n	80078b8 <_printf_common+0xbc>
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b8:	3501      	adds	r5, #1
 80078ba:	e7c2      	b.n	8007842 <_printf_common+0x46>
 80078bc:	2030      	movs	r0, #48	; 0x30
 80078be:	18e1      	adds	r1, r4, r3
 80078c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078ca:	4422      	add	r2, r4
 80078cc:	3302      	adds	r3, #2
 80078ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078d2:	e7c4      	b.n	800785e <_printf_common+0x62>
 80078d4:	2301      	movs	r3, #1
 80078d6:	4622      	mov	r2, r4
 80078d8:	4639      	mov	r1, r7
 80078da:	4630      	mov	r0, r6
 80078dc:	47c0      	blx	r8
 80078de:	3001      	adds	r0, #1
 80078e0:	d0e6      	beq.n	80078b0 <_printf_common+0xb4>
 80078e2:	f109 0901 	add.w	r9, r9, #1
 80078e6:	e7d8      	b.n	800789a <_printf_common+0x9e>

080078e8 <_printf_i>:
 80078e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80078f0:	460c      	mov	r4, r1
 80078f2:	7e09      	ldrb	r1, [r1, #24]
 80078f4:	b085      	sub	sp, #20
 80078f6:	296e      	cmp	r1, #110	; 0x6e
 80078f8:	4617      	mov	r7, r2
 80078fa:	4606      	mov	r6, r0
 80078fc:	4698      	mov	r8, r3
 80078fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007900:	f000 80b3 	beq.w	8007a6a <_printf_i+0x182>
 8007904:	d822      	bhi.n	800794c <_printf_i+0x64>
 8007906:	2963      	cmp	r1, #99	; 0x63
 8007908:	d036      	beq.n	8007978 <_printf_i+0x90>
 800790a:	d80a      	bhi.n	8007922 <_printf_i+0x3a>
 800790c:	2900      	cmp	r1, #0
 800790e:	f000 80b9 	beq.w	8007a84 <_printf_i+0x19c>
 8007912:	2958      	cmp	r1, #88	; 0x58
 8007914:	f000 8083 	beq.w	8007a1e <_printf_i+0x136>
 8007918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800791c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007920:	e032      	b.n	8007988 <_printf_i+0xa0>
 8007922:	2964      	cmp	r1, #100	; 0x64
 8007924:	d001      	beq.n	800792a <_printf_i+0x42>
 8007926:	2969      	cmp	r1, #105	; 0x69
 8007928:	d1f6      	bne.n	8007918 <_printf_i+0x30>
 800792a:	6820      	ldr	r0, [r4, #0]
 800792c:	6813      	ldr	r3, [r2, #0]
 800792e:	0605      	lsls	r5, r0, #24
 8007930:	f103 0104 	add.w	r1, r3, #4
 8007934:	d52a      	bpl.n	800798c <_printf_i+0xa4>
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6011      	str	r1, [r2, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	da03      	bge.n	8007946 <_printf_i+0x5e>
 800793e:	222d      	movs	r2, #45	; 0x2d
 8007940:	425b      	negs	r3, r3
 8007942:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007946:	486f      	ldr	r0, [pc, #444]	; (8007b04 <_printf_i+0x21c>)
 8007948:	220a      	movs	r2, #10
 800794a:	e039      	b.n	80079c0 <_printf_i+0xd8>
 800794c:	2973      	cmp	r1, #115	; 0x73
 800794e:	f000 809d 	beq.w	8007a8c <_printf_i+0x1a4>
 8007952:	d808      	bhi.n	8007966 <_printf_i+0x7e>
 8007954:	296f      	cmp	r1, #111	; 0x6f
 8007956:	d020      	beq.n	800799a <_printf_i+0xb2>
 8007958:	2970      	cmp	r1, #112	; 0x70
 800795a:	d1dd      	bne.n	8007918 <_printf_i+0x30>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	f043 0320 	orr.w	r3, r3, #32
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	e003      	b.n	800796e <_printf_i+0x86>
 8007966:	2975      	cmp	r1, #117	; 0x75
 8007968:	d017      	beq.n	800799a <_printf_i+0xb2>
 800796a:	2978      	cmp	r1, #120	; 0x78
 800796c:	d1d4      	bne.n	8007918 <_printf_i+0x30>
 800796e:	2378      	movs	r3, #120	; 0x78
 8007970:	4865      	ldr	r0, [pc, #404]	; (8007b08 <_printf_i+0x220>)
 8007972:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007976:	e055      	b.n	8007a24 <_printf_i+0x13c>
 8007978:	6813      	ldr	r3, [r2, #0]
 800797a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800797e:	1d19      	adds	r1, r3, #4
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6011      	str	r1, [r2, #0]
 8007984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007988:	2301      	movs	r3, #1
 800798a:	e08c      	b.n	8007aa6 <_printf_i+0x1be>
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007992:	6011      	str	r1, [r2, #0]
 8007994:	bf18      	it	ne
 8007996:	b21b      	sxthne	r3, r3
 8007998:	e7cf      	b.n	800793a <_printf_i+0x52>
 800799a:	6813      	ldr	r3, [r2, #0]
 800799c:	6825      	ldr	r5, [r4, #0]
 800799e:	1d18      	adds	r0, r3, #4
 80079a0:	6010      	str	r0, [r2, #0]
 80079a2:	0628      	lsls	r0, r5, #24
 80079a4:	d501      	bpl.n	80079aa <_printf_i+0xc2>
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	e002      	b.n	80079b0 <_printf_i+0xc8>
 80079aa:	0668      	lsls	r0, r5, #25
 80079ac:	d5fb      	bpl.n	80079a6 <_printf_i+0xbe>
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	296f      	cmp	r1, #111	; 0x6f
 80079b2:	bf14      	ite	ne
 80079b4:	220a      	movne	r2, #10
 80079b6:	2208      	moveq	r2, #8
 80079b8:	4852      	ldr	r0, [pc, #328]	; (8007b04 <_printf_i+0x21c>)
 80079ba:	2100      	movs	r1, #0
 80079bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079c0:	6865      	ldr	r5, [r4, #4]
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	60a5      	str	r5, [r4, #8]
 80079c6:	f2c0 8095 	blt.w	8007af4 <_printf_i+0x20c>
 80079ca:	6821      	ldr	r1, [r4, #0]
 80079cc:	f021 0104 	bic.w	r1, r1, #4
 80079d0:	6021      	str	r1, [r4, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d13d      	bne.n	8007a52 <_printf_i+0x16a>
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	f040 808e 	bne.w	8007af8 <_printf_i+0x210>
 80079dc:	4665      	mov	r5, ip
 80079de:	2a08      	cmp	r2, #8
 80079e0:	d10b      	bne.n	80079fa <_printf_i+0x112>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	07db      	lsls	r3, r3, #31
 80079e6:	d508      	bpl.n	80079fa <_printf_i+0x112>
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	6862      	ldr	r2, [r4, #4]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	bfde      	ittt	le
 80079f0:	2330      	movle	r3, #48	; 0x30
 80079f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079fa:	ebac 0305 	sub.w	r3, ip, r5
 80079fe:	6123      	str	r3, [r4, #16]
 8007a00:	f8cd 8000 	str.w	r8, [sp]
 8007a04:	463b      	mov	r3, r7
 8007a06:	aa03      	add	r2, sp, #12
 8007a08:	4621      	mov	r1, r4
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff fef6 	bl	80077fc <_printf_common>
 8007a10:	3001      	adds	r0, #1
 8007a12:	d14d      	bne.n	8007ab0 <_printf_i+0x1c8>
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	b005      	add	sp, #20
 8007a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a1e:	4839      	ldr	r0, [pc, #228]	; (8007b04 <_printf_i+0x21c>)
 8007a20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a24:	6813      	ldr	r3, [r2, #0]
 8007a26:	6821      	ldr	r1, [r4, #0]
 8007a28:	1d1d      	adds	r5, r3, #4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6015      	str	r5, [r2, #0]
 8007a2e:	060a      	lsls	r2, r1, #24
 8007a30:	d50b      	bpl.n	8007a4a <_printf_i+0x162>
 8007a32:	07ca      	lsls	r2, r1, #31
 8007a34:	bf44      	itt	mi
 8007a36:	f041 0120 	orrmi.w	r1, r1, #32
 8007a3a:	6021      	strmi	r1, [r4, #0]
 8007a3c:	b91b      	cbnz	r3, 8007a46 <_printf_i+0x15e>
 8007a3e:	6822      	ldr	r2, [r4, #0]
 8007a40:	f022 0220 	bic.w	r2, r2, #32
 8007a44:	6022      	str	r2, [r4, #0]
 8007a46:	2210      	movs	r2, #16
 8007a48:	e7b7      	b.n	80079ba <_printf_i+0xd2>
 8007a4a:	064d      	lsls	r5, r1, #25
 8007a4c:	bf48      	it	mi
 8007a4e:	b29b      	uxthmi	r3, r3
 8007a50:	e7ef      	b.n	8007a32 <_printf_i+0x14a>
 8007a52:	4665      	mov	r5, ip
 8007a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a58:	fb02 3311 	mls	r3, r2, r1, r3
 8007a5c:	5cc3      	ldrb	r3, [r0, r3]
 8007a5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a62:	460b      	mov	r3, r1
 8007a64:	2900      	cmp	r1, #0
 8007a66:	d1f5      	bne.n	8007a54 <_printf_i+0x16c>
 8007a68:	e7b9      	b.n	80079de <_printf_i+0xf6>
 8007a6a:	6813      	ldr	r3, [r2, #0]
 8007a6c:	6825      	ldr	r5, [r4, #0]
 8007a6e:	1d18      	adds	r0, r3, #4
 8007a70:	6961      	ldr	r1, [r4, #20]
 8007a72:	6010      	str	r0, [r2, #0]
 8007a74:	0628      	lsls	r0, r5, #24
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	d501      	bpl.n	8007a7e <_printf_i+0x196>
 8007a7a:	6019      	str	r1, [r3, #0]
 8007a7c:	e002      	b.n	8007a84 <_printf_i+0x19c>
 8007a7e:	066a      	lsls	r2, r5, #25
 8007a80:	d5fb      	bpl.n	8007a7a <_printf_i+0x192>
 8007a82:	8019      	strh	r1, [r3, #0]
 8007a84:	2300      	movs	r3, #0
 8007a86:	4665      	mov	r5, ip
 8007a88:	6123      	str	r3, [r4, #16]
 8007a8a:	e7b9      	b.n	8007a00 <_printf_i+0x118>
 8007a8c:	6813      	ldr	r3, [r2, #0]
 8007a8e:	1d19      	adds	r1, r3, #4
 8007a90:	6011      	str	r1, [r2, #0]
 8007a92:	681d      	ldr	r5, [r3, #0]
 8007a94:	6862      	ldr	r2, [r4, #4]
 8007a96:	2100      	movs	r1, #0
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 f837 	bl	8007b0c <memchr>
 8007a9e:	b108      	cbz	r0, 8007aa4 <_printf_i+0x1bc>
 8007aa0:	1b40      	subs	r0, r0, r5
 8007aa2:	6060      	str	r0, [r4, #4]
 8007aa4:	6863      	ldr	r3, [r4, #4]
 8007aa6:	6123      	str	r3, [r4, #16]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aae:	e7a7      	b.n	8007a00 <_printf_i+0x118>
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	47c0      	blx	r8
 8007aba:	3001      	adds	r0, #1
 8007abc:	d0aa      	beq.n	8007a14 <_printf_i+0x12c>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	079b      	lsls	r3, r3, #30
 8007ac2:	d413      	bmi.n	8007aec <_printf_i+0x204>
 8007ac4:	68e0      	ldr	r0, [r4, #12]
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	4298      	cmp	r0, r3
 8007aca:	bfb8      	it	lt
 8007acc:	4618      	movlt	r0, r3
 8007ace:	e7a3      	b.n	8007a18 <_printf_i+0x130>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	464a      	mov	r2, r9
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	47c0      	blx	r8
 8007ada:	3001      	adds	r0, #1
 8007adc:	d09a      	beq.n	8007a14 <_printf_i+0x12c>
 8007ade:	3501      	adds	r5, #1
 8007ae0:	68e3      	ldr	r3, [r4, #12]
 8007ae2:	9a03      	ldr	r2, [sp, #12]
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	42ab      	cmp	r3, r5
 8007ae8:	dcf2      	bgt.n	8007ad0 <_printf_i+0x1e8>
 8007aea:	e7eb      	b.n	8007ac4 <_printf_i+0x1dc>
 8007aec:	2500      	movs	r5, #0
 8007aee:	f104 0919 	add.w	r9, r4, #25
 8007af2:	e7f5      	b.n	8007ae0 <_printf_i+0x1f8>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1ac      	bne.n	8007a52 <_printf_i+0x16a>
 8007af8:	7803      	ldrb	r3, [r0, #0]
 8007afa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007afe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b02:	e76c      	b.n	80079de <_printf_i+0xf6>
 8007b04:	0800f405 	.word	0x0800f405
 8007b08:	0800f416 	.word	0x0800f416

08007b0c <memchr>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	b2c9      	uxtb	r1, r1
 8007b10:	4402      	add	r2, r0
 8007b12:	4290      	cmp	r0, r2
 8007b14:	4603      	mov	r3, r0
 8007b16:	d101      	bne.n	8007b1c <memchr+0x10>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e003      	b.n	8007b24 <memchr+0x18>
 8007b1c:	781c      	ldrb	r4, [r3, #0]
 8007b1e:	3001      	adds	r0, #1
 8007b20:	428c      	cmp	r4, r1
 8007b22:	d1f6      	bne.n	8007b12 <memchr+0x6>
 8007b24:	4618      	mov	r0, r3
 8007b26:	bd10      	pop	{r4, pc}

08007b28 <memcpy>:
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	1e43      	subs	r3, r0, #1
 8007b2c:	440a      	add	r2, r1
 8007b2e:	4291      	cmp	r1, r2
 8007b30:	d100      	bne.n	8007b34 <memcpy+0xc>
 8007b32:	bd10      	pop	{r4, pc}
 8007b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b3c:	e7f7      	b.n	8007b2e <memcpy+0x6>

08007b3e <memmove>:
 8007b3e:	4288      	cmp	r0, r1
 8007b40:	b510      	push	{r4, lr}
 8007b42:	eb01 0302 	add.w	r3, r1, r2
 8007b46:	d807      	bhi.n	8007b58 <memmove+0x1a>
 8007b48:	1e42      	subs	r2, r0, #1
 8007b4a:	4299      	cmp	r1, r3
 8007b4c:	d00a      	beq.n	8007b64 <memmove+0x26>
 8007b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b56:	e7f8      	b.n	8007b4a <memmove+0xc>
 8007b58:	4283      	cmp	r3, r0
 8007b5a:	d9f5      	bls.n	8007b48 <memmove+0xa>
 8007b5c:	1881      	adds	r1, r0, r2
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	42d3      	cmn	r3, r2
 8007b62:	d100      	bne.n	8007b66 <memmove+0x28>
 8007b64:	bd10      	pop	{r4, pc}
 8007b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b6e:	e7f7      	b.n	8007b60 <memmove+0x22>

08007b70 <_free_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4605      	mov	r5, r0
 8007b74:	2900      	cmp	r1, #0
 8007b76:	d043      	beq.n	8007c00 <_free_r+0x90>
 8007b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7c:	1f0c      	subs	r4, r1, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfb8      	it	lt
 8007b82:	18e4      	addlt	r4, r4, r3
 8007b84:	f000 f8d0 	bl	8007d28 <__malloc_lock>
 8007b88:	4a1e      	ldr	r2, [pc, #120]	; (8007c04 <_free_r+0x94>)
 8007b8a:	6813      	ldr	r3, [r2, #0]
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	b933      	cbnz	r3, 8007b9e <_free_r+0x2e>
 8007b90:	6063      	str	r3, [r4, #4]
 8007b92:	6014      	str	r4, [r2, #0]
 8007b94:	4628      	mov	r0, r5
 8007b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b9a:	f000 b8c6 	b.w	8007d2a <__malloc_unlock>
 8007b9e:	42a3      	cmp	r3, r4
 8007ba0:	d90b      	bls.n	8007bba <_free_r+0x4a>
 8007ba2:	6821      	ldr	r1, [r4, #0]
 8007ba4:	1862      	adds	r2, r4, r1
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	bf01      	itttt	eq
 8007baa:	681a      	ldreq	r2, [r3, #0]
 8007bac:	685b      	ldreq	r3, [r3, #4]
 8007bae:	1852      	addeq	r2, r2, r1
 8007bb0:	6022      	streq	r2, [r4, #0]
 8007bb2:	6063      	str	r3, [r4, #4]
 8007bb4:	6004      	str	r4, [r0, #0]
 8007bb6:	e7ed      	b.n	8007b94 <_free_r+0x24>
 8007bb8:	4613      	mov	r3, r2
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	b10a      	cbz	r2, 8007bc2 <_free_r+0x52>
 8007bbe:	42a2      	cmp	r2, r4
 8007bc0:	d9fa      	bls.n	8007bb8 <_free_r+0x48>
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	1858      	adds	r0, r3, r1
 8007bc6:	42a0      	cmp	r0, r4
 8007bc8:	d10b      	bne.n	8007be2 <_free_r+0x72>
 8007bca:	6820      	ldr	r0, [r4, #0]
 8007bcc:	4401      	add	r1, r0
 8007bce:	1858      	adds	r0, r3, r1
 8007bd0:	4282      	cmp	r2, r0
 8007bd2:	6019      	str	r1, [r3, #0]
 8007bd4:	d1de      	bne.n	8007b94 <_free_r+0x24>
 8007bd6:	6810      	ldr	r0, [r2, #0]
 8007bd8:	6852      	ldr	r2, [r2, #4]
 8007bda:	4401      	add	r1, r0
 8007bdc:	6019      	str	r1, [r3, #0]
 8007bde:	605a      	str	r2, [r3, #4]
 8007be0:	e7d8      	b.n	8007b94 <_free_r+0x24>
 8007be2:	d902      	bls.n	8007bea <_free_r+0x7a>
 8007be4:	230c      	movs	r3, #12
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	e7d4      	b.n	8007b94 <_free_r+0x24>
 8007bea:	6820      	ldr	r0, [r4, #0]
 8007bec:	1821      	adds	r1, r4, r0
 8007bee:	428a      	cmp	r2, r1
 8007bf0:	bf01      	itttt	eq
 8007bf2:	6811      	ldreq	r1, [r2, #0]
 8007bf4:	6852      	ldreq	r2, [r2, #4]
 8007bf6:	1809      	addeq	r1, r1, r0
 8007bf8:	6021      	streq	r1, [r4, #0]
 8007bfa:	6062      	str	r2, [r4, #4]
 8007bfc:	605c      	str	r4, [r3, #4]
 8007bfe:	e7c9      	b.n	8007b94 <_free_r+0x24>
 8007c00:	bd38      	pop	{r3, r4, r5, pc}
 8007c02:	bf00      	nop
 8007c04:	20000508 	.word	0x20000508

08007c08 <_malloc_r>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	1ccd      	adds	r5, r1, #3
 8007c0c:	f025 0503 	bic.w	r5, r5, #3
 8007c10:	3508      	adds	r5, #8
 8007c12:	2d0c      	cmp	r5, #12
 8007c14:	bf38      	it	cc
 8007c16:	250c      	movcc	r5, #12
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	db01      	blt.n	8007c22 <_malloc_r+0x1a>
 8007c1e:	42a9      	cmp	r1, r5
 8007c20:	d903      	bls.n	8007c2a <_malloc_r+0x22>
 8007c22:	230c      	movs	r3, #12
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	2000      	movs	r0, #0
 8007c28:	bd70      	pop	{r4, r5, r6, pc}
 8007c2a:	f000 f87d 	bl	8007d28 <__malloc_lock>
 8007c2e:	4a21      	ldr	r2, [pc, #132]	; (8007cb4 <_malloc_r+0xac>)
 8007c30:	6814      	ldr	r4, [r2, #0]
 8007c32:	4621      	mov	r1, r4
 8007c34:	b991      	cbnz	r1, 8007c5c <_malloc_r+0x54>
 8007c36:	4c20      	ldr	r4, [pc, #128]	; (8007cb8 <_malloc_r+0xb0>)
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	b91b      	cbnz	r3, 8007c44 <_malloc_r+0x3c>
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f000 f863 	bl	8007d08 <_sbrk_r>
 8007c42:	6020      	str	r0, [r4, #0]
 8007c44:	4629      	mov	r1, r5
 8007c46:	4630      	mov	r0, r6
 8007c48:	f000 f85e 	bl	8007d08 <_sbrk_r>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d124      	bne.n	8007c9a <_malloc_r+0x92>
 8007c50:	230c      	movs	r3, #12
 8007c52:	4630      	mov	r0, r6
 8007c54:	6033      	str	r3, [r6, #0]
 8007c56:	f000 f868 	bl	8007d2a <__malloc_unlock>
 8007c5a:	e7e4      	b.n	8007c26 <_malloc_r+0x1e>
 8007c5c:	680b      	ldr	r3, [r1, #0]
 8007c5e:	1b5b      	subs	r3, r3, r5
 8007c60:	d418      	bmi.n	8007c94 <_malloc_r+0x8c>
 8007c62:	2b0b      	cmp	r3, #11
 8007c64:	d90f      	bls.n	8007c86 <_malloc_r+0x7e>
 8007c66:	600b      	str	r3, [r1, #0]
 8007c68:	18cc      	adds	r4, r1, r3
 8007c6a:	50cd      	str	r5, [r1, r3]
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f000 f85c 	bl	8007d2a <__malloc_unlock>
 8007c72:	f104 000b 	add.w	r0, r4, #11
 8007c76:	1d23      	adds	r3, r4, #4
 8007c78:	f020 0007 	bic.w	r0, r0, #7
 8007c7c:	1ac3      	subs	r3, r0, r3
 8007c7e:	d0d3      	beq.n	8007c28 <_malloc_r+0x20>
 8007c80:	425a      	negs	r2, r3
 8007c82:	50e2      	str	r2, [r4, r3]
 8007c84:	e7d0      	b.n	8007c28 <_malloc_r+0x20>
 8007c86:	684b      	ldr	r3, [r1, #4]
 8007c88:	428c      	cmp	r4, r1
 8007c8a:	bf16      	itet	ne
 8007c8c:	6063      	strne	r3, [r4, #4]
 8007c8e:	6013      	streq	r3, [r2, #0]
 8007c90:	460c      	movne	r4, r1
 8007c92:	e7eb      	b.n	8007c6c <_malloc_r+0x64>
 8007c94:	460c      	mov	r4, r1
 8007c96:	6849      	ldr	r1, [r1, #4]
 8007c98:	e7cc      	b.n	8007c34 <_malloc_r+0x2c>
 8007c9a:	1cc4      	adds	r4, r0, #3
 8007c9c:	f024 0403 	bic.w	r4, r4, #3
 8007ca0:	42a0      	cmp	r0, r4
 8007ca2:	d005      	beq.n	8007cb0 <_malloc_r+0xa8>
 8007ca4:	1a21      	subs	r1, r4, r0
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f82e 	bl	8007d08 <_sbrk_r>
 8007cac:	3001      	adds	r0, #1
 8007cae:	d0cf      	beq.n	8007c50 <_malloc_r+0x48>
 8007cb0:	6025      	str	r5, [r4, #0]
 8007cb2:	e7db      	b.n	8007c6c <_malloc_r+0x64>
 8007cb4:	20000508 	.word	0x20000508
 8007cb8:	2000050c 	.word	0x2000050c

08007cbc <_realloc_r>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	4614      	mov	r4, r2
 8007cc2:	460e      	mov	r6, r1
 8007cc4:	b921      	cbnz	r1, 8007cd0 <_realloc_r+0x14>
 8007cc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cca:	4611      	mov	r1, r2
 8007ccc:	f7ff bf9c 	b.w	8007c08 <_malloc_r>
 8007cd0:	b922      	cbnz	r2, 8007cdc <_realloc_r+0x20>
 8007cd2:	f7ff ff4d 	bl	8007b70 <_free_r>
 8007cd6:	4625      	mov	r5, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cdc:	f000 f826 	bl	8007d2c <_malloc_usable_size_r>
 8007ce0:	42a0      	cmp	r0, r4
 8007ce2:	d20f      	bcs.n	8007d04 <_realloc_r+0x48>
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ff8e 	bl	8007c08 <_malloc_r>
 8007cec:	4605      	mov	r5, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d0f2      	beq.n	8007cd8 <_realloc_r+0x1c>
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	f7ff ff17 	bl	8007b28 <memcpy>
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	f7ff ff37 	bl	8007b70 <_free_r>
 8007d02:	e7e9      	b.n	8007cd8 <_realloc_r+0x1c>
 8007d04:	4635      	mov	r5, r6
 8007d06:	e7e7      	b.n	8007cd8 <_realloc_r+0x1c>

08007d08 <_sbrk_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4c05      	ldr	r4, [pc, #20]	; (8007d24 <_sbrk_r+0x1c>)
 8007d0e:	4605      	mov	r5, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	f7f8 fdaa 	bl	800086c <_sbrk>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_sbrk_r+0x1a>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_sbrk_r+0x1a>
 8007d20:	602b      	str	r3, [r5, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	2000067c 	.word	0x2000067c

08007d28 <__malloc_lock>:
 8007d28:	4770      	bx	lr

08007d2a <__malloc_unlock>:
 8007d2a:	4770      	bx	lr

08007d2c <_malloc_usable_size_r>:
 8007d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d30:	1f18      	subs	r0, r3, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	bfbc      	itt	lt
 8007d36:	580b      	ldrlt	r3, [r1, r0]
 8007d38:	18c0      	addlt	r0, r0, r3
 8007d3a:	4770      	bx	lr

08007d3c <_init>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr

08007d48 <_fini>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr
